generator client {
  provider = "prisma-client"
  output   = "./generated"
  moduleFormat = "esm"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Auth Models
model User {
  id               String    @id @map("_id")
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  stripeCustomerId String?   // Add this field for the Stripe plugin
  claimLimit       Int       @default(0)  // Number of claims allowed
  claimsUsed       Int       @default(0)  // Number of claims used
  saveLimit        Int       @default(0)  // Number of saves allowed (-1 for unlimited)
  savesUsed        Int       @default(0)  // Number of saves used
  viewLimit        Int       @default(1000)  // Number of views per day (-1 for unlimited)
  viewsUsed        Int       @default(0)  // Number of views used today
  lastViewReset    DateTime? // Last time view count was reset
  sessions         Session[]
  accounts         Account[]
  subscription     Subscription?
  paymentVerification PaymentVerification?
  savedIdeas SavedIdeas[]
  claimedIdeas ClaimedIdeas[]
  viewedIdeas ViewedIdeas[]
  userGeneratedIdeas UserGeneratedIdea[]
  ideaGenerationRequests IdeaGenerationRequest[]
  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Payment Models
model Subscription {
  id                   String    @id @map("_id")
  plan                 String
  referenceId          String    @unique  // Better Auth uses this as the userId
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String    @default("incomplete")
  periodStart          DateTime?
  periodEnd            DateTime?
  cancelAtPeriodEnd    Boolean   @default(false)
  seats                Int?
  trialStart           DateTime?
  trialEnd             DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  
  // Better Auth compatible user relation using referenceId
  user User @relation(fields: [referenceId], references: [id])
  
  @@map("subscription")
}

model PaymentVerification {
  id                String   @id @map("_id")
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  transactionNumber String   @unique
  amount            Decimal
  currency          String
  status            String   @default("pending")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("paymentVerification")
}

// Business Logic Enums
enum CatalystType {
  TECHNOLOGY_BREAKTHROUGH
  REGULATORY_CHANGE
  MARKET_SHIFT
  SOCIAL_TREND
  ECONOMIC_FACTOR
}

enum MarketMaturityLevel {
  EARLY_STAGES
  GROWTH_STAGES
  MATURE_STAGES
}

enum MarketConcentrationLevel {
  LOW
  MEDIUM
  HIGH
}

enum GrowthScale {
  SMALL
  MEDIUM
  LARGE
}

// Business Logic Models
model WhyNow {
  id String @id @default(uuid())
  title String
  description String
  trendStrength Int // 1-10 scale
  catalystType CatalystType
  timingUrgency Int // 1-10 scale
  supportingData Json // Array of data points
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dailyIdeas DailyIdea[]
}

model IdeaScore {
  id                String    @id @default(uuid())
  totalScore        Int
  dailyIdea         DailyIdea?
  problemSeverity   Int
  founderMarketFit  Int
  technicalFeasibility Int
  monetizationPotential Int
  urgencyScore      Int
  marketTimingScore Int
  executionDifficulty Int
  moatStrength      Int
  regulatoryRisk    Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model MarketOpportunity {
  id String @id @default(uuid())
  customerSegments CustomerSegments[]
  marketOpportunityScore Int
  ValidationStrength Int
  marketValidationSignals MarketValidationSignals[]
  totalMarketSize Int
  reachableMarketSize Int
  realisticMarketSize Int
  growthRate Int
  adoptionRate Int
  marketMaturityLevel MarketMaturityLevel
  marketAnalysisSummary String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dailyIdea DailyIdea?
}

model MarketValidationSignals {
  id String @id @default(uuid())
  name String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  marketOpportunityId String
  marketOpportunity MarketOpportunity @relation(fields: [marketOpportunityId], references: [id])
}

model MarketCompetition {
  id String @id @default(uuid())
  marketConcentrationLevel MarketConcentrationLevel
  marketConcentrationJustification String
  directCompetitors Json // Array of objects: { name: String, justification: String, strengths: String[3], weaknesses: String[3] }
  indirectCompetitors Json // Array of objects: { name: String, justification: String, strengths: String[3], weaknesses: String[3] }
  competitorFailurePoints String[]
  unfairAdvantage String[]
  moat String[]
  competitivePositioningScore Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dailyIdeaId String @unique
  dailyIdea DailyIdea @relation(fields: [dailyIdeaId], references: [id])
}

model CustomerSegments {
  id String @id @default(uuid())
  name String
  description String
  growthScale GrowthScale
  growthScaleJustification String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  marketOpportunityId String
  marketOpportunity MarketOpportunity @relation(fields: [marketOpportunityId], references: [id])
}

model MarketGap {
  id          String   @id @default(uuid())
  title       String
  description String
  impact      String
  target      String
  opportunity String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dailyIdeaId String @unique
  dailyIdea DailyIdea @relation(fields: [dailyIdeaId], references: [id])
}

model CompetitiveAdvantage {
  id             String   @id @default(uuid())
  title          String
  description    String
  sustainability String
  impact         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  dailyIdeaId String @unique
  dailyIdea DailyIdea @relation(fields: [dailyIdeaId], references: [id])
}

model StrategicPositioning {
  id                 String   @id @default(uuid())
  name               String
  targetSegment      String
  valueProposition   String
  keyDifferentiators String[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  dailyIdeaId String @unique
  dailyIdea DailyIdea @relation(fields: [dailyIdeaId], references: [id])
}

model MonetizationStrategy {
  id                   String                 @id @default(uuid())
  primaryModel         String
  pricingStrategy      String
  businessScore        Float
  confidence           Int
  revenueModelValidation String // Validation signals for revenue model
  pricingSensitivity   String // Market price sensitivity analysis
  revenueStreams       RevenueStream[]
  keyMetrics           KeyMetrics?
  financialProjections FinancialProjection[]
  dailyIdea            DailyIdea?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
}

model RevenueStream {
  id                     String               @id @default(uuid())
  name                   String
  description            String
  percentage             Int
  monetizationStrategyId String
  monetizationStrategy   MonetizationStrategy @relation(fields: [monetizationStrategyId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
}

model KeyMetrics {
  id                       String                @id @default(uuid())
  ltv                      Int
  ltvDescription           String
  cac                      Int
  cacDescription           String
  ltvCacRatio              Float
  ltvCacRatioDescription   String
  paybackPeriod            Int
  paybackPeriodDescription String
  runway                   Int
  runwayDescription        String
  breakEvenPoint           String
  breakEvenPointDescription String
  monetizationStrategyId   String?               @unique
  monetizationStrategy     MonetizationStrategy? @relation(fields: [monetizationStrategyId], references: [id])
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
}

model FinancialProjection {
  id                     String               @id @default(uuid())
  year                   Int
  revenue                Float
  costs                  Float
  netMargin              Float
  revenueGrowth          Float
  monetizationStrategyId String
  monetizationStrategy   MonetizationStrategy @relation(fields: [monetizationStrategyId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
}

model ExecutionPlan {
  id String @id @default(uuid())
  mvpDescription String
  keyMilestones Json // [{ milestone: String, timeframe: String, resources: String }]
  resourceRequirements String
  teamRequirements String[]
  riskFactors String[]
  technicalRoadmap String
  goToMarketStrategy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dailyIdeaId String @unique
  dailyIdea DailyIdea @relation(fields: [dailyIdeaId], references: [id])
}

model TractionSignals {
  id String @id @default(uuid())
  waitlistCount Int?
  socialMentions Int?
  searchVolume Int?
  competitorFunding Float?
  patentActivity Int?
  regulatoryChanges String[]
  mediaAttention Int?
  expertEndorsements String[]
  earlyAdopterSignals String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dailyIdeaId String @unique
  dailyIdea DailyIdea @relation(fields: [dailyIdeaId], references: [id])
}

model FrameworkFit {
  id String @id @default(uuid())
  jobsToBeDone String[]
  blueOceanFactors Json // { eliminate: String[], reduce: String[], raise: String[], create: String[] }
  leanCanvasScore Int
  designThinkingStage String
  innovationDilemmaFit String
  crossingChasmStage String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dailyIdeaId String @unique
  dailyIdea DailyIdea @relation(fields: [dailyIdeaId], references: [id])
}

model WhatToBuild {
  id                    String              @id @default(uuid())
  // A concise description of what the platform is, like "A Marketplace for Pet Food with a dashbaoard that has both seller and buyer portal (make sure its a bit more detailed than this)"
  platformDescription   String
  // High-level features to build, e.g., "User dashboards with order tracking", "Product listing and search", "Secure payment gateway integration"
  coreFeaturesSummary   String[]
  // Recommended user interfaces/dashboards, e.g., "Admin Dashboard", "User Profile Page", "Vendor Dashboard"
  userInterfaces        String[]
  // Recommended key third-party integrations, e.g., "Stripe for payments", "SendGrid for emails", "AWS S3 for file storage"
  keyIntegrations       String[]
  // Recommended pricing strategy directly tied to the build, e.g., "SaaS monthly subscription with Basic, Pro, and Enterprise tiers"
  pricingStrategyBuildRecommendation String
  dailyIdea             DailyIdea?          @relation(fields: [dailyIdeaId], references: [id])
  dailyIdeaId           String              @unique

  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model DailyIdea {
  id                 String       @id @default(uuid())
  title              String
  description        String
  executiveSummary   String
  problemSolution    String // Fixed typo
  problemStatement   String
  innovationLevel    Int // Fixed typo
  timeToMarket      Int
  confidenceScore   Int
  narrativeHook     String // SEO-friendly story angle
  targetKeywords    String[] // SEO keywords
  urgencyLevel      Int // 1-10 scale for market timing pressure
  executionComplexity Int // 1-10 scale for implementation difficulty
  tags              String[]
  // Relations
  ideaScoreId        String?      @unique
  ideaScore          IdeaScore?   @relation(fields: [ideaScoreId], references: [id])
  marketOpportunityId String?      @unique
  marketOpportunity MarketOpportunity? @relation(fields: [marketOpportunityId], references: [id])
  monetizationStrategyId String? @unique
  monetizationStrategy MonetizationStrategy? @relation(fields: [monetizationStrategyId], references: [id])
  whyNowId           String
  whyNow             WhyNow       @relation(fields: [whyNowId], references: [id])
  whatToBuildId String? @unique
  whatToBuild WhatToBuild?
  // New relations
  marketCompetition MarketCompetition?
  marketGap MarketGap?
  competitiveAdvantage CompetitiveAdvantage?
  strategicPositioning StrategicPositioning?
  executionPlan ExecutionPlan?
  tractionSignals TractionSignals?
  frameworkFit FrameworkFit?
  savedIdeas SavedIdeas[]
  claimedIdeas ClaimedIdeas?
  viewedIdeas ViewedIdeas[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model SavedIdeas {
  id String @id @default(uuid())
  userId String
  ideaId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  idea DailyIdea @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  
  @@unique([userId, ideaId])
}

model ClaimedIdeas {
  id String @id @default(uuid())
  userId String
  ideaId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  idea DailyIdea @relation(fields: [ideaId], references: [id], onDelete: Cascade)
}

model ViewedIdeas {
  id String @id @default(uuid())
  userId String
  ideaId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  idea DailyIdea @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  
  @@unique([userId, ideaId])
}

model UserGeneratedIdea {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt    String   // The user's original prompt

  // Core idea fields for quick access and display
  title             String
  description       String
  executiveSummary  String
  problemStatement  String
  narrativeHook     String
  tags              String[]
  confidenceScore   Int

  // Store the full, deeply nested idea object as JSON.
  // This avoids creating 10+ new tables for this feature.
  fullIdeaDataJson String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum IdeaGenerationStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

model IdeaGenerationRequest {
  id              String                @id @default(uuid())
  userId          String
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt          String                // The user's original prompt
  status          IdeaGenerationStatus  @default(PENDING)
  
  // Progress tracking
  currentStep     String?               // Current step being executed
  progressMessage String?               // User-friendly progress message
  imageState      String?               // Which image to show (confused, digging, happy, found)
  
  // Results
  generatedIdeaIds String[]             // Array of generated idea IDs when completed
  errorMessage     String?              // Error message if failed
  
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  
  @@index([userId])
  @@index([status])
} 