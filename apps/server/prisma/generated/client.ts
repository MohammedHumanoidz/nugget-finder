
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file should be your main import to use Prisma. Through it you get access to all the models, enums, and input types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import * as process from 'node:process'
import * as path from 'node:path'
import { fileURLToPath } from 'node:url'
const __dirname = path.dirname(fileURLToPath(import.meta.url))

import * as runtime from "@prisma/client/runtime/library"
import * as $Enums from "./enums"
import * as $Class from "./internal/class"
import * as Prisma from "./internal/prismaNamespace"

export * as $Enums from './enums'
/**
 * ## Prisma Client
 * 
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export const PrismaClient = $Class.getPrismaClientClass(__dirname)
export type PrismaClient<ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions, Log = $Class.LogOptions<ClientOptions>, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = $Class.PrismaClient<ClientOptions, Log, ExtArgs>
export { Prisma }


// file annotations for bundling tools to include these files
path.join(__dirname, "libquery_engine-rhel-openssl-3.0.x.so.node")
path.join(process.cwd(), "prisma/generated/libquery_engine-rhel-openssl-3.0.x.so.node")

/**
 * Model User
 * 
 */
export type User = Prisma.UserModel
/**
 * Model Session
 * 
 */
export type Session = Prisma.SessionModel
/**
 * Model Account
 * 
 */
export type Account = Prisma.AccountModel
/**
 * Model Verification
 * 
 */
export type Verification = Prisma.VerificationModel
/**
 * Model WhyNow
 * 
 */
export type WhyNow = Prisma.WhyNowModel
/**
 * Model IdeaScore
 * 
 */
export type IdeaScore = Prisma.IdeaScoreModel
/**
 * Model MarketOpportunity
 * 
 */
export type MarketOpportunity = Prisma.MarketOpportunityModel
/**
 * Model MarketValidationSignals
 * 
 */
export type MarketValidationSignals = Prisma.MarketValidationSignalsModel
/**
 * Model MarketCompetition
 * 
 */
export type MarketCompetition = Prisma.MarketCompetitionModel
/**
 * Model CustomerSegments
 * 
 */
export type CustomerSegments = Prisma.CustomerSegmentsModel
/**
 * Model MarketGap
 * 
 */
export type MarketGap = Prisma.MarketGapModel
/**
 * Model CompetitiveAdvantage
 * 
 */
export type CompetitiveAdvantage = Prisma.CompetitiveAdvantageModel
/**
 * Model StrategicPositioning
 * 
 */
export type StrategicPositioning = Prisma.StrategicPositioningModel
/**
 * Model MonetizationStrategy
 * 
 */
export type MonetizationStrategy = Prisma.MonetizationStrategyModel
/**
 * Model RevenueStream
 * 
 */
export type RevenueStream = Prisma.RevenueStreamModel
/**
 * Model KeyMetrics
 * 
 */
export type KeyMetrics = Prisma.KeyMetricsModel
/**
 * Model FinancialProjection
 * 
 */
export type FinancialProjection = Prisma.FinancialProjectionModel
/**
 * Model ExecutionPlan
 * 
 */
export type ExecutionPlan = Prisma.ExecutionPlanModel
/**
 * Model TractionSignals
 * 
 */
export type TractionSignals = Prisma.TractionSignalsModel
/**
 * Model FrameworkFit
 * 
 */
export type FrameworkFit = Prisma.FrameworkFitModel
/**
 * Model DailyIdea
 * 
 */
export type DailyIdea = Prisma.DailyIdeaModel

export type CatalystType = $Enums.CatalystType
export const CatalystType = $Enums.CatalystType

export type MarketMaturityLevel = $Enums.MarketMaturityLevel
export const MarketMaturityLevel = $Enums.MarketMaturityLevel

export type MarketConcentrationLevel = $Enums.MarketConcentrationLevel
export const MarketConcentrationLevel = $Enums.MarketConcentrationLevel

export type GrowthScale = $Enums.GrowthScale
export const GrowthScale = $Enums.GrowthScale
