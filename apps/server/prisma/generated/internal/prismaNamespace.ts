
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
export const prismaVersion: PrismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  WhyNow: 'WhyNow',
  IdeaScore: 'IdeaScore',
  MarketOpportunity: 'MarketOpportunity',
  MarketValidationSignals: 'MarketValidationSignals',
  MarketCompetition: 'MarketCompetition',
  CustomerSegments: 'CustomerSegments',
  MarketGap: 'MarketGap',
  CompetitiveAdvantage: 'CompetitiveAdvantage',
  StrategicPositioning: 'StrategicPositioning',
  MonetizationStrategy: 'MonetizationStrategy',
  RevenueStream: 'RevenueStream',
  KeyMetrics: 'KeyMetrics',
  FinancialProjection: 'FinancialProjection',
  ExecutionPlan: 'ExecutionPlan',
  TractionSignals: 'TractionSignals',
  FrameworkFit: 'FrameworkFit',
  DailyIdea: 'DailyIdea'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "user" | "session" | "account" | "verification" | "whyNow" | "ideaScore" | "marketOpportunity" | "marketValidationSignals" | "marketCompetition" | "customerSegments" | "marketGap" | "competitiveAdvantage" | "strategicPositioning" | "monetizationStrategy" | "revenueStream" | "keyMetrics" | "financialProjection" | "executionPlan" | "tractionSignals" | "frameworkFit" | "dailyIdea"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    Session: {
      payload: Prisma.$SessionPayload<ExtArgs>
      fields: Prisma.SessionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SessionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        findFirst: {
          args: Prisma.SessionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        findMany: {
          args: Prisma.SessionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[]
        }
        create: {
          args: Prisma.SessionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        createMany: {
          args: Prisma.SessionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[]
        }
        delete: {
          args: Prisma.SessionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        update: {
          args: Prisma.SessionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        deleteMany: {
          args: Prisma.SessionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SessionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[]
        }
        upsert: {
          args: Prisma.SessionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        aggregate: {
          args: Prisma.SessionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSession>
        }
        groupBy: {
          args: Prisma.SessionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SessionGroupByOutputType>[]
        }
        count: {
          args: Prisma.SessionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SessionCountAggregateOutputType> | number
        }
      }
    }
    Account: {
      payload: Prisma.$AccountPayload<ExtArgs>
      fields: Prisma.AccountFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AccountFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        findFirst: {
          args: Prisma.AccountFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        findMany: {
          args: Prisma.AccountFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[]
        }
        create: {
          args: Prisma.AccountCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        createMany: {
          args: Prisma.AccountCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[]
        }
        delete: {
          args: Prisma.AccountDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        update: {
          args: Prisma.AccountUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        deleteMany: {
          args: Prisma.AccountDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AccountUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[]
        }
        upsert: {
          args: Prisma.AccountUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        aggregate: {
          args: Prisma.AccountAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAccount>
        }
        groupBy: {
          args: Prisma.AccountGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountGroupByOutputType>[]
        }
        count: {
          args: Prisma.AccountCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountCountAggregateOutputType> | number
        }
      }
    }
    Verification: {
      payload: Prisma.$VerificationPayload<ExtArgs>
      fields: Prisma.VerificationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.VerificationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        findFirst: {
          args: Prisma.VerificationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        findMany: {
          args: Prisma.VerificationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>[]
        }
        create: {
          args: Prisma.VerificationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        createMany: {
          args: Prisma.VerificationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.VerificationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>[]
        }
        delete: {
          args: Prisma.VerificationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        update: {
          args: Prisma.VerificationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        deleteMany: {
          args: Prisma.VerificationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.VerificationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.VerificationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>[]
        }
        upsert: {
          args: Prisma.VerificationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        aggregate: {
          args: Prisma.VerificationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateVerification>
        }
        groupBy: {
          args: Prisma.VerificationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VerificationGroupByOutputType>[]
        }
        count: {
          args: Prisma.VerificationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VerificationCountAggregateOutputType> | number
        }
      }
    }
    WhyNow: {
      payload: Prisma.$WhyNowPayload<ExtArgs>
      fields: Prisma.WhyNowFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WhyNowFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WhyNowPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WhyNowFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WhyNowPayload>
        }
        findFirst: {
          args: Prisma.WhyNowFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WhyNowPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WhyNowFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WhyNowPayload>
        }
        findMany: {
          args: Prisma.WhyNowFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WhyNowPayload>[]
        }
        create: {
          args: Prisma.WhyNowCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WhyNowPayload>
        }
        createMany: {
          args: Prisma.WhyNowCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WhyNowCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WhyNowPayload>[]
        }
        delete: {
          args: Prisma.WhyNowDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WhyNowPayload>
        }
        update: {
          args: Prisma.WhyNowUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WhyNowPayload>
        }
        deleteMany: {
          args: Prisma.WhyNowDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WhyNowUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WhyNowUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WhyNowPayload>[]
        }
        upsert: {
          args: Prisma.WhyNowUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WhyNowPayload>
        }
        aggregate: {
          args: Prisma.WhyNowAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWhyNow>
        }
        groupBy: {
          args: Prisma.WhyNowGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WhyNowGroupByOutputType>[]
        }
        count: {
          args: Prisma.WhyNowCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WhyNowCountAggregateOutputType> | number
        }
      }
    }
    IdeaScore: {
      payload: Prisma.$IdeaScorePayload<ExtArgs>
      fields: Prisma.IdeaScoreFieldRefs
      operations: {
        findUnique: {
          args: Prisma.IdeaScoreFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IdeaScorePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.IdeaScoreFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IdeaScorePayload>
        }
        findFirst: {
          args: Prisma.IdeaScoreFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IdeaScorePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.IdeaScoreFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IdeaScorePayload>
        }
        findMany: {
          args: Prisma.IdeaScoreFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IdeaScorePayload>[]
        }
        create: {
          args: Prisma.IdeaScoreCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IdeaScorePayload>
        }
        createMany: {
          args: Prisma.IdeaScoreCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.IdeaScoreCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IdeaScorePayload>[]
        }
        delete: {
          args: Prisma.IdeaScoreDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IdeaScorePayload>
        }
        update: {
          args: Prisma.IdeaScoreUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IdeaScorePayload>
        }
        deleteMany: {
          args: Prisma.IdeaScoreDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.IdeaScoreUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.IdeaScoreUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IdeaScorePayload>[]
        }
        upsert: {
          args: Prisma.IdeaScoreUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IdeaScorePayload>
        }
        aggregate: {
          args: Prisma.IdeaScoreAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateIdeaScore>
        }
        groupBy: {
          args: Prisma.IdeaScoreGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.IdeaScoreGroupByOutputType>[]
        }
        count: {
          args: Prisma.IdeaScoreCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.IdeaScoreCountAggregateOutputType> | number
        }
      }
    }
    MarketOpportunity: {
      payload: Prisma.$MarketOpportunityPayload<ExtArgs>
      fields: Prisma.MarketOpportunityFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MarketOpportunityFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketOpportunityPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MarketOpportunityFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketOpportunityPayload>
        }
        findFirst: {
          args: Prisma.MarketOpportunityFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketOpportunityPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MarketOpportunityFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketOpportunityPayload>
        }
        findMany: {
          args: Prisma.MarketOpportunityFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketOpportunityPayload>[]
        }
        create: {
          args: Prisma.MarketOpportunityCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketOpportunityPayload>
        }
        createMany: {
          args: Prisma.MarketOpportunityCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MarketOpportunityCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketOpportunityPayload>[]
        }
        delete: {
          args: Prisma.MarketOpportunityDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketOpportunityPayload>
        }
        update: {
          args: Prisma.MarketOpportunityUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketOpportunityPayload>
        }
        deleteMany: {
          args: Prisma.MarketOpportunityDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MarketOpportunityUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MarketOpportunityUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketOpportunityPayload>[]
        }
        upsert: {
          args: Prisma.MarketOpportunityUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketOpportunityPayload>
        }
        aggregate: {
          args: Prisma.MarketOpportunityAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMarketOpportunity>
        }
        groupBy: {
          args: Prisma.MarketOpportunityGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MarketOpportunityGroupByOutputType>[]
        }
        count: {
          args: Prisma.MarketOpportunityCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MarketOpportunityCountAggregateOutputType> | number
        }
      }
    }
    MarketValidationSignals: {
      payload: Prisma.$MarketValidationSignalsPayload<ExtArgs>
      fields: Prisma.MarketValidationSignalsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MarketValidationSignalsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketValidationSignalsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MarketValidationSignalsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketValidationSignalsPayload>
        }
        findFirst: {
          args: Prisma.MarketValidationSignalsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketValidationSignalsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MarketValidationSignalsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketValidationSignalsPayload>
        }
        findMany: {
          args: Prisma.MarketValidationSignalsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketValidationSignalsPayload>[]
        }
        create: {
          args: Prisma.MarketValidationSignalsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketValidationSignalsPayload>
        }
        createMany: {
          args: Prisma.MarketValidationSignalsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MarketValidationSignalsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketValidationSignalsPayload>[]
        }
        delete: {
          args: Prisma.MarketValidationSignalsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketValidationSignalsPayload>
        }
        update: {
          args: Prisma.MarketValidationSignalsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketValidationSignalsPayload>
        }
        deleteMany: {
          args: Prisma.MarketValidationSignalsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MarketValidationSignalsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MarketValidationSignalsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketValidationSignalsPayload>[]
        }
        upsert: {
          args: Prisma.MarketValidationSignalsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketValidationSignalsPayload>
        }
        aggregate: {
          args: Prisma.MarketValidationSignalsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMarketValidationSignals>
        }
        groupBy: {
          args: Prisma.MarketValidationSignalsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MarketValidationSignalsGroupByOutputType>[]
        }
        count: {
          args: Prisma.MarketValidationSignalsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MarketValidationSignalsCountAggregateOutputType> | number
        }
      }
    }
    MarketCompetition: {
      payload: Prisma.$MarketCompetitionPayload<ExtArgs>
      fields: Prisma.MarketCompetitionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MarketCompetitionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketCompetitionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MarketCompetitionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketCompetitionPayload>
        }
        findFirst: {
          args: Prisma.MarketCompetitionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketCompetitionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MarketCompetitionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketCompetitionPayload>
        }
        findMany: {
          args: Prisma.MarketCompetitionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketCompetitionPayload>[]
        }
        create: {
          args: Prisma.MarketCompetitionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketCompetitionPayload>
        }
        createMany: {
          args: Prisma.MarketCompetitionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MarketCompetitionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketCompetitionPayload>[]
        }
        delete: {
          args: Prisma.MarketCompetitionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketCompetitionPayload>
        }
        update: {
          args: Prisma.MarketCompetitionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketCompetitionPayload>
        }
        deleteMany: {
          args: Prisma.MarketCompetitionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MarketCompetitionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MarketCompetitionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketCompetitionPayload>[]
        }
        upsert: {
          args: Prisma.MarketCompetitionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketCompetitionPayload>
        }
        aggregate: {
          args: Prisma.MarketCompetitionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMarketCompetition>
        }
        groupBy: {
          args: Prisma.MarketCompetitionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MarketCompetitionGroupByOutputType>[]
        }
        count: {
          args: Prisma.MarketCompetitionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MarketCompetitionCountAggregateOutputType> | number
        }
      }
    }
    CustomerSegments: {
      payload: Prisma.$CustomerSegmentsPayload<ExtArgs>
      fields: Prisma.CustomerSegmentsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CustomerSegmentsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CustomerSegmentsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CustomerSegmentsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CustomerSegmentsPayload>
        }
        findFirst: {
          args: Prisma.CustomerSegmentsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CustomerSegmentsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CustomerSegmentsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CustomerSegmentsPayload>
        }
        findMany: {
          args: Prisma.CustomerSegmentsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CustomerSegmentsPayload>[]
        }
        create: {
          args: Prisma.CustomerSegmentsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CustomerSegmentsPayload>
        }
        createMany: {
          args: Prisma.CustomerSegmentsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CustomerSegmentsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CustomerSegmentsPayload>[]
        }
        delete: {
          args: Prisma.CustomerSegmentsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CustomerSegmentsPayload>
        }
        update: {
          args: Prisma.CustomerSegmentsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CustomerSegmentsPayload>
        }
        deleteMany: {
          args: Prisma.CustomerSegmentsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CustomerSegmentsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CustomerSegmentsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CustomerSegmentsPayload>[]
        }
        upsert: {
          args: Prisma.CustomerSegmentsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CustomerSegmentsPayload>
        }
        aggregate: {
          args: Prisma.CustomerSegmentsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCustomerSegments>
        }
        groupBy: {
          args: Prisma.CustomerSegmentsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CustomerSegmentsGroupByOutputType>[]
        }
        count: {
          args: Prisma.CustomerSegmentsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CustomerSegmentsCountAggregateOutputType> | number
        }
      }
    }
    MarketGap: {
      payload: Prisma.$MarketGapPayload<ExtArgs>
      fields: Prisma.MarketGapFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MarketGapFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketGapPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MarketGapFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketGapPayload>
        }
        findFirst: {
          args: Prisma.MarketGapFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketGapPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MarketGapFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketGapPayload>
        }
        findMany: {
          args: Prisma.MarketGapFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketGapPayload>[]
        }
        create: {
          args: Prisma.MarketGapCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketGapPayload>
        }
        createMany: {
          args: Prisma.MarketGapCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MarketGapCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketGapPayload>[]
        }
        delete: {
          args: Prisma.MarketGapDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketGapPayload>
        }
        update: {
          args: Prisma.MarketGapUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketGapPayload>
        }
        deleteMany: {
          args: Prisma.MarketGapDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MarketGapUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MarketGapUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketGapPayload>[]
        }
        upsert: {
          args: Prisma.MarketGapUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarketGapPayload>
        }
        aggregate: {
          args: Prisma.MarketGapAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMarketGap>
        }
        groupBy: {
          args: Prisma.MarketGapGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MarketGapGroupByOutputType>[]
        }
        count: {
          args: Prisma.MarketGapCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MarketGapCountAggregateOutputType> | number
        }
      }
    }
    CompetitiveAdvantage: {
      payload: Prisma.$CompetitiveAdvantagePayload<ExtArgs>
      fields: Prisma.CompetitiveAdvantageFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CompetitiveAdvantageFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompetitiveAdvantagePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CompetitiveAdvantageFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompetitiveAdvantagePayload>
        }
        findFirst: {
          args: Prisma.CompetitiveAdvantageFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompetitiveAdvantagePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CompetitiveAdvantageFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompetitiveAdvantagePayload>
        }
        findMany: {
          args: Prisma.CompetitiveAdvantageFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompetitiveAdvantagePayload>[]
        }
        create: {
          args: Prisma.CompetitiveAdvantageCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompetitiveAdvantagePayload>
        }
        createMany: {
          args: Prisma.CompetitiveAdvantageCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CompetitiveAdvantageCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompetitiveAdvantagePayload>[]
        }
        delete: {
          args: Prisma.CompetitiveAdvantageDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompetitiveAdvantagePayload>
        }
        update: {
          args: Prisma.CompetitiveAdvantageUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompetitiveAdvantagePayload>
        }
        deleteMany: {
          args: Prisma.CompetitiveAdvantageDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CompetitiveAdvantageUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CompetitiveAdvantageUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompetitiveAdvantagePayload>[]
        }
        upsert: {
          args: Prisma.CompetitiveAdvantageUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompetitiveAdvantagePayload>
        }
        aggregate: {
          args: Prisma.CompetitiveAdvantageAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCompetitiveAdvantage>
        }
        groupBy: {
          args: Prisma.CompetitiveAdvantageGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CompetitiveAdvantageGroupByOutputType>[]
        }
        count: {
          args: Prisma.CompetitiveAdvantageCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CompetitiveAdvantageCountAggregateOutputType> | number
        }
      }
    }
    StrategicPositioning: {
      payload: Prisma.$StrategicPositioningPayload<ExtArgs>
      fields: Prisma.StrategicPositioningFieldRefs
      operations: {
        findUnique: {
          args: Prisma.StrategicPositioningFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StrategicPositioningPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.StrategicPositioningFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StrategicPositioningPayload>
        }
        findFirst: {
          args: Prisma.StrategicPositioningFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StrategicPositioningPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.StrategicPositioningFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StrategicPositioningPayload>
        }
        findMany: {
          args: Prisma.StrategicPositioningFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StrategicPositioningPayload>[]
        }
        create: {
          args: Prisma.StrategicPositioningCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StrategicPositioningPayload>
        }
        createMany: {
          args: Prisma.StrategicPositioningCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.StrategicPositioningCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StrategicPositioningPayload>[]
        }
        delete: {
          args: Prisma.StrategicPositioningDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StrategicPositioningPayload>
        }
        update: {
          args: Prisma.StrategicPositioningUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StrategicPositioningPayload>
        }
        deleteMany: {
          args: Prisma.StrategicPositioningDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.StrategicPositioningUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.StrategicPositioningUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StrategicPositioningPayload>[]
        }
        upsert: {
          args: Prisma.StrategicPositioningUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StrategicPositioningPayload>
        }
        aggregate: {
          args: Prisma.StrategicPositioningAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateStrategicPositioning>
        }
        groupBy: {
          args: Prisma.StrategicPositioningGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StrategicPositioningGroupByOutputType>[]
        }
        count: {
          args: Prisma.StrategicPositioningCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StrategicPositioningCountAggregateOutputType> | number
        }
      }
    }
    MonetizationStrategy: {
      payload: Prisma.$MonetizationStrategyPayload<ExtArgs>
      fields: Prisma.MonetizationStrategyFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MonetizationStrategyFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MonetizationStrategyPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MonetizationStrategyFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MonetizationStrategyPayload>
        }
        findFirst: {
          args: Prisma.MonetizationStrategyFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MonetizationStrategyPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MonetizationStrategyFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MonetizationStrategyPayload>
        }
        findMany: {
          args: Prisma.MonetizationStrategyFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MonetizationStrategyPayload>[]
        }
        create: {
          args: Prisma.MonetizationStrategyCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MonetizationStrategyPayload>
        }
        createMany: {
          args: Prisma.MonetizationStrategyCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MonetizationStrategyCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MonetizationStrategyPayload>[]
        }
        delete: {
          args: Prisma.MonetizationStrategyDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MonetizationStrategyPayload>
        }
        update: {
          args: Prisma.MonetizationStrategyUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MonetizationStrategyPayload>
        }
        deleteMany: {
          args: Prisma.MonetizationStrategyDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MonetizationStrategyUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MonetizationStrategyUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MonetizationStrategyPayload>[]
        }
        upsert: {
          args: Prisma.MonetizationStrategyUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MonetizationStrategyPayload>
        }
        aggregate: {
          args: Prisma.MonetizationStrategyAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMonetizationStrategy>
        }
        groupBy: {
          args: Prisma.MonetizationStrategyGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MonetizationStrategyGroupByOutputType>[]
        }
        count: {
          args: Prisma.MonetizationStrategyCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MonetizationStrategyCountAggregateOutputType> | number
        }
      }
    }
    RevenueStream: {
      payload: Prisma.$RevenueStreamPayload<ExtArgs>
      fields: Prisma.RevenueStreamFieldRefs
      operations: {
        findUnique: {
          args: Prisma.RevenueStreamFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RevenueStreamPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.RevenueStreamFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RevenueStreamPayload>
        }
        findFirst: {
          args: Prisma.RevenueStreamFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RevenueStreamPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.RevenueStreamFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RevenueStreamPayload>
        }
        findMany: {
          args: Prisma.RevenueStreamFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RevenueStreamPayload>[]
        }
        create: {
          args: Prisma.RevenueStreamCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RevenueStreamPayload>
        }
        createMany: {
          args: Prisma.RevenueStreamCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.RevenueStreamCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RevenueStreamPayload>[]
        }
        delete: {
          args: Prisma.RevenueStreamDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RevenueStreamPayload>
        }
        update: {
          args: Prisma.RevenueStreamUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RevenueStreamPayload>
        }
        deleteMany: {
          args: Prisma.RevenueStreamDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.RevenueStreamUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.RevenueStreamUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RevenueStreamPayload>[]
        }
        upsert: {
          args: Prisma.RevenueStreamUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RevenueStreamPayload>
        }
        aggregate: {
          args: Prisma.RevenueStreamAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateRevenueStream>
        }
        groupBy: {
          args: Prisma.RevenueStreamGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RevenueStreamGroupByOutputType>[]
        }
        count: {
          args: Prisma.RevenueStreamCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RevenueStreamCountAggregateOutputType> | number
        }
      }
    }
    KeyMetrics: {
      payload: Prisma.$KeyMetricsPayload<ExtArgs>
      fields: Prisma.KeyMetricsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.KeyMetricsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KeyMetricsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.KeyMetricsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KeyMetricsPayload>
        }
        findFirst: {
          args: Prisma.KeyMetricsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KeyMetricsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.KeyMetricsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KeyMetricsPayload>
        }
        findMany: {
          args: Prisma.KeyMetricsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KeyMetricsPayload>[]
        }
        create: {
          args: Prisma.KeyMetricsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KeyMetricsPayload>
        }
        createMany: {
          args: Prisma.KeyMetricsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.KeyMetricsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KeyMetricsPayload>[]
        }
        delete: {
          args: Prisma.KeyMetricsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KeyMetricsPayload>
        }
        update: {
          args: Prisma.KeyMetricsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KeyMetricsPayload>
        }
        deleteMany: {
          args: Prisma.KeyMetricsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.KeyMetricsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.KeyMetricsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KeyMetricsPayload>[]
        }
        upsert: {
          args: Prisma.KeyMetricsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KeyMetricsPayload>
        }
        aggregate: {
          args: Prisma.KeyMetricsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateKeyMetrics>
        }
        groupBy: {
          args: Prisma.KeyMetricsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.KeyMetricsGroupByOutputType>[]
        }
        count: {
          args: Prisma.KeyMetricsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.KeyMetricsCountAggregateOutputType> | number
        }
      }
    }
    FinancialProjection: {
      payload: Prisma.$FinancialProjectionPayload<ExtArgs>
      fields: Prisma.FinancialProjectionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FinancialProjectionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FinancialProjectionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FinancialProjectionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FinancialProjectionPayload>
        }
        findFirst: {
          args: Prisma.FinancialProjectionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FinancialProjectionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FinancialProjectionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FinancialProjectionPayload>
        }
        findMany: {
          args: Prisma.FinancialProjectionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FinancialProjectionPayload>[]
        }
        create: {
          args: Prisma.FinancialProjectionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FinancialProjectionPayload>
        }
        createMany: {
          args: Prisma.FinancialProjectionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FinancialProjectionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FinancialProjectionPayload>[]
        }
        delete: {
          args: Prisma.FinancialProjectionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FinancialProjectionPayload>
        }
        update: {
          args: Prisma.FinancialProjectionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FinancialProjectionPayload>
        }
        deleteMany: {
          args: Prisma.FinancialProjectionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FinancialProjectionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FinancialProjectionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FinancialProjectionPayload>[]
        }
        upsert: {
          args: Prisma.FinancialProjectionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FinancialProjectionPayload>
        }
        aggregate: {
          args: Prisma.FinancialProjectionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFinancialProjection>
        }
        groupBy: {
          args: Prisma.FinancialProjectionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FinancialProjectionGroupByOutputType>[]
        }
        count: {
          args: Prisma.FinancialProjectionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FinancialProjectionCountAggregateOutputType> | number
        }
      }
    }
    ExecutionPlan: {
      payload: Prisma.$ExecutionPlanPayload<ExtArgs>
      fields: Prisma.ExecutionPlanFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ExecutionPlanFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExecutionPlanPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ExecutionPlanFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExecutionPlanPayload>
        }
        findFirst: {
          args: Prisma.ExecutionPlanFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExecutionPlanPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ExecutionPlanFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExecutionPlanPayload>
        }
        findMany: {
          args: Prisma.ExecutionPlanFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExecutionPlanPayload>[]
        }
        create: {
          args: Prisma.ExecutionPlanCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExecutionPlanPayload>
        }
        createMany: {
          args: Prisma.ExecutionPlanCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ExecutionPlanCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExecutionPlanPayload>[]
        }
        delete: {
          args: Prisma.ExecutionPlanDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExecutionPlanPayload>
        }
        update: {
          args: Prisma.ExecutionPlanUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExecutionPlanPayload>
        }
        deleteMany: {
          args: Prisma.ExecutionPlanDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ExecutionPlanUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ExecutionPlanUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExecutionPlanPayload>[]
        }
        upsert: {
          args: Prisma.ExecutionPlanUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ExecutionPlanPayload>
        }
        aggregate: {
          args: Prisma.ExecutionPlanAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateExecutionPlan>
        }
        groupBy: {
          args: Prisma.ExecutionPlanGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ExecutionPlanGroupByOutputType>[]
        }
        count: {
          args: Prisma.ExecutionPlanCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ExecutionPlanCountAggregateOutputType> | number
        }
      }
    }
    TractionSignals: {
      payload: Prisma.$TractionSignalsPayload<ExtArgs>
      fields: Prisma.TractionSignalsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TractionSignalsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TractionSignalsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TractionSignalsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TractionSignalsPayload>
        }
        findFirst: {
          args: Prisma.TractionSignalsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TractionSignalsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TractionSignalsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TractionSignalsPayload>
        }
        findMany: {
          args: Prisma.TractionSignalsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TractionSignalsPayload>[]
        }
        create: {
          args: Prisma.TractionSignalsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TractionSignalsPayload>
        }
        createMany: {
          args: Prisma.TractionSignalsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TractionSignalsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TractionSignalsPayload>[]
        }
        delete: {
          args: Prisma.TractionSignalsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TractionSignalsPayload>
        }
        update: {
          args: Prisma.TractionSignalsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TractionSignalsPayload>
        }
        deleteMany: {
          args: Prisma.TractionSignalsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TractionSignalsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TractionSignalsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TractionSignalsPayload>[]
        }
        upsert: {
          args: Prisma.TractionSignalsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TractionSignalsPayload>
        }
        aggregate: {
          args: Prisma.TractionSignalsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTractionSignals>
        }
        groupBy: {
          args: Prisma.TractionSignalsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TractionSignalsGroupByOutputType>[]
        }
        count: {
          args: Prisma.TractionSignalsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TractionSignalsCountAggregateOutputType> | number
        }
      }
    }
    FrameworkFit: {
      payload: Prisma.$FrameworkFitPayload<ExtArgs>
      fields: Prisma.FrameworkFitFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FrameworkFitFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FrameworkFitPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FrameworkFitFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FrameworkFitPayload>
        }
        findFirst: {
          args: Prisma.FrameworkFitFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FrameworkFitPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FrameworkFitFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FrameworkFitPayload>
        }
        findMany: {
          args: Prisma.FrameworkFitFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FrameworkFitPayload>[]
        }
        create: {
          args: Prisma.FrameworkFitCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FrameworkFitPayload>
        }
        createMany: {
          args: Prisma.FrameworkFitCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FrameworkFitCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FrameworkFitPayload>[]
        }
        delete: {
          args: Prisma.FrameworkFitDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FrameworkFitPayload>
        }
        update: {
          args: Prisma.FrameworkFitUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FrameworkFitPayload>
        }
        deleteMany: {
          args: Prisma.FrameworkFitDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FrameworkFitUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FrameworkFitUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FrameworkFitPayload>[]
        }
        upsert: {
          args: Prisma.FrameworkFitUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FrameworkFitPayload>
        }
        aggregate: {
          args: Prisma.FrameworkFitAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFrameworkFit>
        }
        groupBy: {
          args: Prisma.FrameworkFitGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FrameworkFitGroupByOutputType>[]
        }
        count: {
          args: Prisma.FrameworkFitCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FrameworkFitCountAggregateOutputType> | number
        }
      }
    }
    DailyIdea: {
      payload: Prisma.$DailyIdeaPayload<ExtArgs>
      fields: Prisma.DailyIdeaFieldRefs
      operations: {
        findUnique: {
          args: Prisma.DailyIdeaFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DailyIdeaPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.DailyIdeaFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DailyIdeaPayload>
        }
        findFirst: {
          args: Prisma.DailyIdeaFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DailyIdeaPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.DailyIdeaFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DailyIdeaPayload>
        }
        findMany: {
          args: Prisma.DailyIdeaFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DailyIdeaPayload>[]
        }
        create: {
          args: Prisma.DailyIdeaCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DailyIdeaPayload>
        }
        createMany: {
          args: Prisma.DailyIdeaCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.DailyIdeaCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DailyIdeaPayload>[]
        }
        delete: {
          args: Prisma.DailyIdeaDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DailyIdeaPayload>
        }
        update: {
          args: Prisma.DailyIdeaUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DailyIdeaPayload>
        }
        deleteMany: {
          args: Prisma.DailyIdeaDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.DailyIdeaUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.DailyIdeaUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DailyIdeaPayload>[]
        }
        upsert: {
          args: Prisma.DailyIdeaUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DailyIdeaPayload>
        }
        aggregate: {
          args: Prisma.DailyIdeaAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDailyIdea>
        }
        groupBy: {
          args: Prisma.DailyIdeaGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DailyIdeaGroupByOutputType>[]
        }
        count: {
          args: Prisma.DailyIdeaCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DailyIdeaCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
} as const

export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


export const AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


export const VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


export const WhyNowScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  trendStrength: 'trendStrength',
  catalystType: 'catalystType',
  timingUrgency: 'timingUrgency',
  supportingData: 'supportingData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type WhyNowScalarFieldEnum = (typeof WhyNowScalarFieldEnum)[keyof typeof WhyNowScalarFieldEnum]


export const IdeaScoreScalarFieldEnum = {
  id: 'id',
  totalScore: 'totalScore',
  problemSeverity: 'problemSeverity',
  founderMarketFit: 'founderMarketFit',
  technicalFeasibility: 'technicalFeasibility',
  monetizationPotential: 'monetizationPotential',
  urgencyScore: 'urgencyScore',
  marketTimingScore: 'marketTimingScore',
  executionDifficulty: 'executionDifficulty',
  moatStrength: 'moatStrength',
  regulatoryRisk: 'regulatoryRisk',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type IdeaScoreScalarFieldEnum = (typeof IdeaScoreScalarFieldEnum)[keyof typeof IdeaScoreScalarFieldEnum]


export const MarketOpportunityScalarFieldEnum = {
  id: 'id',
  marketOpportunityScore: 'marketOpportunityScore',
  ValidationStrength: 'ValidationStrength',
  totalMarketSize: 'totalMarketSize',
  reachableMarketSize: 'reachableMarketSize',
  realisticMarketSize: 'realisticMarketSize',
  growthRate: 'growthRate',
  adoptionRate: 'adoptionRate',
  marketMaturityLevel: 'marketMaturityLevel',
  marketAnalysisSummary: 'marketAnalysisSummary',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type MarketOpportunityScalarFieldEnum = (typeof MarketOpportunityScalarFieldEnum)[keyof typeof MarketOpportunityScalarFieldEnum]


export const MarketValidationSignalsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  marketOpportunityId: 'marketOpportunityId'
} as const

export type MarketValidationSignalsScalarFieldEnum = (typeof MarketValidationSignalsScalarFieldEnum)[keyof typeof MarketValidationSignalsScalarFieldEnum]


export const MarketCompetitionScalarFieldEnum = {
  id: 'id',
  marketConcentrationLevel: 'marketConcentrationLevel',
  marketConcentrationJustification: 'marketConcentrationJustification',
  directCompetitors: 'directCompetitors',
  indirectCompetitors: 'indirectCompetitors',
  competitorFailurePoints: 'competitorFailurePoints',
  unfairAdvantage: 'unfairAdvantage',
  moat: 'moat',
  competitivePositioningScore: 'competitivePositioningScore',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dailyIdeaId: 'dailyIdeaId'
} as const

export type MarketCompetitionScalarFieldEnum = (typeof MarketCompetitionScalarFieldEnum)[keyof typeof MarketCompetitionScalarFieldEnum]


export const CustomerSegmentsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  growthScale: 'growthScale',
  growthScaleJustification: 'growthScaleJustification',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  marketOpportunityId: 'marketOpportunityId'
} as const

export type CustomerSegmentsScalarFieldEnum = (typeof CustomerSegmentsScalarFieldEnum)[keyof typeof CustomerSegmentsScalarFieldEnum]


export const MarketGapScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  impact: 'impact',
  target: 'target',
  opportunity: 'opportunity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dailyIdeaId: 'dailyIdeaId'
} as const

export type MarketGapScalarFieldEnum = (typeof MarketGapScalarFieldEnum)[keyof typeof MarketGapScalarFieldEnum]


export const CompetitiveAdvantageScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  sustainability: 'sustainability',
  impact: 'impact',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dailyIdeaId: 'dailyIdeaId'
} as const

export type CompetitiveAdvantageScalarFieldEnum = (typeof CompetitiveAdvantageScalarFieldEnum)[keyof typeof CompetitiveAdvantageScalarFieldEnum]


export const StrategicPositioningScalarFieldEnum = {
  id: 'id',
  name: 'name',
  targetSegment: 'targetSegment',
  valueProposition: 'valueProposition',
  keyDifferentiators: 'keyDifferentiators',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dailyIdeaId: 'dailyIdeaId'
} as const

export type StrategicPositioningScalarFieldEnum = (typeof StrategicPositioningScalarFieldEnum)[keyof typeof StrategicPositioningScalarFieldEnum]


export const MonetizationStrategyScalarFieldEnum = {
  id: 'id',
  primaryModel: 'primaryModel',
  pricingStrategy: 'pricingStrategy',
  businessScore: 'businessScore',
  confidence: 'confidence',
  revenueModelValidation: 'revenueModelValidation',
  pricingSensitivity: 'pricingSensitivity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type MonetizationStrategyScalarFieldEnum = (typeof MonetizationStrategyScalarFieldEnum)[keyof typeof MonetizationStrategyScalarFieldEnum]


export const RevenueStreamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  percentage: 'percentage',
  monetizationStrategyId: 'monetizationStrategyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type RevenueStreamScalarFieldEnum = (typeof RevenueStreamScalarFieldEnum)[keyof typeof RevenueStreamScalarFieldEnum]


export const KeyMetricsScalarFieldEnum = {
  id: 'id',
  ltv: 'ltv',
  ltvDescription: 'ltvDescription',
  cac: 'cac',
  cacDescription: 'cacDescription',
  ltvCacRatio: 'ltvCacRatio',
  ltvCacRatioDescription: 'ltvCacRatioDescription',
  paybackPeriod: 'paybackPeriod',
  paybackPeriodDescription: 'paybackPeriodDescription',
  runway: 'runway',
  runwayDescription: 'runwayDescription',
  breakEvenPoint: 'breakEvenPoint',
  breakEvenPointDescription: 'breakEvenPointDescription',
  monetizationStrategyId: 'monetizationStrategyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type KeyMetricsScalarFieldEnum = (typeof KeyMetricsScalarFieldEnum)[keyof typeof KeyMetricsScalarFieldEnum]


export const FinancialProjectionScalarFieldEnum = {
  id: 'id',
  year: 'year',
  revenue: 'revenue',
  costs: 'costs',
  netMargin: 'netMargin',
  revenueGrowth: 'revenueGrowth',
  monetizationStrategyId: 'monetizationStrategyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type FinancialProjectionScalarFieldEnum = (typeof FinancialProjectionScalarFieldEnum)[keyof typeof FinancialProjectionScalarFieldEnum]


export const ExecutionPlanScalarFieldEnum = {
  id: 'id',
  mvpDescription: 'mvpDescription',
  keyMilestones: 'keyMilestones',
  resourceRequirements: 'resourceRequirements',
  teamRequirements: 'teamRequirements',
  riskFactors: 'riskFactors',
  technicalRoadmap: 'technicalRoadmap',
  goToMarketStrategy: 'goToMarketStrategy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dailyIdeaId: 'dailyIdeaId'
} as const

export type ExecutionPlanScalarFieldEnum = (typeof ExecutionPlanScalarFieldEnum)[keyof typeof ExecutionPlanScalarFieldEnum]


export const TractionSignalsScalarFieldEnum = {
  id: 'id',
  waitlistCount: 'waitlistCount',
  socialMentions: 'socialMentions',
  searchVolume: 'searchVolume',
  competitorFunding: 'competitorFunding',
  patentActivity: 'patentActivity',
  regulatoryChanges: 'regulatoryChanges',
  mediaAttention: 'mediaAttention',
  expertEndorsements: 'expertEndorsements',
  earlyAdopterSignals: 'earlyAdopterSignals',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dailyIdeaId: 'dailyIdeaId'
} as const

export type TractionSignalsScalarFieldEnum = (typeof TractionSignalsScalarFieldEnum)[keyof typeof TractionSignalsScalarFieldEnum]


export const FrameworkFitScalarFieldEnum = {
  id: 'id',
  jobsToBeDone: 'jobsToBeDone',
  blueOceanFactors: 'blueOceanFactors',
  leanCanvasScore: 'leanCanvasScore',
  designThinkingStage: 'designThinkingStage',
  innovationDilemmaFit: 'innovationDilemmaFit',
  crossingChasmStage: 'crossingChasmStage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dailyIdeaId: 'dailyIdeaId'
} as const

export type FrameworkFitScalarFieldEnum = (typeof FrameworkFitScalarFieldEnum)[keyof typeof FrameworkFitScalarFieldEnum]


export const DailyIdeaScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  executiveSummary: 'executiveSummary',
  problemSolution: 'problemSolution',
  problemStatement: 'problemStatement',
  innovationLevel: 'innovationLevel',
  timeToMarket: 'timeToMarket',
  confidenceScore: 'confidenceScore',
  narrativeHook: 'narrativeHook',
  targetKeywords: 'targetKeywords',
  urgencyLevel: 'urgencyLevel',
  executionComplexity: 'executionComplexity',
  tags: 'tags',
  ideaScoreId: 'ideaScoreId',
  marketOpportunityId: 'marketOpportunityId',
  monetizationStrategyId: 'monetizationStrategyId',
  whyNowId: 'whyNowId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type DailyIdeaScalarFieldEnum = (typeof DailyIdeaScalarFieldEnum)[keyof typeof DailyIdeaScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const JsonNullValueInput = {
  JsonNull: JsonNull
} as const

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'CatalystType'
 */
export type EnumCatalystTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CatalystType'>
    


/**
 * Reference to a field of type 'CatalystType[]'
 */
export type ListEnumCatalystTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CatalystType[]'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'MarketMaturityLevel'
 */
export type EnumMarketMaturityLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MarketMaturityLevel'>
    


/**
 * Reference to a field of type 'MarketMaturityLevel[]'
 */
export type ListEnumMarketMaturityLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MarketMaturityLevel[]'>
    


/**
 * Reference to a field of type 'MarketConcentrationLevel'
 */
export type EnumMarketConcentrationLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MarketConcentrationLevel'>
    


/**
 * Reference to a field of type 'MarketConcentrationLevel[]'
 */
export type ListEnumMarketConcentrationLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MarketConcentrationLevel[]'>
    


/**
 * Reference to a field of type 'GrowthScale'
 */
export type EnumGrowthScaleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GrowthScale'>
    


/**
 * Reference to a field of type 'GrowthScale[]'
 */
export type ListEnumGrowthScaleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GrowthScale[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  user?: Prisma.UserOmit
  session?: Prisma.SessionOmit
  account?: Prisma.AccountOmit
  verification?: Prisma.VerificationOmit
  whyNow?: Prisma.WhyNowOmit
  ideaScore?: Prisma.IdeaScoreOmit
  marketOpportunity?: Prisma.MarketOpportunityOmit
  marketValidationSignals?: Prisma.MarketValidationSignalsOmit
  marketCompetition?: Prisma.MarketCompetitionOmit
  customerSegments?: Prisma.CustomerSegmentsOmit
  marketGap?: Prisma.MarketGapOmit
  competitiveAdvantage?: Prisma.CompetitiveAdvantageOmit
  strategicPositioning?: Prisma.StrategicPositioningOmit
  monetizationStrategy?: Prisma.MonetizationStrategyOmit
  revenueStream?: Prisma.RevenueStreamOmit
  keyMetrics?: Prisma.KeyMetricsOmit
  financialProjection?: Prisma.FinancialProjectionOmit
  executionPlan?: Prisma.ExecutionPlanOmit
  tractionSignals?: Prisma.TractionSignalsOmit
  frameworkFit?: Prisma.FrameworkFitOmit
  dailyIdea?: Prisma.DailyIdeaOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

