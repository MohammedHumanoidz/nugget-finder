
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `KeyMetrics` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model KeyMetrics
 * 
 */
export type KeyMetricsModel = runtime.Types.Result.DefaultSelection<Prisma.$KeyMetricsPayload>

export type AggregateKeyMetrics = {
  _count: KeyMetricsCountAggregateOutputType | null
  _avg: KeyMetricsAvgAggregateOutputType | null
  _sum: KeyMetricsSumAggregateOutputType | null
  _min: KeyMetricsMinAggregateOutputType | null
  _max: KeyMetricsMaxAggregateOutputType | null
}

export type KeyMetricsAvgAggregateOutputType = {
  ltv: number | null
  cac: number | null
  ltvCacRatio: number | null
  paybackPeriod: number | null
  runway: number | null
}

export type KeyMetricsSumAggregateOutputType = {
  ltv: number | null
  cac: number | null
  ltvCacRatio: number | null
  paybackPeriod: number | null
  runway: number | null
}

export type KeyMetricsMinAggregateOutputType = {
  id: string | null
  ltv: number | null
  ltvDescription: string | null
  cac: number | null
  cacDescription: string | null
  ltvCacRatio: number | null
  ltvCacRatioDescription: string | null
  paybackPeriod: number | null
  paybackPeriodDescription: string | null
  runway: number | null
  runwayDescription: string | null
  breakEvenPoint: string | null
  breakEvenPointDescription: string | null
  monetizationStrategyId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type KeyMetricsMaxAggregateOutputType = {
  id: string | null
  ltv: number | null
  ltvDescription: string | null
  cac: number | null
  cacDescription: string | null
  ltvCacRatio: number | null
  ltvCacRatioDescription: string | null
  paybackPeriod: number | null
  paybackPeriodDescription: string | null
  runway: number | null
  runwayDescription: string | null
  breakEvenPoint: string | null
  breakEvenPointDescription: string | null
  monetizationStrategyId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type KeyMetricsCountAggregateOutputType = {
  id: number
  ltv: number
  ltvDescription: number
  cac: number
  cacDescription: number
  ltvCacRatio: number
  ltvCacRatioDescription: number
  paybackPeriod: number
  paybackPeriodDescription: number
  runway: number
  runwayDescription: number
  breakEvenPoint: number
  breakEvenPointDescription: number
  monetizationStrategyId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type KeyMetricsAvgAggregateInputType = {
  ltv?: true
  cac?: true
  ltvCacRatio?: true
  paybackPeriod?: true
  runway?: true
}

export type KeyMetricsSumAggregateInputType = {
  ltv?: true
  cac?: true
  ltvCacRatio?: true
  paybackPeriod?: true
  runway?: true
}

export type KeyMetricsMinAggregateInputType = {
  id?: true
  ltv?: true
  ltvDescription?: true
  cac?: true
  cacDescription?: true
  ltvCacRatio?: true
  ltvCacRatioDescription?: true
  paybackPeriod?: true
  paybackPeriodDescription?: true
  runway?: true
  runwayDescription?: true
  breakEvenPoint?: true
  breakEvenPointDescription?: true
  monetizationStrategyId?: true
  createdAt?: true
  updatedAt?: true
}

export type KeyMetricsMaxAggregateInputType = {
  id?: true
  ltv?: true
  ltvDescription?: true
  cac?: true
  cacDescription?: true
  ltvCacRatio?: true
  ltvCacRatioDescription?: true
  paybackPeriod?: true
  paybackPeriodDescription?: true
  runway?: true
  runwayDescription?: true
  breakEvenPoint?: true
  breakEvenPointDescription?: true
  monetizationStrategyId?: true
  createdAt?: true
  updatedAt?: true
}

export type KeyMetricsCountAggregateInputType = {
  id?: true
  ltv?: true
  ltvDescription?: true
  cac?: true
  cacDescription?: true
  ltvCacRatio?: true
  ltvCacRatioDescription?: true
  paybackPeriod?: true
  paybackPeriodDescription?: true
  runway?: true
  runwayDescription?: true
  breakEvenPoint?: true
  breakEvenPointDescription?: true
  monetizationStrategyId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type KeyMetricsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which KeyMetrics to aggregate.
   */
  where?: Prisma.KeyMetricsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of KeyMetrics to fetch.
   */
  orderBy?: Prisma.KeyMetricsOrderByWithRelationInput | Prisma.KeyMetricsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.KeyMetricsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` KeyMetrics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` KeyMetrics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned KeyMetrics
  **/
  _count?: true | KeyMetricsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: KeyMetricsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: KeyMetricsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: KeyMetricsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: KeyMetricsMaxAggregateInputType
}

export type GetKeyMetricsAggregateType<T extends KeyMetricsAggregateArgs> = {
      [P in keyof T & keyof AggregateKeyMetrics]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateKeyMetrics[P]>
    : Prisma.GetScalarType<T[P], AggregateKeyMetrics[P]>
}




export type KeyMetricsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.KeyMetricsWhereInput
  orderBy?: Prisma.KeyMetricsOrderByWithAggregationInput | Prisma.KeyMetricsOrderByWithAggregationInput[]
  by: Prisma.KeyMetricsScalarFieldEnum[] | Prisma.KeyMetricsScalarFieldEnum
  having?: Prisma.KeyMetricsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: KeyMetricsCountAggregateInputType | true
  _avg?: KeyMetricsAvgAggregateInputType
  _sum?: KeyMetricsSumAggregateInputType
  _min?: KeyMetricsMinAggregateInputType
  _max?: KeyMetricsMaxAggregateInputType
}

export type KeyMetricsGroupByOutputType = {
  id: string
  ltv: number
  ltvDescription: string
  cac: number
  cacDescription: string
  ltvCacRatio: number
  ltvCacRatioDescription: string
  paybackPeriod: number
  paybackPeriodDescription: string
  runway: number
  runwayDescription: string
  breakEvenPoint: string
  breakEvenPointDescription: string
  monetizationStrategyId: string | null
  createdAt: Date
  updatedAt: Date
  _count: KeyMetricsCountAggregateOutputType | null
  _avg: KeyMetricsAvgAggregateOutputType | null
  _sum: KeyMetricsSumAggregateOutputType | null
  _min: KeyMetricsMinAggregateOutputType | null
  _max: KeyMetricsMaxAggregateOutputType | null
}

type GetKeyMetricsGroupByPayload<T extends KeyMetricsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<KeyMetricsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof KeyMetricsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], KeyMetricsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], KeyMetricsGroupByOutputType[P]>
      }
    >
  > 



export type KeyMetricsWhereInput = {
  AND?: Prisma.KeyMetricsWhereInput | Prisma.KeyMetricsWhereInput[]
  OR?: Prisma.KeyMetricsWhereInput[]
  NOT?: Prisma.KeyMetricsWhereInput | Prisma.KeyMetricsWhereInput[]
  id?: Prisma.StringFilter<"KeyMetrics"> | string
  ltv?: Prisma.IntFilter<"KeyMetrics"> | number
  ltvDescription?: Prisma.StringFilter<"KeyMetrics"> | string
  cac?: Prisma.IntFilter<"KeyMetrics"> | number
  cacDescription?: Prisma.StringFilter<"KeyMetrics"> | string
  ltvCacRatio?: Prisma.FloatFilter<"KeyMetrics"> | number
  ltvCacRatioDescription?: Prisma.StringFilter<"KeyMetrics"> | string
  paybackPeriod?: Prisma.IntFilter<"KeyMetrics"> | number
  paybackPeriodDescription?: Prisma.StringFilter<"KeyMetrics"> | string
  runway?: Prisma.IntFilter<"KeyMetrics"> | number
  runwayDescription?: Prisma.StringFilter<"KeyMetrics"> | string
  breakEvenPoint?: Prisma.StringFilter<"KeyMetrics"> | string
  breakEvenPointDescription?: Prisma.StringFilter<"KeyMetrics"> | string
  monetizationStrategyId?: Prisma.StringNullableFilter<"KeyMetrics"> | string | null
  createdAt?: Prisma.DateTimeFilter<"KeyMetrics"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"KeyMetrics"> | Date | string
  monetizationStrategy?: Prisma.XOR<Prisma.MonetizationStrategyNullableScalarRelationFilter, Prisma.MonetizationStrategyWhereInput> | null
}

export type KeyMetricsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  ltv?: Prisma.SortOrder
  ltvDescription?: Prisma.SortOrder
  cac?: Prisma.SortOrder
  cacDescription?: Prisma.SortOrder
  ltvCacRatio?: Prisma.SortOrder
  ltvCacRatioDescription?: Prisma.SortOrder
  paybackPeriod?: Prisma.SortOrder
  paybackPeriodDescription?: Prisma.SortOrder
  runway?: Prisma.SortOrder
  runwayDescription?: Prisma.SortOrder
  breakEvenPoint?: Prisma.SortOrder
  breakEvenPointDescription?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  monetizationStrategy?: Prisma.MonetizationStrategyOrderByWithRelationInput
}

export type KeyMetricsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  monetizationStrategyId?: string
  AND?: Prisma.KeyMetricsWhereInput | Prisma.KeyMetricsWhereInput[]
  OR?: Prisma.KeyMetricsWhereInput[]
  NOT?: Prisma.KeyMetricsWhereInput | Prisma.KeyMetricsWhereInput[]
  ltv?: Prisma.IntFilter<"KeyMetrics"> | number
  ltvDescription?: Prisma.StringFilter<"KeyMetrics"> | string
  cac?: Prisma.IntFilter<"KeyMetrics"> | number
  cacDescription?: Prisma.StringFilter<"KeyMetrics"> | string
  ltvCacRatio?: Prisma.FloatFilter<"KeyMetrics"> | number
  ltvCacRatioDescription?: Prisma.StringFilter<"KeyMetrics"> | string
  paybackPeriod?: Prisma.IntFilter<"KeyMetrics"> | number
  paybackPeriodDescription?: Prisma.StringFilter<"KeyMetrics"> | string
  runway?: Prisma.IntFilter<"KeyMetrics"> | number
  runwayDescription?: Prisma.StringFilter<"KeyMetrics"> | string
  breakEvenPoint?: Prisma.StringFilter<"KeyMetrics"> | string
  breakEvenPointDescription?: Prisma.StringFilter<"KeyMetrics"> | string
  createdAt?: Prisma.DateTimeFilter<"KeyMetrics"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"KeyMetrics"> | Date | string
  monetizationStrategy?: Prisma.XOR<Prisma.MonetizationStrategyNullableScalarRelationFilter, Prisma.MonetizationStrategyWhereInput> | null
}, "id" | "monetizationStrategyId">

export type KeyMetricsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  ltv?: Prisma.SortOrder
  ltvDescription?: Prisma.SortOrder
  cac?: Prisma.SortOrder
  cacDescription?: Prisma.SortOrder
  ltvCacRatio?: Prisma.SortOrder
  ltvCacRatioDescription?: Prisma.SortOrder
  paybackPeriod?: Prisma.SortOrder
  paybackPeriodDescription?: Prisma.SortOrder
  runway?: Prisma.SortOrder
  runwayDescription?: Prisma.SortOrder
  breakEvenPoint?: Prisma.SortOrder
  breakEvenPointDescription?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.KeyMetricsCountOrderByAggregateInput
  _avg?: Prisma.KeyMetricsAvgOrderByAggregateInput
  _max?: Prisma.KeyMetricsMaxOrderByAggregateInput
  _min?: Prisma.KeyMetricsMinOrderByAggregateInput
  _sum?: Prisma.KeyMetricsSumOrderByAggregateInput
}

export type KeyMetricsScalarWhereWithAggregatesInput = {
  AND?: Prisma.KeyMetricsScalarWhereWithAggregatesInput | Prisma.KeyMetricsScalarWhereWithAggregatesInput[]
  OR?: Prisma.KeyMetricsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.KeyMetricsScalarWhereWithAggregatesInput | Prisma.KeyMetricsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"KeyMetrics"> | string
  ltv?: Prisma.IntWithAggregatesFilter<"KeyMetrics"> | number
  ltvDescription?: Prisma.StringWithAggregatesFilter<"KeyMetrics"> | string
  cac?: Prisma.IntWithAggregatesFilter<"KeyMetrics"> | number
  cacDescription?: Prisma.StringWithAggregatesFilter<"KeyMetrics"> | string
  ltvCacRatio?: Prisma.FloatWithAggregatesFilter<"KeyMetrics"> | number
  ltvCacRatioDescription?: Prisma.StringWithAggregatesFilter<"KeyMetrics"> | string
  paybackPeriod?: Prisma.IntWithAggregatesFilter<"KeyMetrics"> | number
  paybackPeriodDescription?: Prisma.StringWithAggregatesFilter<"KeyMetrics"> | string
  runway?: Prisma.IntWithAggregatesFilter<"KeyMetrics"> | number
  runwayDescription?: Prisma.StringWithAggregatesFilter<"KeyMetrics"> | string
  breakEvenPoint?: Prisma.StringWithAggregatesFilter<"KeyMetrics"> | string
  breakEvenPointDescription?: Prisma.StringWithAggregatesFilter<"KeyMetrics"> | string
  monetizationStrategyId?: Prisma.StringNullableWithAggregatesFilter<"KeyMetrics"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"KeyMetrics"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"KeyMetrics"> | Date | string
}

export type KeyMetricsCreateInput = {
  id?: string
  ltv: number
  ltvDescription: string
  cac: number
  cacDescription: string
  ltvCacRatio: number
  ltvCacRatioDescription: string
  paybackPeriod: number
  paybackPeriodDescription: string
  runway: number
  runwayDescription: string
  breakEvenPoint: string
  breakEvenPointDescription: string
  createdAt?: Date | string
  updatedAt?: Date | string
  monetizationStrategy?: Prisma.MonetizationStrategyCreateNestedOneWithoutKeyMetricsInput
}

export type KeyMetricsUncheckedCreateInput = {
  id?: string
  ltv: number
  ltvDescription: string
  cac: number
  cacDescription: string
  ltvCacRatio: number
  ltvCacRatioDescription: string
  paybackPeriod: number
  paybackPeriodDescription: string
  runway: number
  runwayDescription: string
  breakEvenPoint: string
  breakEvenPointDescription: string
  monetizationStrategyId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type KeyMetricsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ltv?: Prisma.IntFieldUpdateOperationsInput | number
  ltvDescription?: Prisma.StringFieldUpdateOperationsInput | string
  cac?: Prisma.IntFieldUpdateOperationsInput | number
  cacDescription?: Prisma.StringFieldUpdateOperationsInput | string
  ltvCacRatio?: Prisma.FloatFieldUpdateOperationsInput | number
  ltvCacRatioDescription?: Prisma.StringFieldUpdateOperationsInput | string
  paybackPeriod?: Prisma.IntFieldUpdateOperationsInput | number
  paybackPeriodDescription?: Prisma.StringFieldUpdateOperationsInput | string
  runway?: Prisma.IntFieldUpdateOperationsInput | number
  runwayDescription?: Prisma.StringFieldUpdateOperationsInput | string
  breakEvenPoint?: Prisma.StringFieldUpdateOperationsInput | string
  breakEvenPointDescription?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  monetizationStrategy?: Prisma.MonetizationStrategyUpdateOneWithoutKeyMetricsNestedInput
}

export type KeyMetricsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ltv?: Prisma.IntFieldUpdateOperationsInput | number
  ltvDescription?: Prisma.StringFieldUpdateOperationsInput | string
  cac?: Prisma.IntFieldUpdateOperationsInput | number
  cacDescription?: Prisma.StringFieldUpdateOperationsInput | string
  ltvCacRatio?: Prisma.FloatFieldUpdateOperationsInput | number
  ltvCacRatioDescription?: Prisma.StringFieldUpdateOperationsInput | string
  paybackPeriod?: Prisma.IntFieldUpdateOperationsInput | number
  paybackPeriodDescription?: Prisma.StringFieldUpdateOperationsInput | string
  runway?: Prisma.IntFieldUpdateOperationsInput | number
  runwayDescription?: Prisma.StringFieldUpdateOperationsInput | string
  breakEvenPoint?: Prisma.StringFieldUpdateOperationsInput | string
  breakEvenPointDescription?: Prisma.StringFieldUpdateOperationsInput | string
  monetizationStrategyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type KeyMetricsCreateManyInput = {
  id?: string
  ltv: number
  ltvDescription: string
  cac: number
  cacDescription: string
  ltvCacRatio: number
  ltvCacRatioDescription: string
  paybackPeriod: number
  paybackPeriodDescription: string
  runway: number
  runwayDescription: string
  breakEvenPoint: string
  breakEvenPointDescription: string
  monetizationStrategyId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type KeyMetricsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ltv?: Prisma.IntFieldUpdateOperationsInput | number
  ltvDescription?: Prisma.StringFieldUpdateOperationsInput | string
  cac?: Prisma.IntFieldUpdateOperationsInput | number
  cacDescription?: Prisma.StringFieldUpdateOperationsInput | string
  ltvCacRatio?: Prisma.FloatFieldUpdateOperationsInput | number
  ltvCacRatioDescription?: Prisma.StringFieldUpdateOperationsInput | string
  paybackPeriod?: Prisma.IntFieldUpdateOperationsInput | number
  paybackPeriodDescription?: Prisma.StringFieldUpdateOperationsInput | string
  runway?: Prisma.IntFieldUpdateOperationsInput | number
  runwayDescription?: Prisma.StringFieldUpdateOperationsInput | string
  breakEvenPoint?: Prisma.StringFieldUpdateOperationsInput | string
  breakEvenPointDescription?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type KeyMetricsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ltv?: Prisma.IntFieldUpdateOperationsInput | number
  ltvDescription?: Prisma.StringFieldUpdateOperationsInput | string
  cac?: Prisma.IntFieldUpdateOperationsInput | number
  cacDescription?: Prisma.StringFieldUpdateOperationsInput | string
  ltvCacRatio?: Prisma.FloatFieldUpdateOperationsInput | number
  ltvCacRatioDescription?: Prisma.StringFieldUpdateOperationsInput | string
  paybackPeriod?: Prisma.IntFieldUpdateOperationsInput | number
  paybackPeriodDescription?: Prisma.StringFieldUpdateOperationsInput | string
  runway?: Prisma.IntFieldUpdateOperationsInput | number
  runwayDescription?: Prisma.StringFieldUpdateOperationsInput | string
  breakEvenPoint?: Prisma.StringFieldUpdateOperationsInput | string
  breakEvenPointDescription?: Prisma.StringFieldUpdateOperationsInput | string
  monetizationStrategyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type KeyMetricsNullableScalarRelationFilter = {
  is?: Prisma.KeyMetricsWhereInput | null
  isNot?: Prisma.KeyMetricsWhereInput | null
}

export type KeyMetricsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ltv?: Prisma.SortOrder
  ltvDescription?: Prisma.SortOrder
  cac?: Prisma.SortOrder
  cacDescription?: Prisma.SortOrder
  ltvCacRatio?: Prisma.SortOrder
  ltvCacRatioDescription?: Prisma.SortOrder
  paybackPeriod?: Prisma.SortOrder
  paybackPeriodDescription?: Prisma.SortOrder
  runway?: Prisma.SortOrder
  runwayDescription?: Prisma.SortOrder
  breakEvenPoint?: Prisma.SortOrder
  breakEvenPointDescription?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type KeyMetricsAvgOrderByAggregateInput = {
  ltv?: Prisma.SortOrder
  cac?: Prisma.SortOrder
  ltvCacRatio?: Prisma.SortOrder
  paybackPeriod?: Prisma.SortOrder
  runway?: Prisma.SortOrder
}

export type KeyMetricsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ltv?: Prisma.SortOrder
  ltvDescription?: Prisma.SortOrder
  cac?: Prisma.SortOrder
  cacDescription?: Prisma.SortOrder
  ltvCacRatio?: Prisma.SortOrder
  ltvCacRatioDescription?: Prisma.SortOrder
  paybackPeriod?: Prisma.SortOrder
  paybackPeriodDescription?: Prisma.SortOrder
  runway?: Prisma.SortOrder
  runwayDescription?: Prisma.SortOrder
  breakEvenPoint?: Prisma.SortOrder
  breakEvenPointDescription?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type KeyMetricsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ltv?: Prisma.SortOrder
  ltvDescription?: Prisma.SortOrder
  cac?: Prisma.SortOrder
  cacDescription?: Prisma.SortOrder
  ltvCacRatio?: Prisma.SortOrder
  ltvCacRatioDescription?: Prisma.SortOrder
  paybackPeriod?: Prisma.SortOrder
  paybackPeriodDescription?: Prisma.SortOrder
  runway?: Prisma.SortOrder
  runwayDescription?: Prisma.SortOrder
  breakEvenPoint?: Prisma.SortOrder
  breakEvenPointDescription?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type KeyMetricsSumOrderByAggregateInput = {
  ltv?: Prisma.SortOrder
  cac?: Prisma.SortOrder
  ltvCacRatio?: Prisma.SortOrder
  paybackPeriod?: Prisma.SortOrder
  runway?: Prisma.SortOrder
}

export type KeyMetricsCreateNestedOneWithoutMonetizationStrategyInput = {
  create?: Prisma.XOR<Prisma.KeyMetricsCreateWithoutMonetizationStrategyInput, Prisma.KeyMetricsUncheckedCreateWithoutMonetizationStrategyInput>
  connectOrCreate?: Prisma.KeyMetricsCreateOrConnectWithoutMonetizationStrategyInput
  connect?: Prisma.KeyMetricsWhereUniqueInput
}

export type KeyMetricsUncheckedCreateNestedOneWithoutMonetizationStrategyInput = {
  create?: Prisma.XOR<Prisma.KeyMetricsCreateWithoutMonetizationStrategyInput, Prisma.KeyMetricsUncheckedCreateWithoutMonetizationStrategyInput>
  connectOrCreate?: Prisma.KeyMetricsCreateOrConnectWithoutMonetizationStrategyInput
  connect?: Prisma.KeyMetricsWhereUniqueInput
}

export type KeyMetricsUpdateOneWithoutMonetizationStrategyNestedInput = {
  create?: Prisma.XOR<Prisma.KeyMetricsCreateWithoutMonetizationStrategyInput, Prisma.KeyMetricsUncheckedCreateWithoutMonetizationStrategyInput>
  connectOrCreate?: Prisma.KeyMetricsCreateOrConnectWithoutMonetizationStrategyInput
  upsert?: Prisma.KeyMetricsUpsertWithoutMonetizationStrategyInput
  disconnect?: Prisma.KeyMetricsWhereInput | boolean
  delete?: Prisma.KeyMetricsWhereInput | boolean
  connect?: Prisma.KeyMetricsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.KeyMetricsUpdateToOneWithWhereWithoutMonetizationStrategyInput, Prisma.KeyMetricsUpdateWithoutMonetizationStrategyInput>, Prisma.KeyMetricsUncheckedUpdateWithoutMonetizationStrategyInput>
}

export type KeyMetricsUncheckedUpdateOneWithoutMonetizationStrategyNestedInput = {
  create?: Prisma.XOR<Prisma.KeyMetricsCreateWithoutMonetizationStrategyInput, Prisma.KeyMetricsUncheckedCreateWithoutMonetizationStrategyInput>
  connectOrCreate?: Prisma.KeyMetricsCreateOrConnectWithoutMonetizationStrategyInput
  upsert?: Prisma.KeyMetricsUpsertWithoutMonetizationStrategyInput
  disconnect?: Prisma.KeyMetricsWhereInput | boolean
  delete?: Prisma.KeyMetricsWhereInput | boolean
  connect?: Prisma.KeyMetricsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.KeyMetricsUpdateToOneWithWhereWithoutMonetizationStrategyInput, Prisma.KeyMetricsUpdateWithoutMonetizationStrategyInput>, Prisma.KeyMetricsUncheckedUpdateWithoutMonetizationStrategyInput>
}

export type KeyMetricsCreateWithoutMonetizationStrategyInput = {
  id?: string
  ltv: number
  ltvDescription: string
  cac: number
  cacDescription: string
  ltvCacRatio: number
  ltvCacRatioDescription: string
  paybackPeriod: number
  paybackPeriodDescription: string
  runway: number
  runwayDescription: string
  breakEvenPoint: string
  breakEvenPointDescription: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type KeyMetricsUncheckedCreateWithoutMonetizationStrategyInput = {
  id?: string
  ltv: number
  ltvDescription: string
  cac: number
  cacDescription: string
  ltvCacRatio: number
  ltvCacRatioDescription: string
  paybackPeriod: number
  paybackPeriodDescription: string
  runway: number
  runwayDescription: string
  breakEvenPoint: string
  breakEvenPointDescription: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type KeyMetricsCreateOrConnectWithoutMonetizationStrategyInput = {
  where: Prisma.KeyMetricsWhereUniqueInput
  create: Prisma.XOR<Prisma.KeyMetricsCreateWithoutMonetizationStrategyInput, Prisma.KeyMetricsUncheckedCreateWithoutMonetizationStrategyInput>
}

export type KeyMetricsUpsertWithoutMonetizationStrategyInput = {
  update: Prisma.XOR<Prisma.KeyMetricsUpdateWithoutMonetizationStrategyInput, Prisma.KeyMetricsUncheckedUpdateWithoutMonetizationStrategyInput>
  create: Prisma.XOR<Prisma.KeyMetricsCreateWithoutMonetizationStrategyInput, Prisma.KeyMetricsUncheckedCreateWithoutMonetizationStrategyInput>
  where?: Prisma.KeyMetricsWhereInput
}

export type KeyMetricsUpdateToOneWithWhereWithoutMonetizationStrategyInput = {
  where?: Prisma.KeyMetricsWhereInput
  data: Prisma.XOR<Prisma.KeyMetricsUpdateWithoutMonetizationStrategyInput, Prisma.KeyMetricsUncheckedUpdateWithoutMonetizationStrategyInput>
}

export type KeyMetricsUpdateWithoutMonetizationStrategyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ltv?: Prisma.IntFieldUpdateOperationsInput | number
  ltvDescription?: Prisma.StringFieldUpdateOperationsInput | string
  cac?: Prisma.IntFieldUpdateOperationsInput | number
  cacDescription?: Prisma.StringFieldUpdateOperationsInput | string
  ltvCacRatio?: Prisma.FloatFieldUpdateOperationsInput | number
  ltvCacRatioDescription?: Prisma.StringFieldUpdateOperationsInput | string
  paybackPeriod?: Prisma.IntFieldUpdateOperationsInput | number
  paybackPeriodDescription?: Prisma.StringFieldUpdateOperationsInput | string
  runway?: Prisma.IntFieldUpdateOperationsInput | number
  runwayDescription?: Prisma.StringFieldUpdateOperationsInput | string
  breakEvenPoint?: Prisma.StringFieldUpdateOperationsInput | string
  breakEvenPointDescription?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type KeyMetricsUncheckedUpdateWithoutMonetizationStrategyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ltv?: Prisma.IntFieldUpdateOperationsInput | number
  ltvDescription?: Prisma.StringFieldUpdateOperationsInput | string
  cac?: Prisma.IntFieldUpdateOperationsInput | number
  cacDescription?: Prisma.StringFieldUpdateOperationsInput | string
  ltvCacRatio?: Prisma.FloatFieldUpdateOperationsInput | number
  ltvCacRatioDescription?: Prisma.StringFieldUpdateOperationsInput | string
  paybackPeriod?: Prisma.IntFieldUpdateOperationsInput | number
  paybackPeriodDescription?: Prisma.StringFieldUpdateOperationsInput | string
  runway?: Prisma.IntFieldUpdateOperationsInput | number
  runwayDescription?: Prisma.StringFieldUpdateOperationsInput | string
  breakEvenPoint?: Prisma.StringFieldUpdateOperationsInput | string
  breakEvenPointDescription?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type KeyMetricsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  ltv?: boolean
  ltvDescription?: boolean
  cac?: boolean
  cacDescription?: boolean
  ltvCacRatio?: boolean
  ltvCacRatioDescription?: boolean
  paybackPeriod?: boolean
  paybackPeriodDescription?: boolean
  runway?: boolean
  runwayDescription?: boolean
  breakEvenPoint?: boolean
  breakEvenPointDescription?: boolean
  monetizationStrategyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  monetizationStrategy?: boolean | Prisma.KeyMetrics$monetizationStrategyArgs<ExtArgs>
}, ExtArgs["result"]["keyMetrics"]>

export type KeyMetricsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  ltv?: boolean
  ltvDescription?: boolean
  cac?: boolean
  cacDescription?: boolean
  ltvCacRatio?: boolean
  ltvCacRatioDescription?: boolean
  paybackPeriod?: boolean
  paybackPeriodDescription?: boolean
  runway?: boolean
  runwayDescription?: boolean
  breakEvenPoint?: boolean
  breakEvenPointDescription?: boolean
  monetizationStrategyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  monetizationStrategy?: boolean | Prisma.KeyMetrics$monetizationStrategyArgs<ExtArgs>
}, ExtArgs["result"]["keyMetrics"]>

export type KeyMetricsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  ltv?: boolean
  ltvDescription?: boolean
  cac?: boolean
  cacDescription?: boolean
  ltvCacRatio?: boolean
  ltvCacRatioDescription?: boolean
  paybackPeriod?: boolean
  paybackPeriodDescription?: boolean
  runway?: boolean
  runwayDescription?: boolean
  breakEvenPoint?: boolean
  breakEvenPointDescription?: boolean
  monetizationStrategyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  monetizationStrategy?: boolean | Prisma.KeyMetrics$monetizationStrategyArgs<ExtArgs>
}, ExtArgs["result"]["keyMetrics"]>

export type KeyMetricsSelectScalar = {
  id?: boolean
  ltv?: boolean
  ltvDescription?: boolean
  cac?: boolean
  cacDescription?: boolean
  ltvCacRatio?: boolean
  ltvCacRatioDescription?: boolean
  paybackPeriod?: boolean
  paybackPeriodDescription?: boolean
  runway?: boolean
  runwayDescription?: boolean
  breakEvenPoint?: boolean
  breakEvenPointDescription?: boolean
  monetizationStrategyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type KeyMetricsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "ltv" | "ltvDescription" | "cac" | "cacDescription" | "ltvCacRatio" | "ltvCacRatioDescription" | "paybackPeriod" | "paybackPeriodDescription" | "runway" | "runwayDescription" | "breakEvenPoint" | "breakEvenPointDescription" | "monetizationStrategyId" | "createdAt" | "updatedAt", ExtArgs["result"]["keyMetrics"]>
export type KeyMetricsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  monetizationStrategy?: boolean | Prisma.KeyMetrics$monetizationStrategyArgs<ExtArgs>
}
export type KeyMetricsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  monetizationStrategy?: boolean | Prisma.KeyMetrics$monetizationStrategyArgs<ExtArgs>
}
export type KeyMetricsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  monetizationStrategy?: boolean | Prisma.KeyMetrics$monetizationStrategyArgs<ExtArgs>
}

export type $KeyMetricsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "KeyMetrics"
  objects: {
    monetizationStrategy: Prisma.$MonetizationStrategyPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    ltv: number
    ltvDescription: string
    cac: number
    cacDescription: string
    ltvCacRatio: number
    ltvCacRatioDescription: string
    paybackPeriod: number
    paybackPeriodDescription: string
    runway: number
    runwayDescription: string
    breakEvenPoint: string
    breakEvenPointDescription: string
    monetizationStrategyId: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["keyMetrics"]>
  composites: {}
}

export type KeyMetricsGetPayload<S extends boolean | null | undefined | KeyMetricsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$KeyMetricsPayload, S>

export type KeyMetricsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<KeyMetricsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: KeyMetricsCountAggregateInputType | true
  }

export interface KeyMetricsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KeyMetrics'], meta: { name: 'KeyMetrics' } }
  /**
   * Find zero or one KeyMetrics that matches the filter.
   * @param {KeyMetricsFindUniqueArgs} args - Arguments to find a KeyMetrics
   * @example
   * // Get one KeyMetrics
   * const keyMetrics = await prisma.keyMetrics.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends KeyMetricsFindUniqueArgs>(args: Prisma.SelectSubset<T, KeyMetricsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__KeyMetricsClient<runtime.Types.Result.GetResult<Prisma.$KeyMetricsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one KeyMetrics that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {KeyMetricsFindUniqueOrThrowArgs} args - Arguments to find a KeyMetrics
   * @example
   * // Get one KeyMetrics
   * const keyMetrics = await prisma.keyMetrics.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends KeyMetricsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, KeyMetricsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__KeyMetricsClient<runtime.Types.Result.GetResult<Prisma.$KeyMetricsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first KeyMetrics that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KeyMetricsFindFirstArgs} args - Arguments to find a KeyMetrics
   * @example
   * // Get one KeyMetrics
   * const keyMetrics = await prisma.keyMetrics.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends KeyMetricsFindFirstArgs>(args?: Prisma.SelectSubset<T, KeyMetricsFindFirstArgs<ExtArgs>>): Prisma.Prisma__KeyMetricsClient<runtime.Types.Result.GetResult<Prisma.$KeyMetricsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first KeyMetrics that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KeyMetricsFindFirstOrThrowArgs} args - Arguments to find a KeyMetrics
   * @example
   * // Get one KeyMetrics
   * const keyMetrics = await prisma.keyMetrics.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends KeyMetricsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, KeyMetricsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__KeyMetricsClient<runtime.Types.Result.GetResult<Prisma.$KeyMetricsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more KeyMetrics that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KeyMetricsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all KeyMetrics
   * const keyMetrics = await prisma.keyMetrics.findMany()
   * 
   * // Get first 10 KeyMetrics
   * const keyMetrics = await prisma.keyMetrics.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const keyMetricsWithIdOnly = await prisma.keyMetrics.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends KeyMetricsFindManyArgs>(args?: Prisma.SelectSubset<T, KeyMetricsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$KeyMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a KeyMetrics.
   * @param {KeyMetricsCreateArgs} args - Arguments to create a KeyMetrics.
   * @example
   * // Create one KeyMetrics
   * const KeyMetrics = await prisma.keyMetrics.create({
   *   data: {
   *     // ... data to create a KeyMetrics
   *   }
   * })
   * 
   */
  create<T extends KeyMetricsCreateArgs>(args: Prisma.SelectSubset<T, KeyMetricsCreateArgs<ExtArgs>>): Prisma.Prisma__KeyMetricsClient<runtime.Types.Result.GetResult<Prisma.$KeyMetricsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many KeyMetrics.
   * @param {KeyMetricsCreateManyArgs} args - Arguments to create many KeyMetrics.
   * @example
   * // Create many KeyMetrics
   * const keyMetrics = await prisma.keyMetrics.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends KeyMetricsCreateManyArgs>(args?: Prisma.SelectSubset<T, KeyMetricsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many KeyMetrics and returns the data saved in the database.
   * @param {KeyMetricsCreateManyAndReturnArgs} args - Arguments to create many KeyMetrics.
   * @example
   * // Create many KeyMetrics
   * const keyMetrics = await prisma.keyMetrics.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many KeyMetrics and only return the `id`
   * const keyMetricsWithIdOnly = await prisma.keyMetrics.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends KeyMetricsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, KeyMetricsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$KeyMetricsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a KeyMetrics.
   * @param {KeyMetricsDeleteArgs} args - Arguments to delete one KeyMetrics.
   * @example
   * // Delete one KeyMetrics
   * const KeyMetrics = await prisma.keyMetrics.delete({
   *   where: {
   *     // ... filter to delete one KeyMetrics
   *   }
   * })
   * 
   */
  delete<T extends KeyMetricsDeleteArgs>(args: Prisma.SelectSubset<T, KeyMetricsDeleteArgs<ExtArgs>>): Prisma.Prisma__KeyMetricsClient<runtime.Types.Result.GetResult<Prisma.$KeyMetricsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one KeyMetrics.
   * @param {KeyMetricsUpdateArgs} args - Arguments to update one KeyMetrics.
   * @example
   * // Update one KeyMetrics
   * const keyMetrics = await prisma.keyMetrics.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends KeyMetricsUpdateArgs>(args: Prisma.SelectSubset<T, KeyMetricsUpdateArgs<ExtArgs>>): Prisma.Prisma__KeyMetricsClient<runtime.Types.Result.GetResult<Prisma.$KeyMetricsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more KeyMetrics.
   * @param {KeyMetricsDeleteManyArgs} args - Arguments to filter KeyMetrics to delete.
   * @example
   * // Delete a few KeyMetrics
   * const { count } = await prisma.keyMetrics.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends KeyMetricsDeleteManyArgs>(args?: Prisma.SelectSubset<T, KeyMetricsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more KeyMetrics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KeyMetricsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many KeyMetrics
   * const keyMetrics = await prisma.keyMetrics.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends KeyMetricsUpdateManyArgs>(args: Prisma.SelectSubset<T, KeyMetricsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more KeyMetrics and returns the data updated in the database.
   * @param {KeyMetricsUpdateManyAndReturnArgs} args - Arguments to update many KeyMetrics.
   * @example
   * // Update many KeyMetrics
   * const keyMetrics = await prisma.keyMetrics.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more KeyMetrics and only return the `id`
   * const keyMetricsWithIdOnly = await prisma.keyMetrics.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends KeyMetricsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, KeyMetricsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$KeyMetricsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one KeyMetrics.
   * @param {KeyMetricsUpsertArgs} args - Arguments to update or create a KeyMetrics.
   * @example
   * // Update or create a KeyMetrics
   * const keyMetrics = await prisma.keyMetrics.upsert({
   *   create: {
   *     // ... data to create a KeyMetrics
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the KeyMetrics we want to update
   *   }
   * })
   */
  upsert<T extends KeyMetricsUpsertArgs>(args: Prisma.SelectSubset<T, KeyMetricsUpsertArgs<ExtArgs>>): Prisma.Prisma__KeyMetricsClient<runtime.Types.Result.GetResult<Prisma.$KeyMetricsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of KeyMetrics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KeyMetricsCountArgs} args - Arguments to filter KeyMetrics to count.
   * @example
   * // Count the number of KeyMetrics
   * const count = await prisma.keyMetrics.count({
   *   where: {
   *     // ... the filter for the KeyMetrics we want to count
   *   }
   * })
  **/
  count<T extends KeyMetricsCountArgs>(
    args?: Prisma.Subset<T, KeyMetricsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], KeyMetricsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a KeyMetrics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KeyMetricsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends KeyMetricsAggregateArgs>(args: Prisma.Subset<T, KeyMetricsAggregateArgs>): Prisma.PrismaPromise<GetKeyMetricsAggregateType<T>>

  /**
   * Group by KeyMetrics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KeyMetricsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends KeyMetricsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: KeyMetricsGroupByArgs['orderBy'] }
      : { orderBy?: KeyMetricsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, KeyMetricsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeyMetricsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the KeyMetrics model
 */
readonly fields: KeyMetricsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for KeyMetrics.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__KeyMetricsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  monetizationStrategy<T extends Prisma.KeyMetrics$monetizationStrategyArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.KeyMetrics$monetizationStrategyArgs<ExtArgs>>): Prisma.Prisma__MonetizationStrategyClient<runtime.Types.Result.GetResult<Prisma.$MonetizationStrategyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the KeyMetrics model
 */
export interface KeyMetricsFieldRefs {
  readonly id: Prisma.FieldRef<"KeyMetrics", 'String'>
  readonly ltv: Prisma.FieldRef<"KeyMetrics", 'Int'>
  readonly ltvDescription: Prisma.FieldRef<"KeyMetrics", 'String'>
  readonly cac: Prisma.FieldRef<"KeyMetrics", 'Int'>
  readonly cacDescription: Prisma.FieldRef<"KeyMetrics", 'String'>
  readonly ltvCacRatio: Prisma.FieldRef<"KeyMetrics", 'Float'>
  readonly ltvCacRatioDescription: Prisma.FieldRef<"KeyMetrics", 'String'>
  readonly paybackPeriod: Prisma.FieldRef<"KeyMetrics", 'Int'>
  readonly paybackPeriodDescription: Prisma.FieldRef<"KeyMetrics", 'String'>
  readonly runway: Prisma.FieldRef<"KeyMetrics", 'Int'>
  readonly runwayDescription: Prisma.FieldRef<"KeyMetrics", 'String'>
  readonly breakEvenPoint: Prisma.FieldRef<"KeyMetrics", 'String'>
  readonly breakEvenPointDescription: Prisma.FieldRef<"KeyMetrics", 'String'>
  readonly monetizationStrategyId: Prisma.FieldRef<"KeyMetrics", 'String'>
  readonly createdAt: Prisma.FieldRef<"KeyMetrics", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"KeyMetrics", 'DateTime'>
}
    

// Custom InputTypes
/**
 * KeyMetrics findUnique
 */
export type KeyMetricsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KeyMetrics
   */
  select?: Prisma.KeyMetricsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KeyMetrics
   */
  omit?: Prisma.KeyMetricsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KeyMetricsInclude<ExtArgs> | null
  /**
   * Filter, which KeyMetrics to fetch.
   */
  where: Prisma.KeyMetricsWhereUniqueInput
}

/**
 * KeyMetrics findUniqueOrThrow
 */
export type KeyMetricsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KeyMetrics
   */
  select?: Prisma.KeyMetricsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KeyMetrics
   */
  omit?: Prisma.KeyMetricsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KeyMetricsInclude<ExtArgs> | null
  /**
   * Filter, which KeyMetrics to fetch.
   */
  where: Prisma.KeyMetricsWhereUniqueInput
}

/**
 * KeyMetrics findFirst
 */
export type KeyMetricsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KeyMetrics
   */
  select?: Prisma.KeyMetricsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KeyMetrics
   */
  omit?: Prisma.KeyMetricsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KeyMetricsInclude<ExtArgs> | null
  /**
   * Filter, which KeyMetrics to fetch.
   */
  where?: Prisma.KeyMetricsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of KeyMetrics to fetch.
   */
  orderBy?: Prisma.KeyMetricsOrderByWithRelationInput | Prisma.KeyMetricsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for KeyMetrics.
   */
  cursor?: Prisma.KeyMetricsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` KeyMetrics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` KeyMetrics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of KeyMetrics.
   */
  distinct?: Prisma.KeyMetricsScalarFieldEnum | Prisma.KeyMetricsScalarFieldEnum[]
}

/**
 * KeyMetrics findFirstOrThrow
 */
export type KeyMetricsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KeyMetrics
   */
  select?: Prisma.KeyMetricsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KeyMetrics
   */
  omit?: Prisma.KeyMetricsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KeyMetricsInclude<ExtArgs> | null
  /**
   * Filter, which KeyMetrics to fetch.
   */
  where?: Prisma.KeyMetricsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of KeyMetrics to fetch.
   */
  orderBy?: Prisma.KeyMetricsOrderByWithRelationInput | Prisma.KeyMetricsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for KeyMetrics.
   */
  cursor?: Prisma.KeyMetricsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` KeyMetrics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` KeyMetrics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of KeyMetrics.
   */
  distinct?: Prisma.KeyMetricsScalarFieldEnum | Prisma.KeyMetricsScalarFieldEnum[]
}

/**
 * KeyMetrics findMany
 */
export type KeyMetricsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KeyMetrics
   */
  select?: Prisma.KeyMetricsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KeyMetrics
   */
  omit?: Prisma.KeyMetricsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KeyMetricsInclude<ExtArgs> | null
  /**
   * Filter, which KeyMetrics to fetch.
   */
  where?: Prisma.KeyMetricsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of KeyMetrics to fetch.
   */
  orderBy?: Prisma.KeyMetricsOrderByWithRelationInput | Prisma.KeyMetricsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing KeyMetrics.
   */
  cursor?: Prisma.KeyMetricsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` KeyMetrics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` KeyMetrics.
   */
  skip?: number
  distinct?: Prisma.KeyMetricsScalarFieldEnum | Prisma.KeyMetricsScalarFieldEnum[]
}

/**
 * KeyMetrics create
 */
export type KeyMetricsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KeyMetrics
   */
  select?: Prisma.KeyMetricsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KeyMetrics
   */
  omit?: Prisma.KeyMetricsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KeyMetricsInclude<ExtArgs> | null
  /**
   * The data needed to create a KeyMetrics.
   */
  data: Prisma.XOR<Prisma.KeyMetricsCreateInput, Prisma.KeyMetricsUncheckedCreateInput>
}

/**
 * KeyMetrics createMany
 */
export type KeyMetricsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many KeyMetrics.
   */
  data: Prisma.KeyMetricsCreateManyInput | Prisma.KeyMetricsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * KeyMetrics createManyAndReturn
 */
export type KeyMetricsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KeyMetrics
   */
  select?: Prisma.KeyMetricsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the KeyMetrics
   */
  omit?: Prisma.KeyMetricsOmit<ExtArgs> | null
  /**
   * The data used to create many KeyMetrics.
   */
  data: Prisma.KeyMetricsCreateManyInput | Prisma.KeyMetricsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KeyMetricsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * KeyMetrics update
 */
export type KeyMetricsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KeyMetrics
   */
  select?: Prisma.KeyMetricsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KeyMetrics
   */
  omit?: Prisma.KeyMetricsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KeyMetricsInclude<ExtArgs> | null
  /**
   * The data needed to update a KeyMetrics.
   */
  data: Prisma.XOR<Prisma.KeyMetricsUpdateInput, Prisma.KeyMetricsUncheckedUpdateInput>
  /**
   * Choose, which KeyMetrics to update.
   */
  where: Prisma.KeyMetricsWhereUniqueInput
}

/**
 * KeyMetrics updateMany
 */
export type KeyMetricsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update KeyMetrics.
   */
  data: Prisma.XOR<Prisma.KeyMetricsUpdateManyMutationInput, Prisma.KeyMetricsUncheckedUpdateManyInput>
  /**
   * Filter which KeyMetrics to update
   */
  where?: Prisma.KeyMetricsWhereInput
  /**
   * Limit how many KeyMetrics to update.
   */
  limit?: number
}

/**
 * KeyMetrics updateManyAndReturn
 */
export type KeyMetricsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KeyMetrics
   */
  select?: Prisma.KeyMetricsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the KeyMetrics
   */
  omit?: Prisma.KeyMetricsOmit<ExtArgs> | null
  /**
   * The data used to update KeyMetrics.
   */
  data: Prisma.XOR<Prisma.KeyMetricsUpdateManyMutationInput, Prisma.KeyMetricsUncheckedUpdateManyInput>
  /**
   * Filter which KeyMetrics to update
   */
  where?: Prisma.KeyMetricsWhereInput
  /**
   * Limit how many KeyMetrics to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KeyMetricsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * KeyMetrics upsert
 */
export type KeyMetricsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KeyMetrics
   */
  select?: Prisma.KeyMetricsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KeyMetrics
   */
  omit?: Prisma.KeyMetricsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KeyMetricsInclude<ExtArgs> | null
  /**
   * The filter to search for the KeyMetrics to update in case it exists.
   */
  where: Prisma.KeyMetricsWhereUniqueInput
  /**
   * In case the KeyMetrics found by the `where` argument doesn't exist, create a new KeyMetrics with this data.
   */
  create: Prisma.XOR<Prisma.KeyMetricsCreateInput, Prisma.KeyMetricsUncheckedCreateInput>
  /**
   * In case the KeyMetrics was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.KeyMetricsUpdateInput, Prisma.KeyMetricsUncheckedUpdateInput>
}

/**
 * KeyMetrics delete
 */
export type KeyMetricsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KeyMetrics
   */
  select?: Prisma.KeyMetricsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KeyMetrics
   */
  omit?: Prisma.KeyMetricsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KeyMetricsInclude<ExtArgs> | null
  /**
   * Filter which KeyMetrics to delete.
   */
  where: Prisma.KeyMetricsWhereUniqueInput
}

/**
 * KeyMetrics deleteMany
 */
export type KeyMetricsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which KeyMetrics to delete
   */
  where?: Prisma.KeyMetricsWhereInput
  /**
   * Limit how many KeyMetrics to delete.
   */
  limit?: number
}

/**
 * KeyMetrics.monetizationStrategy
 */
export type KeyMetrics$monetizationStrategyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MonetizationStrategy
   */
  select?: Prisma.MonetizationStrategySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MonetizationStrategy
   */
  omit?: Prisma.MonetizationStrategyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MonetizationStrategyInclude<ExtArgs> | null
  where?: Prisma.MonetizationStrategyWhereInput
}

/**
 * KeyMetrics without action
 */
export type KeyMetricsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KeyMetrics
   */
  select?: Prisma.KeyMetricsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KeyMetrics
   */
  omit?: Prisma.KeyMetricsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KeyMetricsInclude<ExtArgs> | null
}
