
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FrameworkFit` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FrameworkFit
 * 
 */
export type FrameworkFitModel = runtime.Types.Result.DefaultSelection<Prisma.$FrameworkFitPayload>

export type AggregateFrameworkFit = {
  _count: FrameworkFitCountAggregateOutputType | null
  _avg: FrameworkFitAvgAggregateOutputType | null
  _sum: FrameworkFitSumAggregateOutputType | null
  _min: FrameworkFitMinAggregateOutputType | null
  _max: FrameworkFitMaxAggregateOutputType | null
}

export type FrameworkFitAvgAggregateOutputType = {
  leanCanvasScore: number | null
}

export type FrameworkFitSumAggregateOutputType = {
  leanCanvasScore: number | null
}

export type FrameworkFitMinAggregateOutputType = {
  id: string | null
  leanCanvasScore: number | null
  designThinkingStage: string | null
  innovationDilemmaFit: string | null
  crossingChasmStage: string | null
  createdAt: Date | null
  updatedAt: Date | null
  dailyIdeaId: string | null
}

export type FrameworkFitMaxAggregateOutputType = {
  id: string | null
  leanCanvasScore: number | null
  designThinkingStage: string | null
  innovationDilemmaFit: string | null
  crossingChasmStage: string | null
  createdAt: Date | null
  updatedAt: Date | null
  dailyIdeaId: string | null
}

export type FrameworkFitCountAggregateOutputType = {
  id: number
  jobsToBeDone: number
  blueOceanFactors: number
  leanCanvasScore: number
  designThinkingStage: number
  innovationDilemmaFit: number
  crossingChasmStage: number
  createdAt: number
  updatedAt: number
  dailyIdeaId: number
  _all: number
}


export type FrameworkFitAvgAggregateInputType = {
  leanCanvasScore?: true
}

export type FrameworkFitSumAggregateInputType = {
  leanCanvasScore?: true
}

export type FrameworkFitMinAggregateInputType = {
  id?: true
  leanCanvasScore?: true
  designThinkingStage?: true
  innovationDilemmaFit?: true
  crossingChasmStage?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
}

export type FrameworkFitMaxAggregateInputType = {
  id?: true
  leanCanvasScore?: true
  designThinkingStage?: true
  innovationDilemmaFit?: true
  crossingChasmStage?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
}

export type FrameworkFitCountAggregateInputType = {
  id?: true
  jobsToBeDone?: true
  blueOceanFactors?: true
  leanCanvasScore?: true
  designThinkingStage?: true
  innovationDilemmaFit?: true
  crossingChasmStage?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
  _all?: true
}

export type FrameworkFitAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FrameworkFit to aggregate.
   */
  where?: Prisma.FrameworkFitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FrameworkFits to fetch.
   */
  orderBy?: Prisma.FrameworkFitOrderByWithRelationInput | Prisma.FrameworkFitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FrameworkFitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FrameworkFits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FrameworkFits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FrameworkFits
  **/
  _count?: true | FrameworkFitCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FrameworkFitAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FrameworkFitSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FrameworkFitMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FrameworkFitMaxAggregateInputType
}

export type GetFrameworkFitAggregateType<T extends FrameworkFitAggregateArgs> = {
      [P in keyof T & keyof AggregateFrameworkFit]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFrameworkFit[P]>
    : Prisma.GetScalarType<T[P], AggregateFrameworkFit[P]>
}




export type FrameworkFitGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FrameworkFitWhereInput
  orderBy?: Prisma.FrameworkFitOrderByWithAggregationInput | Prisma.FrameworkFitOrderByWithAggregationInput[]
  by: Prisma.FrameworkFitScalarFieldEnum[] | Prisma.FrameworkFitScalarFieldEnum
  having?: Prisma.FrameworkFitScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FrameworkFitCountAggregateInputType | true
  _avg?: FrameworkFitAvgAggregateInputType
  _sum?: FrameworkFitSumAggregateInputType
  _min?: FrameworkFitMinAggregateInputType
  _max?: FrameworkFitMaxAggregateInputType
}

export type FrameworkFitGroupByOutputType = {
  id: string
  jobsToBeDone: string[]
  blueOceanFactors: runtime.JsonValue
  leanCanvasScore: number
  designThinkingStage: string
  innovationDilemmaFit: string
  crossingChasmStage: string
  createdAt: Date
  updatedAt: Date
  dailyIdeaId: string
  _count: FrameworkFitCountAggregateOutputType | null
  _avg: FrameworkFitAvgAggregateOutputType | null
  _sum: FrameworkFitSumAggregateOutputType | null
  _min: FrameworkFitMinAggregateOutputType | null
  _max: FrameworkFitMaxAggregateOutputType | null
}

type GetFrameworkFitGroupByPayload<T extends FrameworkFitGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FrameworkFitGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FrameworkFitGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FrameworkFitGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FrameworkFitGroupByOutputType[P]>
      }
    >
  > 



export type FrameworkFitWhereInput = {
  AND?: Prisma.FrameworkFitWhereInput | Prisma.FrameworkFitWhereInput[]
  OR?: Prisma.FrameworkFitWhereInput[]
  NOT?: Prisma.FrameworkFitWhereInput | Prisma.FrameworkFitWhereInput[]
  id?: Prisma.StringFilter<"FrameworkFit"> | string
  jobsToBeDone?: Prisma.StringNullableListFilter<"FrameworkFit">
  blueOceanFactors?: Prisma.JsonFilter<"FrameworkFit">
  leanCanvasScore?: Prisma.IntFilter<"FrameworkFit"> | number
  designThinkingStage?: Prisma.StringFilter<"FrameworkFit"> | string
  innovationDilemmaFit?: Prisma.StringFilter<"FrameworkFit"> | string
  crossingChasmStage?: Prisma.StringFilter<"FrameworkFit"> | string
  createdAt?: Prisma.DateTimeFilter<"FrameworkFit"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FrameworkFit"> | Date | string
  dailyIdeaId?: Prisma.StringFilter<"FrameworkFit"> | string
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaScalarRelationFilter, Prisma.DailyIdeaWhereInput>
}

export type FrameworkFitOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  jobsToBeDone?: Prisma.SortOrder
  blueOceanFactors?: Prisma.SortOrder
  leanCanvasScore?: Prisma.SortOrder
  designThinkingStage?: Prisma.SortOrder
  innovationDilemmaFit?: Prisma.SortOrder
  crossingChasmStage?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
  dailyIdea?: Prisma.DailyIdeaOrderByWithRelationInput
}

export type FrameworkFitWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  dailyIdeaId?: string
  AND?: Prisma.FrameworkFitWhereInput | Prisma.FrameworkFitWhereInput[]
  OR?: Prisma.FrameworkFitWhereInput[]
  NOT?: Prisma.FrameworkFitWhereInput | Prisma.FrameworkFitWhereInput[]
  jobsToBeDone?: Prisma.StringNullableListFilter<"FrameworkFit">
  blueOceanFactors?: Prisma.JsonFilter<"FrameworkFit">
  leanCanvasScore?: Prisma.IntFilter<"FrameworkFit"> | number
  designThinkingStage?: Prisma.StringFilter<"FrameworkFit"> | string
  innovationDilemmaFit?: Prisma.StringFilter<"FrameworkFit"> | string
  crossingChasmStage?: Prisma.StringFilter<"FrameworkFit"> | string
  createdAt?: Prisma.DateTimeFilter<"FrameworkFit"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FrameworkFit"> | Date | string
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaScalarRelationFilter, Prisma.DailyIdeaWhereInput>
}, "id" | "dailyIdeaId">

export type FrameworkFitOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  jobsToBeDone?: Prisma.SortOrder
  blueOceanFactors?: Prisma.SortOrder
  leanCanvasScore?: Prisma.SortOrder
  designThinkingStage?: Prisma.SortOrder
  innovationDilemmaFit?: Prisma.SortOrder
  crossingChasmStage?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
  _count?: Prisma.FrameworkFitCountOrderByAggregateInput
  _avg?: Prisma.FrameworkFitAvgOrderByAggregateInput
  _max?: Prisma.FrameworkFitMaxOrderByAggregateInput
  _min?: Prisma.FrameworkFitMinOrderByAggregateInput
  _sum?: Prisma.FrameworkFitSumOrderByAggregateInput
}

export type FrameworkFitScalarWhereWithAggregatesInput = {
  AND?: Prisma.FrameworkFitScalarWhereWithAggregatesInput | Prisma.FrameworkFitScalarWhereWithAggregatesInput[]
  OR?: Prisma.FrameworkFitScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FrameworkFitScalarWhereWithAggregatesInput | Prisma.FrameworkFitScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FrameworkFit"> | string
  jobsToBeDone?: Prisma.StringNullableListFilter<"FrameworkFit">
  blueOceanFactors?: Prisma.JsonWithAggregatesFilter<"FrameworkFit">
  leanCanvasScore?: Prisma.IntWithAggregatesFilter<"FrameworkFit"> | number
  designThinkingStage?: Prisma.StringWithAggregatesFilter<"FrameworkFit"> | string
  innovationDilemmaFit?: Prisma.StringWithAggregatesFilter<"FrameworkFit"> | string
  crossingChasmStage?: Prisma.StringWithAggregatesFilter<"FrameworkFit"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"FrameworkFit"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"FrameworkFit"> | Date | string
  dailyIdeaId?: Prisma.StringWithAggregatesFilter<"FrameworkFit"> | string
}

export type FrameworkFitCreateInput = {
  id?: string
  jobsToBeDone?: Prisma.FrameworkFitCreatejobsToBeDoneInput | string[]
  blueOceanFactors: Prisma.JsonNullValueInput | runtime.InputJsonValue
  leanCanvasScore: number
  designThinkingStage: string
  innovationDilemmaFit: string
  crossingChasmStage: string
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdea: Prisma.DailyIdeaCreateNestedOneWithoutFrameworkFitInput
}

export type FrameworkFitUncheckedCreateInput = {
  id?: string
  jobsToBeDone?: Prisma.FrameworkFitCreatejobsToBeDoneInput | string[]
  blueOceanFactors: Prisma.JsonNullValueInput | runtime.InputJsonValue
  leanCanvasScore: number
  designThinkingStage: string
  innovationDilemmaFit: string
  crossingChasmStage: string
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdeaId: string
}

export type FrameworkFitUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobsToBeDone?: Prisma.FrameworkFitUpdatejobsToBeDoneInput | string[]
  blueOceanFactors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  leanCanvasScore?: Prisma.IntFieldUpdateOperationsInput | number
  designThinkingStage?: Prisma.StringFieldUpdateOperationsInput | string
  innovationDilemmaFit?: Prisma.StringFieldUpdateOperationsInput | string
  crossingChasmStage?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdea?: Prisma.DailyIdeaUpdateOneRequiredWithoutFrameworkFitNestedInput
}

export type FrameworkFitUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobsToBeDone?: Prisma.FrameworkFitUpdatejobsToBeDoneInput | string[]
  blueOceanFactors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  leanCanvasScore?: Prisma.IntFieldUpdateOperationsInput | number
  designThinkingStage?: Prisma.StringFieldUpdateOperationsInput | string
  innovationDilemmaFit?: Prisma.StringFieldUpdateOperationsInput | string
  crossingChasmStage?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdeaId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FrameworkFitCreateManyInput = {
  id?: string
  jobsToBeDone?: Prisma.FrameworkFitCreatejobsToBeDoneInput | string[]
  blueOceanFactors: Prisma.JsonNullValueInput | runtime.InputJsonValue
  leanCanvasScore: number
  designThinkingStage: string
  innovationDilemmaFit: string
  crossingChasmStage: string
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdeaId: string
}

export type FrameworkFitUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobsToBeDone?: Prisma.FrameworkFitUpdatejobsToBeDoneInput | string[]
  blueOceanFactors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  leanCanvasScore?: Prisma.IntFieldUpdateOperationsInput | number
  designThinkingStage?: Prisma.StringFieldUpdateOperationsInput | string
  innovationDilemmaFit?: Prisma.StringFieldUpdateOperationsInput | string
  crossingChasmStage?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FrameworkFitUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobsToBeDone?: Prisma.FrameworkFitUpdatejobsToBeDoneInput | string[]
  blueOceanFactors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  leanCanvasScore?: Prisma.IntFieldUpdateOperationsInput | number
  designThinkingStage?: Prisma.StringFieldUpdateOperationsInput | string
  innovationDilemmaFit?: Prisma.StringFieldUpdateOperationsInput | string
  crossingChasmStage?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdeaId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FrameworkFitCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jobsToBeDone?: Prisma.SortOrder
  blueOceanFactors?: Prisma.SortOrder
  leanCanvasScore?: Prisma.SortOrder
  designThinkingStage?: Prisma.SortOrder
  innovationDilemmaFit?: Prisma.SortOrder
  crossingChasmStage?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type FrameworkFitAvgOrderByAggregateInput = {
  leanCanvasScore?: Prisma.SortOrder
}

export type FrameworkFitMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  leanCanvasScore?: Prisma.SortOrder
  designThinkingStage?: Prisma.SortOrder
  innovationDilemmaFit?: Prisma.SortOrder
  crossingChasmStage?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type FrameworkFitMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  leanCanvasScore?: Prisma.SortOrder
  designThinkingStage?: Prisma.SortOrder
  innovationDilemmaFit?: Prisma.SortOrder
  crossingChasmStage?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type FrameworkFitSumOrderByAggregateInput = {
  leanCanvasScore?: Prisma.SortOrder
}

export type FrameworkFitNullableScalarRelationFilter = {
  is?: Prisma.FrameworkFitWhereInput | null
  isNot?: Prisma.FrameworkFitWhereInput | null
}

export type FrameworkFitCreatejobsToBeDoneInput = {
  set: string[]
}

export type FrameworkFitUpdatejobsToBeDoneInput = {
  set?: string[]
  push?: string | string[]
}

export type FrameworkFitCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.FrameworkFitCreateWithoutDailyIdeaInput, Prisma.FrameworkFitUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.FrameworkFitCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.FrameworkFitWhereUniqueInput
}

export type FrameworkFitUncheckedCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.FrameworkFitCreateWithoutDailyIdeaInput, Prisma.FrameworkFitUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.FrameworkFitCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.FrameworkFitWhereUniqueInput
}

export type FrameworkFitUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.FrameworkFitCreateWithoutDailyIdeaInput, Prisma.FrameworkFitUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.FrameworkFitCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.FrameworkFitUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.FrameworkFitWhereInput | boolean
  delete?: Prisma.FrameworkFitWhereInput | boolean
  connect?: Prisma.FrameworkFitWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FrameworkFitUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.FrameworkFitUpdateWithoutDailyIdeaInput>, Prisma.FrameworkFitUncheckedUpdateWithoutDailyIdeaInput>
}

export type FrameworkFitUncheckedUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.FrameworkFitCreateWithoutDailyIdeaInput, Prisma.FrameworkFitUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.FrameworkFitCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.FrameworkFitUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.FrameworkFitWhereInput | boolean
  delete?: Prisma.FrameworkFitWhereInput | boolean
  connect?: Prisma.FrameworkFitWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FrameworkFitUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.FrameworkFitUpdateWithoutDailyIdeaInput>, Prisma.FrameworkFitUncheckedUpdateWithoutDailyIdeaInput>
}

export type FrameworkFitCreateWithoutDailyIdeaInput = {
  id?: string
  jobsToBeDone?: Prisma.FrameworkFitCreatejobsToBeDoneInput | string[]
  blueOceanFactors: Prisma.JsonNullValueInput | runtime.InputJsonValue
  leanCanvasScore: number
  designThinkingStage: string
  innovationDilemmaFit: string
  crossingChasmStage: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FrameworkFitUncheckedCreateWithoutDailyIdeaInput = {
  id?: string
  jobsToBeDone?: Prisma.FrameworkFitCreatejobsToBeDoneInput | string[]
  blueOceanFactors: Prisma.JsonNullValueInput | runtime.InputJsonValue
  leanCanvasScore: number
  designThinkingStage: string
  innovationDilemmaFit: string
  crossingChasmStage: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FrameworkFitCreateOrConnectWithoutDailyIdeaInput = {
  where: Prisma.FrameworkFitWhereUniqueInput
  create: Prisma.XOR<Prisma.FrameworkFitCreateWithoutDailyIdeaInput, Prisma.FrameworkFitUncheckedCreateWithoutDailyIdeaInput>
}

export type FrameworkFitUpsertWithoutDailyIdeaInput = {
  update: Prisma.XOR<Prisma.FrameworkFitUpdateWithoutDailyIdeaInput, Prisma.FrameworkFitUncheckedUpdateWithoutDailyIdeaInput>
  create: Prisma.XOR<Prisma.FrameworkFitCreateWithoutDailyIdeaInput, Prisma.FrameworkFitUncheckedCreateWithoutDailyIdeaInput>
  where?: Prisma.FrameworkFitWhereInput
}

export type FrameworkFitUpdateToOneWithWhereWithoutDailyIdeaInput = {
  where?: Prisma.FrameworkFitWhereInput
  data: Prisma.XOR<Prisma.FrameworkFitUpdateWithoutDailyIdeaInput, Prisma.FrameworkFitUncheckedUpdateWithoutDailyIdeaInput>
}

export type FrameworkFitUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobsToBeDone?: Prisma.FrameworkFitUpdatejobsToBeDoneInput | string[]
  blueOceanFactors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  leanCanvasScore?: Prisma.IntFieldUpdateOperationsInput | number
  designThinkingStage?: Prisma.StringFieldUpdateOperationsInput | string
  innovationDilemmaFit?: Prisma.StringFieldUpdateOperationsInput | string
  crossingChasmStage?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FrameworkFitUncheckedUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobsToBeDone?: Prisma.FrameworkFitUpdatejobsToBeDoneInput | string[]
  blueOceanFactors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  leanCanvasScore?: Prisma.IntFieldUpdateOperationsInput | number
  designThinkingStage?: Prisma.StringFieldUpdateOperationsInput | string
  innovationDilemmaFit?: Prisma.StringFieldUpdateOperationsInput | string
  crossingChasmStage?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type FrameworkFitSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jobsToBeDone?: boolean
  blueOceanFactors?: boolean
  leanCanvasScore?: boolean
  designThinkingStage?: boolean
  innovationDilemmaFit?: boolean
  crossingChasmStage?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["frameworkFit"]>

export type FrameworkFitSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jobsToBeDone?: boolean
  blueOceanFactors?: boolean
  leanCanvasScore?: boolean
  designThinkingStage?: boolean
  innovationDilemmaFit?: boolean
  crossingChasmStage?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["frameworkFit"]>

export type FrameworkFitSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  jobsToBeDone?: boolean
  blueOceanFactors?: boolean
  leanCanvasScore?: boolean
  designThinkingStage?: boolean
  innovationDilemmaFit?: boolean
  crossingChasmStage?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["frameworkFit"]>

export type FrameworkFitSelectScalar = {
  id?: boolean
  jobsToBeDone?: boolean
  blueOceanFactors?: boolean
  leanCanvasScore?: boolean
  designThinkingStage?: boolean
  innovationDilemmaFit?: boolean
  crossingChasmStage?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
}

export type FrameworkFitOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "jobsToBeDone" | "blueOceanFactors" | "leanCanvasScore" | "designThinkingStage" | "innovationDilemmaFit" | "crossingChasmStage" | "createdAt" | "updatedAt" | "dailyIdeaId", ExtArgs["result"]["frameworkFit"]>
export type FrameworkFitInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}
export type FrameworkFitIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}
export type FrameworkFitIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}

export type $FrameworkFitPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FrameworkFit"
  objects: {
    dailyIdea: Prisma.$DailyIdeaPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    jobsToBeDone: string[]
    blueOceanFactors: runtime.JsonValue
    leanCanvasScore: number
    designThinkingStage: string
    innovationDilemmaFit: string
    crossingChasmStage: string
    createdAt: Date
    updatedAt: Date
    dailyIdeaId: string
  }, ExtArgs["result"]["frameworkFit"]>
  composites: {}
}

export type FrameworkFitGetPayload<S extends boolean | null | undefined | FrameworkFitDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FrameworkFitPayload, S>

export type FrameworkFitCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FrameworkFitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FrameworkFitCountAggregateInputType | true
  }

export interface FrameworkFitDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FrameworkFit'], meta: { name: 'FrameworkFit' } }
  /**
   * Find zero or one FrameworkFit that matches the filter.
   * @param {FrameworkFitFindUniqueArgs} args - Arguments to find a FrameworkFit
   * @example
   * // Get one FrameworkFit
   * const frameworkFit = await prisma.frameworkFit.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FrameworkFitFindUniqueArgs>(args: Prisma.SelectSubset<T, FrameworkFitFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FrameworkFitClient<runtime.Types.Result.GetResult<Prisma.$FrameworkFitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FrameworkFit that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FrameworkFitFindUniqueOrThrowArgs} args - Arguments to find a FrameworkFit
   * @example
   * // Get one FrameworkFit
   * const frameworkFit = await prisma.frameworkFit.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FrameworkFitFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FrameworkFitFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FrameworkFitClient<runtime.Types.Result.GetResult<Prisma.$FrameworkFitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FrameworkFit that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FrameworkFitFindFirstArgs} args - Arguments to find a FrameworkFit
   * @example
   * // Get one FrameworkFit
   * const frameworkFit = await prisma.frameworkFit.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FrameworkFitFindFirstArgs>(args?: Prisma.SelectSubset<T, FrameworkFitFindFirstArgs<ExtArgs>>): Prisma.Prisma__FrameworkFitClient<runtime.Types.Result.GetResult<Prisma.$FrameworkFitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FrameworkFit that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FrameworkFitFindFirstOrThrowArgs} args - Arguments to find a FrameworkFit
   * @example
   * // Get one FrameworkFit
   * const frameworkFit = await prisma.frameworkFit.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FrameworkFitFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FrameworkFitFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FrameworkFitClient<runtime.Types.Result.GetResult<Prisma.$FrameworkFitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FrameworkFits that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FrameworkFitFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FrameworkFits
   * const frameworkFits = await prisma.frameworkFit.findMany()
   * 
   * // Get first 10 FrameworkFits
   * const frameworkFits = await prisma.frameworkFit.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const frameworkFitWithIdOnly = await prisma.frameworkFit.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FrameworkFitFindManyArgs>(args?: Prisma.SelectSubset<T, FrameworkFitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FrameworkFitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FrameworkFit.
   * @param {FrameworkFitCreateArgs} args - Arguments to create a FrameworkFit.
   * @example
   * // Create one FrameworkFit
   * const FrameworkFit = await prisma.frameworkFit.create({
   *   data: {
   *     // ... data to create a FrameworkFit
   *   }
   * })
   * 
   */
  create<T extends FrameworkFitCreateArgs>(args: Prisma.SelectSubset<T, FrameworkFitCreateArgs<ExtArgs>>): Prisma.Prisma__FrameworkFitClient<runtime.Types.Result.GetResult<Prisma.$FrameworkFitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FrameworkFits.
   * @param {FrameworkFitCreateManyArgs} args - Arguments to create many FrameworkFits.
   * @example
   * // Create many FrameworkFits
   * const frameworkFit = await prisma.frameworkFit.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FrameworkFitCreateManyArgs>(args?: Prisma.SelectSubset<T, FrameworkFitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FrameworkFits and returns the data saved in the database.
   * @param {FrameworkFitCreateManyAndReturnArgs} args - Arguments to create many FrameworkFits.
   * @example
   * // Create many FrameworkFits
   * const frameworkFit = await prisma.frameworkFit.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FrameworkFits and only return the `id`
   * const frameworkFitWithIdOnly = await prisma.frameworkFit.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FrameworkFitCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FrameworkFitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FrameworkFitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FrameworkFit.
   * @param {FrameworkFitDeleteArgs} args - Arguments to delete one FrameworkFit.
   * @example
   * // Delete one FrameworkFit
   * const FrameworkFit = await prisma.frameworkFit.delete({
   *   where: {
   *     // ... filter to delete one FrameworkFit
   *   }
   * })
   * 
   */
  delete<T extends FrameworkFitDeleteArgs>(args: Prisma.SelectSubset<T, FrameworkFitDeleteArgs<ExtArgs>>): Prisma.Prisma__FrameworkFitClient<runtime.Types.Result.GetResult<Prisma.$FrameworkFitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FrameworkFit.
   * @param {FrameworkFitUpdateArgs} args - Arguments to update one FrameworkFit.
   * @example
   * // Update one FrameworkFit
   * const frameworkFit = await prisma.frameworkFit.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FrameworkFitUpdateArgs>(args: Prisma.SelectSubset<T, FrameworkFitUpdateArgs<ExtArgs>>): Prisma.Prisma__FrameworkFitClient<runtime.Types.Result.GetResult<Prisma.$FrameworkFitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FrameworkFits.
   * @param {FrameworkFitDeleteManyArgs} args - Arguments to filter FrameworkFits to delete.
   * @example
   * // Delete a few FrameworkFits
   * const { count } = await prisma.frameworkFit.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FrameworkFitDeleteManyArgs>(args?: Prisma.SelectSubset<T, FrameworkFitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FrameworkFits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FrameworkFitUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FrameworkFits
   * const frameworkFit = await prisma.frameworkFit.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FrameworkFitUpdateManyArgs>(args: Prisma.SelectSubset<T, FrameworkFitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FrameworkFits and returns the data updated in the database.
   * @param {FrameworkFitUpdateManyAndReturnArgs} args - Arguments to update many FrameworkFits.
   * @example
   * // Update many FrameworkFits
   * const frameworkFit = await prisma.frameworkFit.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FrameworkFits and only return the `id`
   * const frameworkFitWithIdOnly = await prisma.frameworkFit.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FrameworkFitUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FrameworkFitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FrameworkFitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FrameworkFit.
   * @param {FrameworkFitUpsertArgs} args - Arguments to update or create a FrameworkFit.
   * @example
   * // Update or create a FrameworkFit
   * const frameworkFit = await prisma.frameworkFit.upsert({
   *   create: {
   *     // ... data to create a FrameworkFit
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FrameworkFit we want to update
   *   }
   * })
   */
  upsert<T extends FrameworkFitUpsertArgs>(args: Prisma.SelectSubset<T, FrameworkFitUpsertArgs<ExtArgs>>): Prisma.Prisma__FrameworkFitClient<runtime.Types.Result.GetResult<Prisma.$FrameworkFitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FrameworkFits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FrameworkFitCountArgs} args - Arguments to filter FrameworkFits to count.
   * @example
   * // Count the number of FrameworkFits
   * const count = await prisma.frameworkFit.count({
   *   where: {
   *     // ... the filter for the FrameworkFits we want to count
   *   }
   * })
  **/
  count<T extends FrameworkFitCountArgs>(
    args?: Prisma.Subset<T, FrameworkFitCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FrameworkFitCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FrameworkFit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FrameworkFitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FrameworkFitAggregateArgs>(args: Prisma.Subset<T, FrameworkFitAggregateArgs>): Prisma.PrismaPromise<GetFrameworkFitAggregateType<T>>

  /**
   * Group by FrameworkFit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FrameworkFitGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FrameworkFitGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FrameworkFitGroupByArgs['orderBy'] }
      : { orderBy?: FrameworkFitGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FrameworkFitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFrameworkFitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FrameworkFit model
 */
readonly fields: FrameworkFitFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FrameworkFit.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FrameworkFitClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  dailyIdea<T extends Prisma.DailyIdeaDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdeaDefaultArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FrameworkFit model
 */
export interface FrameworkFitFieldRefs {
  readonly id: Prisma.FieldRef<"FrameworkFit", 'String'>
  readonly jobsToBeDone: Prisma.FieldRef<"FrameworkFit", 'String[]'>
  readonly blueOceanFactors: Prisma.FieldRef<"FrameworkFit", 'Json'>
  readonly leanCanvasScore: Prisma.FieldRef<"FrameworkFit", 'Int'>
  readonly designThinkingStage: Prisma.FieldRef<"FrameworkFit", 'String'>
  readonly innovationDilemmaFit: Prisma.FieldRef<"FrameworkFit", 'String'>
  readonly crossingChasmStage: Prisma.FieldRef<"FrameworkFit", 'String'>
  readonly createdAt: Prisma.FieldRef<"FrameworkFit", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"FrameworkFit", 'DateTime'>
  readonly dailyIdeaId: Prisma.FieldRef<"FrameworkFit", 'String'>
}
    

// Custom InputTypes
/**
 * FrameworkFit findUnique
 */
export type FrameworkFitFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FrameworkFit
   */
  select?: Prisma.FrameworkFitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FrameworkFit
   */
  omit?: Prisma.FrameworkFitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FrameworkFitInclude<ExtArgs> | null
  /**
   * Filter, which FrameworkFit to fetch.
   */
  where: Prisma.FrameworkFitWhereUniqueInput
}

/**
 * FrameworkFit findUniqueOrThrow
 */
export type FrameworkFitFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FrameworkFit
   */
  select?: Prisma.FrameworkFitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FrameworkFit
   */
  omit?: Prisma.FrameworkFitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FrameworkFitInclude<ExtArgs> | null
  /**
   * Filter, which FrameworkFit to fetch.
   */
  where: Prisma.FrameworkFitWhereUniqueInput
}

/**
 * FrameworkFit findFirst
 */
export type FrameworkFitFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FrameworkFit
   */
  select?: Prisma.FrameworkFitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FrameworkFit
   */
  omit?: Prisma.FrameworkFitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FrameworkFitInclude<ExtArgs> | null
  /**
   * Filter, which FrameworkFit to fetch.
   */
  where?: Prisma.FrameworkFitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FrameworkFits to fetch.
   */
  orderBy?: Prisma.FrameworkFitOrderByWithRelationInput | Prisma.FrameworkFitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FrameworkFits.
   */
  cursor?: Prisma.FrameworkFitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FrameworkFits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FrameworkFits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FrameworkFits.
   */
  distinct?: Prisma.FrameworkFitScalarFieldEnum | Prisma.FrameworkFitScalarFieldEnum[]
}

/**
 * FrameworkFit findFirstOrThrow
 */
export type FrameworkFitFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FrameworkFit
   */
  select?: Prisma.FrameworkFitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FrameworkFit
   */
  omit?: Prisma.FrameworkFitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FrameworkFitInclude<ExtArgs> | null
  /**
   * Filter, which FrameworkFit to fetch.
   */
  where?: Prisma.FrameworkFitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FrameworkFits to fetch.
   */
  orderBy?: Prisma.FrameworkFitOrderByWithRelationInput | Prisma.FrameworkFitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FrameworkFits.
   */
  cursor?: Prisma.FrameworkFitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FrameworkFits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FrameworkFits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FrameworkFits.
   */
  distinct?: Prisma.FrameworkFitScalarFieldEnum | Prisma.FrameworkFitScalarFieldEnum[]
}

/**
 * FrameworkFit findMany
 */
export type FrameworkFitFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FrameworkFit
   */
  select?: Prisma.FrameworkFitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FrameworkFit
   */
  omit?: Prisma.FrameworkFitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FrameworkFitInclude<ExtArgs> | null
  /**
   * Filter, which FrameworkFits to fetch.
   */
  where?: Prisma.FrameworkFitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FrameworkFits to fetch.
   */
  orderBy?: Prisma.FrameworkFitOrderByWithRelationInput | Prisma.FrameworkFitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FrameworkFits.
   */
  cursor?: Prisma.FrameworkFitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FrameworkFits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FrameworkFits.
   */
  skip?: number
  distinct?: Prisma.FrameworkFitScalarFieldEnum | Prisma.FrameworkFitScalarFieldEnum[]
}

/**
 * FrameworkFit create
 */
export type FrameworkFitCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FrameworkFit
   */
  select?: Prisma.FrameworkFitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FrameworkFit
   */
  omit?: Prisma.FrameworkFitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FrameworkFitInclude<ExtArgs> | null
  /**
   * The data needed to create a FrameworkFit.
   */
  data: Prisma.XOR<Prisma.FrameworkFitCreateInput, Prisma.FrameworkFitUncheckedCreateInput>
}

/**
 * FrameworkFit createMany
 */
export type FrameworkFitCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FrameworkFits.
   */
  data: Prisma.FrameworkFitCreateManyInput | Prisma.FrameworkFitCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FrameworkFit createManyAndReturn
 */
export type FrameworkFitCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FrameworkFit
   */
  select?: Prisma.FrameworkFitSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FrameworkFit
   */
  omit?: Prisma.FrameworkFitOmit<ExtArgs> | null
  /**
   * The data used to create many FrameworkFits.
   */
  data: Prisma.FrameworkFitCreateManyInput | Prisma.FrameworkFitCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FrameworkFitIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FrameworkFit update
 */
export type FrameworkFitUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FrameworkFit
   */
  select?: Prisma.FrameworkFitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FrameworkFit
   */
  omit?: Prisma.FrameworkFitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FrameworkFitInclude<ExtArgs> | null
  /**
   * The data needed to update a FrameworkFit.
   */
  data: Prisma.XOR<Prisma.FrameworkFitUpdateInput, Prisma.FrameworkFitUncheckedUpdateInput>
  /**
   * Choose, which FrameworkFit to update.
   */
  where: Prisma.FrameworkFitWhereUniqueInput
}

/**
 * FrameworkFit updateMany
 */
export type FrameworkFitUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FrameworkFits.
   */
  data: Prisma.XOR<Prisma.FrameworkFitUpdateManyMutationInput, Prisma.FrameworkFitUncheckedUpdateManyInput>
  /**
   * Filter which FrameworkFits to update
   */
  where?: Prisma.FrameworkFitWhereInput
  /**
   * Limit how many FrameworkFits to update.
   */
  limit?: number
}

/**
 * FrameworkFit updateManyAndReturn
 */
export type FrameworkFitUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FrameworkFit
   */
  select?: Prisma.FrameworkFitSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FrameworkFit
   */
  omit?: Prisma.FrameworkFitOmit<ExtArgs> | null
  /**
   * The data used to update FrameworkFits.
   */
  data: Prisma.XOR<Prisma.FrameworkFitUpdateManyMutationInput, Prisma.FrameworkFitUncheckedUpdateManyInput>
  /**
   * Filter which FrameworkFits to update
   */
  where?: Prisma.FrameworkFitWhereInput
  /**
   * Limit how many FrameworkFits to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FrameworkFitIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FrameworkFit upsert
 */
export type FrameworkFitUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FrameworkFit
   */
  select?: Prisma.FrameworkFitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FrameworkFit
   */
  omit?: Prisma.FrameworkFitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FrameworkFitInclude<ExtArgs> | null
  /**
   * The filter to search for the FrameworkFit to update in case it exists.
   */
  where: Prisma.FrameworkFitWhereUniqueInput
  /**
   * In case the FrameworkFit found by the `where` argument doesn't exist, create a new FrameworkFit with this data.
   */
  create: Prisma.XOR<Prisma.FrameworkFitCreateInput, Prisma.FrameworkFitUncheckedCreateInput>
  /**
   * In case the FrameworkFit was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FrameworkFitUpdateInput, Prisma.FrameworkFitUncheckedUpdateInput>
}

/**
 * FrameworkFit delete
 */
export type FrameworkFitDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FrameworkFit
   */
  select?: Prisma.FrameworkFitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FrameworkFit
   */
  omit?: Prisma.FrameworkFitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FrameworkFitInclude<ExtArgs> | null
  /**
   * Filter which FrameworkFit to delete.
   */
  where: Prisma.FrameworkFitWhereUniqueInput
}

/**
 * FrameworkFit deleteMany
 */
export type FrameworkFitDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FrameworkFits to delete
   */
  where?: Prisma.FrameworkFitWhereInput
  /**
   * Limit how many FrameworkFits to delete.
   */
  limit?: number
}

/**
 * FrameworkFit without action
 */
export type FrameworkFitDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FrameworkFit
   */
  select?: Prisma.FrameworkFitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FrameworkFit
   */
  omit?: Prisma.FrameworkFitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FrameworkFitInclude<ExtArgs> | null
}
