
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TractionSignals` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TractionSignals
 * 
 */
export type TractionSignalsModel = runtime.Types.Result.DefaultSelection<Prisma.$TractionSignalsPayload>

export type AggregateTractionSignals = {
  _count: TractionSignalsCountAggregateOutputType | null
  _avg: TractionSignalsAvgAggregateOutputType | null
  _sum: TractionSignalsSumAggregateOutputType | null
  _min: TractionSignalsMinAggregateOutputType | null
  _max: TractionSignalsMaxAggregateOutputType | null
}

export type TractionSignalsAvgAggregateOutputType = {
  waitlistCount: number | null
  socialMentions: number | null
  searchVolume: number | null
  competitorFunding: number | null
  patentActivity: number | null
  mediaAttention: number | null
}

export type TractionSignalsSumAggregateOutputType = {
  waitlistCount: number | null
  socialMentions: number | null
  searchVolume: number | null
  competitorFunding: number | null
  patentActivity: number | null
  mediaAttention: number | null
}

export type TractionSignalsMinAggregateOutputType = {
  id: string | null
  waitlistCount: number | null
  socialMentions: number | null
  searchVolume: number | null
  competitorFunding: number | null
  patentActivity: number | null
  mediaAttention: number | null
  createdAt: Date | null
  updatedAt: Date | null
  dailyIdeaId: string | null
}

export type TractionSignalsMaxAggregateOutputType = {
  id: string | null
  waitlistCount: number | null
  socialMentions: number | null
  searchVolume: number | null
  competitorFunding: number | null
  patentActivity: number | null
  mediaAttention: number | null
  createdAt: Date | null
  updatedAt: Date | null
  dailyIdeaId: string | null
}

export type TractionSignalsCountAggregateOutputType = {
  id: number
  waitlistCount: number
  socialMentions: number
  searchVolume: number
  competitorFunding: number
  patentActivity: number
  regulatoryChanges: number
  mediaAttention: number
  expertEndorsements: number
  earlyAdopterSignals: number
  createdAt: number
  updatedAt: number
  dailyIdeaId: number
  _all: number
}


export type TractionSignalsAvgAggregateInputType = {
  waitlistCount?: true
  socialMentions?: true
  searchVolume?: true
  competitorFunding?: true
  patentActivity?: true
  mediaAttention?: true
}

export type TractionSignalsSumAggregateInputType = {
  waitlistCount?: true
  socialMentions?: true
  searchVolume?: true
  competitorFunding?: true
  patentActivity?: true
  mediaAttention?: true
}

export type TractionSignalsMinAggregateInputType = {
  id?: true
  waitlistCount?: true
  socialMentions?: true
  searchVolume?: true
  competitorFunding?: true
  patentActivity?: true
  mediaAttention?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
}

export type TractionSignalsMaxAggregateInputType = {
  id?: true
  waitlistCount?: true
  socialMentions?: true
  searchVolume?: true
  competitorFunding?: true
  patentActivity?: true
  mediaAttention?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
}

export type TractionSignalsCountAggregateInputType = {
  id?: true
  waitlistCount?: true
  socialMentions?: true
  searchVolume?: true
  competitorFunding?: true
  patentActivity?: true
  regulatoryChanges?: true
  mediaAttention?: true
  expertEndorsements?: true
  earlyAdopterSignals?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
  _all?: true
}

export type TractionSignalsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TractionSignals to aggregate.
   */
  where?: Prisma.TractionSignalsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TractionSignals to fetch.
   */
  orderBy?: Prisma.TractionSignalsOrderByWithRelationInput | Prisma.TractionSignalsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TractionSignalsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TractionSignals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TractionSignals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TractionSignals
  **/
  _count?: true | TractionSignalsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TractionSignalsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TractionSignalsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TractionSignalsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TractionSignalsMaxAggregateInputType
}

export type GetTractionSignalsAggregateType<T extends TractionSignalsAggregateArgs> = {
      [P in keyof T & keyof AggregateTractionSignals]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTractionSignals[P]>
    : Prisma.GetScalarType<T[P], AggregateTractionSignals[P]>
}




export type TractionSignalsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TractionSignalsWhereInput
  orderBy?: Prisma.TractionSignalsOrderByWithAggregationInput | Prisma.TractionSignalsOrderByWithAggregationInput[]
  by: Prisma.TractionSignalsScalarFieldEnum[] | Prisma.TractionSignalsScalarFieldEnum
  having?: Prisma.TractionSignalsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TractionSignalsCountAggregateInputType | true
  _avg?: TractionSignalsAvgAggregateInputType
  _sum?: TractionSignalsSumAggregateInputType
  _min?: TractionSignalsMinAggregateInputType
  _max?: TractionSignalsMaxAggregateInputType
}

export type TractionSignalsGroupByOutputType = {
  id: string
  waitlistCount: number | null
  socialMentions: number | null
  searchVolume: number | null
  competitorFunding: number | null
  patentActivity: number | null
  regulatoryChanges: string[]
  mediaAttention: number | null
  expertEndorsements: string[]
  earlyAdopterSignals: string[]
  createdAt: Date
  updatedAt: Date
  dailyIdeaId: string
  _count: TractionSignalsCountAggregateOutputType | null
  _avg: TractionSignalsAvgAggregateOutputType | null
  _sum: TractionSignalsSumAggregateOutputType | null
  _min: TractionSignalsMinAggregateOutputType | null
  _max: TractionSignalsMaxAggregateOutputType | null
}

type GetTractionSignalsGroupByPayload<T extends TractionSignalsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TractionSignalsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TractionSignalsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TractionSignalsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TractionSignalsGroupByOutputType[P]>
      }
    >
  > 



export type TractionSignalsWhereInput = {
  AND?: Prisma.TractionSignalsWhereInput | Prisma.TractionSignalsWhereInput[]
  OR?: Prisma.TractionSignalsWhereInput[]
  NOT?: Prisma.TractionSignalsWhereInput | Prisma.TractionSignalsWhereInput[]
  id?: Prisma.StringFilter<"TractionSignals"> | string
  waitlistCount?: Prisma.IntNullableFilter<"TractionSignals"> | number | null
  socialMentions?: Prisma.IntNullableFilter<"TractionSignals"> | number | null
  searchVolume?: Prisma.IntNullableFilter<"TractionSignals"> | number | null
  competitorFunding?: Prisma.FloatNullableFilter<"TractionSignals"> | number | null
  patentActivity?: Prisma.IntNullableFilter<"TractionSignals"> | number | null
  regulatoryChanges?: Prisma.StringNullableListFilter<"TractionSignals">
  mediaAttention?: Prisma.IntNullableFilter<"TractionSignals"> | number | null
  expertEndorsements?: Prisma.StringNullableListFilter<"TractionSignals">
  earlyAdopterSignals?: Prisma.StringNullableListFilter<"TractionSignals">
  createdAt?: Prisma.DateTimeFilter<"TractionSignals"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TractionSignals"> | Date | string
  dailyIdeaId?: Prisma.StringFilter<"TractionSignals"> | string
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaScalarRelationFilter, Prisma.DailyIdeaWhereInput>
}

export type TractionSignalsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  waitlistCount?: Prisma.SortOrderInput | Prisma.SortOrder
  socialMentions?: Prisma.SortOrderInput | Prisma.SortOrder
  searchVolume?: Prisma.SortOrderInput | Prisma.SortOrder
  competitorFunding?: Prisma.SortOrderInput | Prisma.SortOrder
  patentActivity?: Prisma.SortOrderInput | Prisma.SortOrder
  regulatoryChanges?: Prisma.SortOrder
  mediaAttention?: Prisma.SortOrderInput | Prisma.SortOrder
  expertEndorsements?: Prisma.SortOrder
  earlyAdopterSignals?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
  dailyIdea?: Prisma.DailyIdeaOrderByWithRelationInput
}

export type TractionSignalsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  dailyIdeaId?: string
  AND?: Prisma.TractionSignalsWhereInput | Prisma.TractionSignalsWhereInput[]
  OR?: Prisma.TractionSignalsWhereInput[]
  NOT?: Prisma.TractionSignalsWhereInput | Prisma.TractionSignalsWhereInput[]
  waitlistCount?: Prisma.IntNullableFilter<"TractionSignals"> | number | null
  socialMentions?: Prisma.IntNullableFilter<"TractionSignals"> | number | null
  searchVolume?: Prisma.IntNullableFilter<"TractionSignals"> | number | null
  competitorFunding?: Prisma.FloatNullableFilter<"TractionSignals"> | number | null
  patentActivity?: Prisma.IntNullableFilter<"TractionSignals"> | number | null
  regulatoryChanges?: Prisma.StringNullableListFilter<"TractionSignals">
  mediaAttention?: Prisma.IntNullableFilter<"TractionSignals"> | number | null
  expertEndorsements?: Prisma.StringNullableListFilter<"TractionSignals">
  earlyAdopterSignals?: Prisma.StringNullableListFilter<"TractionSignals">
  createdAt?: Prisma.DateTimeFilter<"TractionSignals"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TractionSignals"> | Date | string
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaScalarRelationFilter, Prisma.DailyIdeaWhereInput>
}, "id" | "dailyIdeaId">

export type TractionSignalsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  waitlistCount?: Prisma.SortOrderInput | Prisma.SortOrder
  socialMentions?: Prisma.SortOrderInput | Prisma.SortOrder
  searchVolume?: Prisma.SortOrderInput | Prisma.SortOrder
  competitorFunding?: Prisma.SortOrderInput | Prisma.SortOrder
  patentActivity?: Prisma.SortOrderInput | Prisma.SortOrder
  regulatoryChanges?: Prisma.SortOrder
  mediaAttention?: Prisma.SortOrderInput | Prisma.SortOrder
  expertEndorsements?: Prisma.SortOrder
  earlyAdopterSignals?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
  _count?: Prisma.TractionSignalsCountOrderByAggregateInput
  _avg?: Prisma.TractionSignalsAvgOrderByAggregateInput
  _max?: Prisma.TractionSignalsMaxOrderByAggregateInput
  _min?: Prisma.TractionSignalsMinOrderByAggregateInput
  _sum?: Prisma.TractionSignalsSumOrderByAggregateInput
}

export type TractionSignalsScalarWhereWithAggregatesInput = {
  AND?: Prisma.TractionSignalsScalarWhereWithAggregatesInput | Prisma.TractionSignalsScalarWhereWithAggregatesInput[]
  OR?: Prisma.TractionSignalsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TractionSignalsScalarWhereWithAggregatesInput | Prisma.TractionSignalsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TractionSignals"> | string
  waitlistCount?: Prisma.IntNullableWithAggregatesFilter<"TractionSignals"> | number | null
  socialMentions?: Prisma.IntNullableWithAggregatesFilter<"TractionSignals"> | number | null
  searchVolume?: Prisma.IntNullableWithAggregatesFilter<"TractionSignals"> | number | null
  competitorFunding?: Prisma.FloatNullableWithAggregatesFilter<"TractionSignals"> | number | null
  patentActivity?: Prisma.IntNullableWithAggregatesFilter<"TractionSignals"> | number | null
  regulatoryChanges?: Prisma.StringNullableListFilter<"TractionSignals">
  mediaAttention?: Prisma.IntNullableWithAggregatesFilter<"TractionSignals"> | number | null
  expertEndorsements?: Prisma.StringNullableListFilter<"TractionSignals">
  earlyAdopterSignals?: Prisma.StringNullableListFilter<"TractionSignals">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TractionSignals"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TractionSignals"> | Date | string
  dailyIdeaId?: Prisma.StringWithAggregatesFilter<"TractionSignals"> | string
}

export type TractionSignalsCreateInput = {
  id?: string
  waitlistCount?: number | null
  socialMentions?: number | null
  searchVolume?: number | null
  competitorFunding?: number | null
  patentActivity?: number | null
  regulatoryChanges?: Prisma.TractionSignalsCreateregulatoryChangesInput | string[]
  mediaAttention?: number | null
  expertEndorsements?: Prisma.TractionSignalsCreateexpertEndorsementsInput | string[]
  earlyAdopterSignals?: Prisma.TractionSignalsCreateearlyAdopterSignalsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdea: Prisma.DailyIdeaCreateNestedOneWithoutTractionSignalsInput
}

export type TractionSignalsUncheckedCreateInput = {
  id?: string
  waitlistCount?: number | null
  socialMentions?: number | null
  searchVolume?: number | null
  competitorFunding?: number | null
  patentActivity?: number | null
  regulatoryChanges?: Prisma.TractionSignalsCreateregulatoryChangesInput | string[]
  mediaAttention?: number | null
  expertEndorsements?: Prisma.TractionSignalsCreateexpertEndorsementsInput | string[]
  earlyAdopterSignals?: Prisma.TractionSignalsCreateearlyAdopterSignalsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdeaId: string
}

export type TractionSignalsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  waitlistCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  socialMentions?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  searchVolume?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  competitorFunding?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  patentActivity?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  regulatoryChanges?: Prisma.TractionSignalsUpdateregulatoryChangesInput | string[]
  mediaAttention?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expertEndorsements?: Prisma.TractionSignalsUpdateexpertEndorsementsInput | string[]
  earlyAdopterSignals?: Prisma.TractionSignalsUpdateearlyAdopterSignalsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdea?: Prisma.DailyIdeaUpdateOneRequiredWithoutTractionSignalsNestedInput
}

export type TractionSignalsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  waitlistCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  socialMentions?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  searchVolume?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  competitorFunding?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  patentActivity?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  regulatoryChanges?: Prisma.TractionSignalsUpdateregulatoryChangesInput | string[]
  mediaAttention?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expertEndorsements?: Prisma.TractionSignalsUpdateexpertEndorsementsInput | string[]
  earlyAdopterSignals?: Prisma.TractionSignalsUpdateearlyAdopterSignalsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdeaId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TractionSignalsCreateManyInput = {
  id?: string
  waitlistCount?: number | null
  socialMentions?: number | null
  searchVolume?: number | null
  competitorFunding?: number | null
  patentActivity?: number | null
  regulatoryChanges?: Prisma.TractionSignalsCreateregulatoryChangesInput | string[]
  mediaAttention?: number | null
  expertEndorsements?: Prisma.TractionSignalsCreateexpertEndorsementsInput | string[]
  earlyAdopterSignals?: Prisma.TractionSignalsCreateearlyAdopterSignalsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdeaId: string
}

export type TractionSignalsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  waitlistCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  socialMentions?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  searchVolume?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  competitorFunding?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  patentActivity?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  regulatoryChanges?: Prisma.TractionSignalsUpdateregulatoryChangesInput | string[]
  mediaAttention?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expertEndorsements?: Prisma.TractionSignalsUpdateexpertEndorsementsInput | string[]
  earlyAdopterSignals?: Prisma.TractionSignalsUpdateearlyAdopterSignalsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TractionSignalsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  waitlistCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  socialMentions?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  searchVolume?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  competitorFunding?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  patentActivity?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  regulatoryChanges?: Prisma.TractionSignalsUpdateregulatoryChangesInput | string[]
  mediaAttention?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expertEndorsements?: Prisma.TractionSignalsUpdateexpertEndorsementsInput | string[]
  earlyAdopterSignals?: Prisma.TractionSignalsUpdateearlyAdopterSignalsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdeaId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TractionSignalsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  waitlistCount?: Prisma.SortOrder
  socialMentions?: Prisma.SortOrder
  searchVolume?: Prisma.SortOrder
  competitorFunding?: Prisma.SortOrder
  patentActivity?: Prisma.SortOrder
  regulatoryChanges?: Prisma.SortOrder
  mediaAttention?: Prisma.SortOrder
  expertEndorsements?: Prisma.SortOrder
  earlyAdopterSignals?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type TractionSignalsAvgOrderByAggregateInput = {
  waitlistCount?: Prisma.SortOrder
  socialMentions?: Prisma.SortOrder
  searchVolume?: Prisma.SortOrder
  competitorFunding?: Prisma.SortOrder
  patentActivity?: Prisma.SortOrder
  mediaAttention?: Prisma.SortOrder
}

export type TractionSignalsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  waitlistCount?: Prisma.SortOrder
  socialMentions?: Prisma.SortOrder
  searchVolume?: Prisma.SortOrder
  competitorFunding?: Prisma.SortOrder
  patentActivity?: Prisma.SortOrder
  mediaAttention?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type TractionSignalsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  waitlistCount?: Prisma.SortOrder
  socialMentions?: Prisma.SortOrder
  searchVolume?: Prisma.SortOrder
  competitorFunding?: Prisma.SortOrder
  patentActivity?: Prisma.SortOrder
  mediaAttention?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type TractionSignalsSumOrderByAggregateInput = {
  waitlistCount?: Prisma.SortOrder
  socialMentions?: Prisma.SortOrder
  searchVolume?: Prisma.SortOrder
  competitorFunding?: Prisma.SortOrder
  patentActivity?: Prisma.SortOrder
  mediaAttention?: Prisma.SortOrder
}

export type TractionSignalsNullableScalarRelationFilter = {
  is?: Prisma.TractionSignalsWhereInput | null
  isNot?: Prisma.TractionSignalsWhereInput | null
}

export type TractionSignalsCreateregulatoryChangesInput = {
  set: string[]
}

export type TractionSignalsCreateexpertEndorsementsInput = {
  set: string[]
}

export type TractionSignalsCreateearlyAdopterSignalsInput = {
  set: string[]
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type TractionSignalsUpdateregulatoryChangesInput = {
  set?: string[]
  push?: string | string[]
}

export type TractionSignalsUpdateexpertEndorsementsInput = {
  set?: string[]
  push?: string | string[]
}

export type TractionSignalsUpdateearlyAdopterSignalsInput = {
  set?: string[]
  push?: string | string[]
}

export type TractionSignalsCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.TractionSignalsCreateWithoutDailyIdeaInput, Prisma.TractionSignalsUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.TractionSignalsCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.TractionSignalsWhereUniqueInput
}

export type TractionSignalsUncheckedCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.TractionSignalsCreateWithoutDailyIdeaInput, Prisma.TractionSignalsUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.TractionSignalsCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.TractionSignalsWhereUniqueInput
}

export type TractionSignalsUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.TractionSignalsCreateWithoutDailyIdeaInput, Prisma.TractionSignalsUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.TractionSignalsCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.TractionSignalsUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.TractionSignalsWhereInput | boolean
  delete?: Prisma.TractionSignalsWhereInput | boolean
  connect?: Prisma.TractionSignalsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TractionSignalsUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.TractionSignalsUpdateWithoutDailyIdeaInput>, Prisma.TractionSignalsUncheckedUpdateWithoutDailyIdeaInput>
}

export type TractionSignalsUncheckedUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.TractionSignalsCreateWithoutDailyIdeaInput, Prisma.TractionSignalsUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.TractionSignalsCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.TractionSignalsUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.TractionSignalsWhereInput | boolean
  delete?: Prisma.TractionSignalsWhereInput | boolean
  connect?: Prisma.TractionSignalsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TractionSignalsUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.TractionSignalsUpdateWithoutDailyIdeaInput>, Prisma.TractionSignalsUncheckedUpdateWithoutDailyIdeaInput>
}

export type TractionSignalsCreateWithoutDailyIdeaInput = {
  id?: string
  waitlistCount?: number | null
  socialMentions?: number | null
  searchVolume?: number | null
  competitorFunding?: number | null
  patentActivity?: number | null
  regulatoryChanges?: Prisma.TractionSignalsCreateregulatoryChangesInput | string[]
  mediaAttention?: number | null
  expertEndorsements?: Prisma.TractionSignalsCreateexpertEndorsementsInput | string[]
  earlyAdopterSignals?: Prisma.TractionSignalsCreateearlyAdopterSignalsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TractionSignalsUncheckedCreateWithoutDailyIdeaInput = {
  id?: string
  waitlistCount?: number | null
  socialMentions?: number | null
  searchVolume?: number | null
  competitorFunding?: number | null
  patentActivity?: number | null
  regulatoryChanges?: Prisma.TractionSignalsCreateregulatoryChangesInput | string[]
  mediaAttention?: number | null
  expertEndorsements?: Prisma.TractionSignalsCreateexpertEndorsementsInput | string[]
  earlyAdopterSignals?: Prisma.TractionSignalsCreateearlyAdopterSignalsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TractionSignalsCreateOrConnectWithoutDailyIdeaInput = {
  where: Prisma.TractionSignalsWhereUniqueInput
  create: Prisma.XOR<Prisma.TractionSignalsCreateWithoutDailyIdeaInput, Prisma.TractionSignalsUncheckedCreateWithoutDailyIdeaInput>
}

export type TractionSignalsUpsertWithoutDailyIdeaInput = {
  update: Prisma.XOR<Prisma.TractionSignalsUpdateWithoutDailyIdeaInput, Prisma.TractionSignalsUncheckedUpdateWithoutDailyIdeaInput>
  create: Prisma.XOR<Prisma.TractionSignalsCreateWithoutDailyIdeaInput, Prisma.TractionSignalsUncheckedCreateWithoutDailyIdeaInput>
  where?: Prisma.TractionSignalsWhereInput
}

export type TractionSignalsUpdateToOneWithWhereWithoutDailyIdeaInput = {
  where?: Prisma.TractionSignalsWhereInput
  data: Prisma.XOR<Prisma.TractionSignalsUpdateWithoutDailyIdeaInput, Prisma.TractionSignalsUncheckedUpdateWithoutDailyIdeaInput>
}

export type TractionSignalsUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  waitlistCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  socialMentions?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  searchVolume?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  competitorFunding?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  patentActivity?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  regulatoryChanges?: Prisma.TractionSignalsUpdateregulatoryChangesInput | string[]
  mediaAttention?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expertEndorsements?: Prisma.TractionSignalsUpdateexpertEndorsementsInput | string[]
  earlyAdopterSignals?: Prisma.TractionSignalsUpdateearlyAdopterSignalsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TractionSignalsUncheckedUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  waitlistCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  socialMentions?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  searchVolume?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  competitorFunding?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  patentActivity?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  regulatoryChanges?: Prisma.TractionSignalsUpdateregulatoryChangesInput | string[]
  mediaAttention?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expertEndorsements?: Prisma.TractionSignalsUpdateexpertEndorsementsInput | string[]
  earlyAdopterSignals?: Prisma.TractionSignalsUpdateearlyAdopterSignalsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TractionSignalsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  waitlistCount?: boolean
  socialMentions?: boolean
  searchVolume?: boolean
  competitorFunding?: boolean
  patentActivity?: boolean
  regulatoryChanges?: boolean
  mediaAttention?: boolean
  expertEndorsements?: boolean
  earlyAdopterSignals?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tractionSignals"]>

export type TractionSignalsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  waitlistCount?: boolean
  socialMentions?: boolean
  searchVolume?: boolean
  competitorFunding?: boolean
  patentActivity?: boolean
  regulatoryChanges?: boolean
  mediaAttention?: boolean
  expertEndorsements?: boolean
  earlyAdopterSignals?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tractionSignals"]>

export type TractionSignalsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  waitlistCount?: boolean
  socialMentions?: boolean
  searchVolume?: boolean
  competitorFunding?: boolean
  patentActivity?: boolean
  regulatoryChanges?: boolean
  mediaAttention?: boolean
  expertEndorsements?: boolean
  earlyAdopterSignals?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tractionSignals"]>

export type TractionSignalsSelectScalar = {
  id?: boolean
  waitlistCount?: boolean
  socialMentions?: boolean
  searchVolume?: boolean
  competitorFunding?: boolean
  patentActivity?: boolean
  regulatoryChanges?: boolean
  mediaAttention?: boolean
  expertEndorsements?: boolean
  earlyAdopterSignals?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
}

export type TractionSignalsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "waitlistCount" | "socialMentions" | "searchVolume" | "competitorFunding" | "patentActivity" | "regulatoryChanges" | "mediaAttention" | "expertEndorsements" | "earlyAdopterSignals" | "createdAt" | "updatedAt" | "dailyIdeaId", ExtArgs["result"]["tractionSignals"]>
export type TractionSignalsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}
export type TractionSignalsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}
export type TractionSignalsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}

export type $TractionSignalsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TractionSignals"
  objects: {
    dailyIdea: Prisma.$DailyIdeaPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    waitlistCount: number | null
    socialMentions: number | null
    searchVolume: number | null
    competitorFunding: number | null
    patentActivity: number | null
    regulatoryChanges: string[]
    mediaAttention: number | null
    expertEndorsements: string[]
    earlyAdopterSignals: string[]
    createdAt: Date
    updatedAt: Date
    dailyIdeaId: string
  }, ExtArgs["result"]["tractionSignals"]>
  composites: {}
}

export type TractionSignalsGetPayload<S extends boolean | null | undefined | TractionSignalsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TractionSignalsPayload, S>

export type TractionSignalsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TractionSignalsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TractionSignalsCountAggregateInputType | true
  }

export interface TractionSignalsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TractionSignals'], meta: { name: 'TractionSignals' } }
  /**
   * Find zero or one TractionSignals that matches the filter.
   * @param {TractionSignalsFindUniqueArgs} args - Arguments to find a TractionSignals
   * @example
   * // Get one TractionSignals
   * const tractionSignals = await prisma.tractionSignals.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TractionSignalsFindUniqueArgs>(args: Prisma.SelectSubset<T, TractionSignalsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TractionSignalsClient<runtime.Types.Result.GetResult<Prisma.$TractionSignalsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TractionSignals that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TractionSignalsFindUniqueOrThrowArgs} args - Arguments to find a TractionSignals
   * @example
   * // Get one TractionSignals
   * const tractionSignals = await prisma.tractionSignals.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TractionSignalsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TractionSignalsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TractionSignalsClient<runtime.Types.Result.GetResult<Prisma.$TractionSignalsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TractionSignals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TractionSignalsFindFirstArgs} args - Arguments to find a TractionSignals
   * @example
   * // Get one TractionSignals
   * const tractionSignals = await prisma.tractionSignals.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TractionSignalsFindFirstArgs>(args?: Prisma.SelectSubset<T, TractionSignalsFindFirstArgs<ExtArgs>>): Prisma.Prisma__TractionSignalsClient<runtime.Types.Result.GetResult<Prisma.$TractionSignalsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TractionSignals that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TractionSignalsFindFirstOrThrowArgs} args - Arguments to find a TractionSignals
   * @example
   * // Get one TractionSignals
   * const tractionSignals = await prisma.tractionSignals.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TractionSignalsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TractionSignalsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TractionSignalsClient<runtime.Types.Result.GetResult<Prisma.$TractionSignalsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TractionSignals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TractionSignalsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TractionSignals
   * const tractionSignals = await prisma.tractionSignals.findMany()
   * 
   * // Get first 10 TractionSignals
   * const tractionSignals = await prisma.tractionSignals.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tractionSignalsWithIdOnly = await prisma.tractionSignals.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TractionSignalsFindManyArgs>(args?: Prisma.SelectSubset<T, TractionSignalsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TractionSignalsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TractionSignals.
   * @param {TractionSignalsCreateArgs} args - Arguments to create a TractionSignals.
   * @example
   * // Create one TractionSignals
   * const TractionSignals = await prisma.tractionSignals.create({
   *   data: {
   *     // ... data to create a TractionSignals
   *   }
   * })
   * 
   */
  create<T extends TractionSignalsCreateArgs>(args: Prisma.SelectSubset<T, TractionSignalsCreateArgs<ExtArgs>>): Prisma.Prisma__TractionSignalsClient<runtime.Types.Result.GetResult<Prisma.$TractionSignalsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TractionSignals.
   * @param {TractionSignalsCreateManyArgs} args - Arguments to create many TractionSignals.
   * @example
   * // Create many TractionSignals
   * const tractionSignals = await prisma.tractionSignals.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TractionSignalsCreateManyArgs>(args?: Prisma.SelectSubset<T, TractionSignalsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TractionSignals and returns the data saved in the database.
   * @param {TractionSignalsCreateManyAndReturnArgs} args - Arguments to create many TractionSignals.
   * @example
   * // Create many TractionSignals
   * const tractionSignals = await prisma.tractionSignals.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TractionSignals and only return the `id`
   * const tractionSignalsWithIdOnly = await prisma.tractionSignals.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TractionSignalsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TractionSignalsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TractionSignalsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TractionSignals.
   * @param {TractionSignalsDeleteArgs} args - Arguments to delete one TractionSignals.
   * @example
   * // Delete one TractionSignals
   * const TractionSignals = await prisma.tractionSignals.delete({
   *   where: {
   *     // ... filter to delete one TractionSignals
   *   }
   * })
   * 
   */
  delete<T extends TractionSignalsDeleteArgs>(args: Prisma.SelectSubset<T, TractionSignalsDeleteArgs<ExtArgs>>): Prisma.Prisma__TractionSignalsClient<runtime.Types.Result.GetResult<Prisma.$TractionSignalsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TractionSignals.
   * @param {TractionSignalsUpdateArgs} args - Arguments to update one TractionSignals.
   * @example
   * // Update one TractionSignals
   * const tractionSignals = await prisma.tractionSignals.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TractionSignalsUpdateArgs>(args: Prisma.SelectSubset<T, TractionSignalsUpdateArgs<ExtArgs>>): Prisma.Prisma__TractionSignalsClient<runtime.Types.Result.GetResult<Prisma.$TractionSignalsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TractionSignals.
   * @param {TractionSignalsDeleteManyArgs} args - Arguments to filter TractionSignals to delete.
   * @example
   * // Delete a few TractionSignals
   * const { count } = await prisma.tractionSignals.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TractionSignalsDeleteManyArgs>(args?: Prisma.SelectSubset<T, TractionSignalsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TractionSignals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TractionSignalsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TractionSignals
   * const tractionSignals = await prisma.tractionSignals.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TractionSignalsUpdateManyArgs>(args: Prisma.SelectSubset<T, TractionSignalsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TractionSignals and returns the data updated in the database.
   * @param {TractionSignalsUpdateManyAndReturnArgs} args - Arguments to update many TractionSignals.
   * @example
   * // Update many TractionSignals
   * const tractionSignals = await prisma.tractionSignals.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TractionSignals and only return the `id`
   * const tractionSignalsWithIdOnly = await prisma.tractionSignals.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TractionSignalsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TractionSignalsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TractionSignalsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TractionSignals.
   * @param {TractionSignalsUpsertArgs} args - Arguments to update or create a TractionSignals.
   * @example
   * // Update or create a TractionSignals
   * const tractionSignals = await prisma.tractionSignals.upsert({
   *   create: {
   *     // ... data to create a TractionSignals
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TractionSignals we want to update
   *   }
   * })
   */
  upsert<T extends TractionSignalsUpsertArgs>(args: Prisma.SelectSubset<T, TractionSignalsUpsertArgs<ExtArgs>>): Prisma.Prisma__TractionSignalsClient<runtime.Types.Result.GetResult<Prisma.$TractionSignalsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TractionSignals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TractionSignalsCountArgs} args - Arguments to filter TractionSignals to count.
   * @example
   * // Count the number of TractionSignals
   * const count = await prisma.tractionSignals.count({
   *   where: {
   *     // ... the filter for the TractionSignals we want to count
   *   }
   * })
  **/
  count<T extends TractionSignalsCountArgs>(
    args?: Prisma.Subset<T, TractionSignalsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TractionSignalsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TractionSignals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TractionSignalsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TractionSignalsAggregateArgs>(args: Prisma.Subset<T, TractionSignalsAggregateArgs>): Prisma.PrismaPromise<GetTractionSignalsAggregateType<T>>

  /**
   * Group by TractionSignals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TractionSignalsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TractionSignalsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TractionSignalsGroupByArgs['orderBy'] }
      : { orderBy?: TractionSignalsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TractionSignalsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTractionSignalsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TractionSignals model
 */
readonly fields: TractionSignalsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TractionSignals.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TractionSignalsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  dailyIdea<T extends Prisma.DailyIdeaDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdeaDefaultArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TractionSignals model
 */
export interface TractionSignalsFieldRefs {
  readonly id: Prisma.FieldRef<"TractionSignals", 'String'>
  readonly waitlistCount: Prisma.FieldRef<"TractionSignals", 'Int'>
  readonly socialMentions: Prisma.FieldRef<"TractionSignals", 'Int'>
  readonly searchVolume: Prisma.FieldRef<"TractionSignals", 'Int'>
  readonly competitorFunding: Prisma.FieldRef<"TractionSignals", 'Float'>
  readonly patentActivity: Prisma.FieldRef<"TractionSignals", 'Int'>
  readonly regulatoryChanges: Prisma.FieldRef<"TractionSignals", 'String[]'>
  readonly mediaAttention: Prisma.FieldRef<"TractionSignals", 'Int'>
  readonly expertEndorsements: Prisma.FieldRef<"TractionSignals", 'String[]'>
  readonly earlyAdopterSignals: Prisma.FieldRef<"TractionSignals", 'String[]'>
  readonly createdAt: Prisma.FieldRef<"TractionSignals", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TractionSignals", 'DateTime'>
  readonly dailyIdeaId: Prisma.FieldRef<"TractionSignals", 'String'>
}
    

// Custom InputTypes
/**
 * TractionSignals findUnique
 */
export type TractionSignalsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TractionSignals
   */
  select?: Prisma.TractionSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TractionSignals
   */
  omit?: Prisma.TractionSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TractionSignalsInclude<ExtArgs> | null
  /**
   * Filter, which TractionSignals to fetch.
   */
  where: Prisma.TractionSignalsWhereUniqueInput
}

/**
 * TractionSignals findUniqueOrThrow
 */
export type TractionSignalsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TractionSignals
   */
  select?: Prisma.TractionSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TractionSignals
   */
  omit?: Prisma.TractionSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TractionSignalsInclude<ExtArgs> | null
  /**
   * Filter, which TractionSignals to fetch.
   */
  where: Prisma.TractionSignalsWhereUniqueInput
}

/**
 * TractionSignals findFirst
 */
export type TractionSignalsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TractionSignals
   */
  select?: Prisma.TractionSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TractionSignals
   */
  omit?: Prisma.TractionSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TractionSignalsInclude<ExtArgs> | null
  /**
   * Filter, which TractionSignals to fetch.
   */
  where?: Prisma.TractionSignalsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TractionSignals to fetch.
   */
  orderBy?: Prisma.TractionSignalsOrderByWithRelationInput | Prisma.TractionSignalsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TractionSignals.
   */
  cursor?: Prisma.TractionSignalsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TractionSignals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TractionSignals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TractionSignals.
   */
  distinct?: Prisma.TractionSignalsScalarFieldEnum | Prisma.TractionSignalsScalarFieldEnum[]
}

/**
 * TractionSignals findFirstOrThrow
 */
export type TractionSignalsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TractionSignals
   */
  select?: Prisma.TractionSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TractionSignals
   */
  omit?: Prisma.TractionSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TractionSignalsInclude<ExtArgs> | null
  /**
   * Filter, which TractionSignals to fetch.
   */
  where?: Prisma.TractionSignalsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TractionSignals to fetch.
   */
  orderBy?: Prisma.TractionSignalsOrderByWithRelationInput | Prisma.TractionSignalsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TractionSignals.
   */
  cursor?: Prisma.TractionSignalsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TractionSignals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TractionSignals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TractionSignals.
   */
  distinct?: Prisma.TractionSignalsScalarFieldEnum | Prisma.TractionSignalsScalarFieldEnum[]
}

/**
 * TractionSignals findMany
 */
export type TractionSignalsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TractionSignals
   */
  select?: Prisma.TractionSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TractionSignals
   */
  omit?: Prisma.TractionSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TractionSignalsInclude<ExtArgs> | null
  /**
   * Filter, which TractionSignals to fetch.
   */
  where?: Prisma.TractionSignalsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TractionSignals to fetch.
   */
  orderBy?: Prisma.TractionSignalsOrderByWithRelationInput | Prisma.TractionSignalsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TractionSignals.
   */
  cursor?: Prisma.TractionSignalsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TractionSignals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TractionSignals.
   */
  skip?: number
  distinct?: Prisma.TractionSignalsScalarFieldEnum | Prisma.TractionSignalsScalarFieldEnum[]
}

/**
 * TractionSignals create
 */
export type TractionSignalsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TractionSignals
   */
  select?: Prisma.TractionSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TractionSignals
   */
  omit?: Prisma.TractionSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TractionSignalsInclude<ExtArgs> | null
  /**
   * The data needed to create a TractionSignals.
   */
  data: Prisma.XOR<Prisma.TractionSignalsCreateInput, Prisma.TractionSignalsUncheckedCreateInput>
}

/**
 * TractionSignals createMany
 */
export type TractionSignalsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TractionSignals.
   */
  data: Prisma.TractionSignalsCreateManyInput | Prisma.TractionSignalsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TractionSignals createManyAndReturn
 */
export type TractionSignalsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TractionSignals
   */
  select?: Prisma.TractionSignalsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TractionSignals
   */
  omit?: Prisma.TractionSignalsOmit<ExtArgs> | null
  /**
   * The data used to create many TractionSignals.
   */
  data: Prisma.TractionSignalsCreateManyInput | Prisma.TractionSignalsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TractionSignalsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TractionSignals update
 */
export type TractionSignalsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TractionSignals
   */
  select?: Prisma.TractionSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TractionSignals
   */
  omit?: Prisma.TractionSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TractionSignalsInclude<ExtArgs> | null
  /**
   * The data needed to update a TractionSignals.
   */
  data: Prisma.XOR<Prisma.TractionSignalsUpdateInput, Prisma.TractionSignalsUncheckedUpdateInput>
  /**
   * Choose, which TractionSignals to update.
   */
  where: Prisma.TractionSignalsWhereUniqueInput
}

/**
 * TractionSignals updateMany
 */
export type TractionSignalsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TractionSignals.
   */
  data: Prisma.XOR<Prisma.TractionSignalsUpdateManyMutationInput, Prisma.TractionSignalsUncheckedUpdateManyInput>
  /**
   * Filter which TractionSignals to update
   */
  where?: Prisma.TractionSignalsWhereInput
  /**
   * Limit how many TractionSignals to update.
   */
  limit?: number
}

/**
 * TractionSignals updateManyAndReturn
 */
export type TractionSignalsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TractionSignals
   */
  select?: Prisma.TractionSignalsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TractionSignals
   */
  omit?: Prisma.TractionSignalsOmit<ExtArgs> | null
  /**
   * The data used to update TractionSignals.
   */
  data: Prisma.XOR<Prisma.TractionSignalsUpdateManyMutationInput, Prisma.TractionSignalsUncheckedUpdateManyInput>
  /**
   * Filter which TractionSignals to update
   */
  where?: Prisma.TractionSignalsWhereInput
  /**
   * Limit how many TractionSignals to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TractionSignalsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TractionSignals upsert
 */
export type TractionSignalsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TractionSignals
   */
  select?: Prisma.TractionSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TractionSignals
   */
  omit?: Prisma.TractionSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TractionSignalsInclude<ExtArgs> | null
  /**
   * The filter to search for the TractionSignals to update in case it exists.
   */
  where: Prisma.TractionSignalsWhereUniqueInput
  /**
   * In case the TractionSignals found by the `where` argument doesn't exist, create a new TractionSignals with this data.
   */
  create: Prisma.XOR<Prisma.TractionSignalsCreateInput, Prisma.TractionSignalsUncheckedCreateInput>
  /**
   * In case the TractionSignals was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TractionSignalsUpdateInput, Prisma.TractionSignalsUncheckedUpdateInput>
}

/**
 * TractionSignals delete
 */
export type TractionSignalsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TractionSignals
   */
  select?: Prisma.TractionSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TractionSignals
   */
  omit?: Prisma.TractionSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TractionSignalsInclude<ExtArgs> | null
  /**
   * Filter which TractionSignals to delete.
   */
  where: Prisma.TractionSignalsWhereUniqueInput
}

/**
 * TractionSignals deleteMany
 */
export type TractionSignalsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TractionSignals to delete
   */
  where?: Prisma.TractionSignalsWhereInput
  /**
   * Limit how many TractionSignals to delete.
   */
  limit?: number
}

/**
 * TractionSignals without action
 */
export type TractionSignalsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TractionSignals
   */
  select?: Prisma.TractionSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TractionSignals
   */
  omit?: Prisma.TractionSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TractionSignalsInclude<ExtArgs> | null
}
