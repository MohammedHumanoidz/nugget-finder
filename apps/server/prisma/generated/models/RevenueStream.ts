
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `RevenueStream` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model RevenueStream
 * 
 */
export type RevenueStreamModel = runtime.Types.Result.DefaultSelection<Prisma.$RevenueStreamPayload>

export type AggregateRevenueStream = {
  _count: RevenueStreamCountAggregateOutputType | null
  _avg: RevenueStreamAvgAggregateOutputType | null
  _sum: RevenueStreamSumAggregateOutputType | null
  _min: RevenueStreamMinAggregateOutputType | null
  _max: RevenueStreamMaxAggregateOutputType | null
}

export type RevenueStreamAvgAggregateOutputType = {
  percentage: number | null
}

export type RevenueStreamSumAggregateOutputType = {
  percentage: number | null
}

export type RevenueStreamMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  percentage: number | null
  monetizationStrategyId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type RevenueStreamMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  percentage: number | null
  monetizationStrategyId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type RevenueStreamCountAggregateOutputType = {
  id: number
  name: number
  description: number
  percentage: number
  monetizationStrategyId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type RevenueStreamAvgAggregateInputType = {
  percentage?: true
}

export type RevenueStreamSumAggregateInputType = {
  percentage?: true
}

export type RevenueStreamMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  percentage?: true
  monetizationStrategyId?: true
  createdAt?: true
  updatedAt?: true
}

export type RevenueStreamMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  percentage?: true
  monetizationStrategyId?: true
  createdAt?: true
  updatedAt?: true
}

export type RevenueStreamCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  percentage?: true
  monetizationStrategyId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type RevenueStreamAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RevenueStream to aggregate.
   */
  where?: Prisma.RevenueStreamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RevenueStreams to fetch.
   */
  orderBy?: Prisma.RevenueStreamOrderByWithRelationInput | Prisma.RevenueStreamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RevenueStreamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RevenueStreams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RevenueStreams.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned RevenueStreams
  **/
  _count?: true | RevenueStreamCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RevenueStreamAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RevenueStreamSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RevenueStreamMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RevenueStreamMaxAggregateInputType
}

export type GetRevenueStreamAggregateType<T extends RevenueStreamAggregateArgs> = {
      [P in keyof T & keyof AggregateRevenueStream]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRevenueStream[P]>
    : Prisma.GetScalarType<T[P], AggregateRevenueStream[P]>
}




export type RevenueStreamGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RevenueStreamWhereInput
  orderBy?: Prisma.RevenueStreamOrderByWithAggregationInput | Prisma.RevenueStreamOrderByWithAggregationInput[]
  by: Prisma.RevenueStreamScalarFieldEnum[] | Prisma.RevenueStreamScalarFieldEnum
  having?: Prisma.RevenueStreamScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RevenueStreamCountAggregateInputType | true
  _avg?: RevenueStreamAvgAggregateInputType
  _sum?: RevenueStreamSumAggregateInputType
  _min?: RevenueStreamMinAggregateInputType
  _max?: RevenueStreamMaxAggregateInputType
}

export type RevenueStreamGroupByOutputType = {
  id: string
  name: string
  description: string
  percentage: number
  monetizationStrategyId: string
  createdAt: Date
  updatedAt: Date
  _count: RevenueStreamCountAggregateOutputType | null
  _avg: RevenueStreamAvgAggregateOutputType | null
  _sum: RevenueStreamSumAggregateOutputType | null
  _min: RevenueStreamMinAggregateOutputType | null
  _max: RevenueStreamMaxAggregateOutputType | null
}

type GetRevenueStreamGroupByPayload<T extends RevenueStreamGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RevenueStreamGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RevenueStreamGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RevenueStreamGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RevenueStreamGroupByOutputType[P]>
      }
    >
  > 



export type RevenueStreamWhereInput = {
  AND?: Prisma.RevenueStreamWhereInput | Prisma.RevenueStreamWhereInput[]
  OR?: Prisma.RevenueStreamWhereInput[]
  NOT?: Prisma.RevenueStreamWhereInput | Prisma.RevenueStreamWhereInput[]
  id?: Prisma.StringFilter<"RevenueStream"> | string
  name?: Prisma.StringFilter<"RevenueStream"> | string
  description?: Prisma.StringFilter<"RevenueStream"> | string
  percentage?: Prisma.IntFilter<"RevenueStream"> | number
  monetizationStrategyId?: Prisma.StringFilter<"RevenueStream"> | string
  createdAt?: Prisma.DateTimeFilter<"RevenueStream"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"RevenueStream"> | Date | string
  monetizationStrategy?: Prisma.XOR<Prisma.MonetizationStrategyScalarRelationFilter, Prisma.MonetizationStrategyWhereInput>
}

export type RevenueStreamOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  monetizationStrategy?: Prisma.MonetizationStrategyOrderByWithRelationInput
}

export type RevenueStreamWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.RevenueStreamWhereInput | Prisma.RevenueStreamWhereInput[]
  OR?: Prisma.RevenueStreamWhereInput[]
  NOT?: Prisma.RevenueStreamWhereInput | Prisma.RevenueStreamWhereInput[]
  name?: Prisma.StringFilter<"RevenueStream"> | string
  description?: Prisma.StringFilter<"RevenueStream"> | string
  percentage?: Prisma.IntFilter<"RevenueStream"> | number
  monetizationStrategyId?: Prisma.StringFilter<"RevenueStream"> | string
  createdAt?: Prisma.DateTimeFilter<"RevenueStream"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"RevenueStream"> | Date | string
  monetizationStrategy?: Prisma.XOR<Prisma.MonetizationStrategyScalarRelationFilter, Prisma.MonetizationStrategyWhereInput>
}, "id">

export type RevenueStreamOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.RevenueStreamCountOrderByAggregateInput
  _avg?: Prisma.RevenueStreamAvgOrderByAggregateInput
  _max?: Prisma.RevenueStreamMaxOrderByAggregateInput
  _min?: Prisma.RevenueStreamMinOrderByAggregateInput
  _sum?: Prisma.RevenueStreamSumOrderByAggregateInput
}

export type RevenueStreamScalarWhereWithAggregatesInput = {
  AND?: Prisma.RevenueStreamScalarWhereWithAggregatesInput | Prisma.RevenueStreamScalarWhereWithAggregatesInput[]
  OR?: Prisma.RevenueStreamScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RevenueStreamScalarWhereWithAggregatesInput | Prisma.RevenueStreamScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"RevenueStream"> | string
  name?: Prisma.StringWithAggregatesFilter<"RevenueStream"> | string
  description?: Prisma.StringWithAggregatesFilter<"RevenueStream"> | string
  percentage?: Prisma.IntWithAggregatesFilter<"RevenueStream"> | number
  monetizationStrategyId?: Prisma.StringWithAggregatesFilter<"RevenueStream"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"RevenueStream"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"RevenueStream"> | Date | string
}

export type RevenueStreamCreateInput = {
  id?: string
  name: string
  description: string
  percentage: number
  createdAt?: Date | string
  updatedAt?: Date | string
  monetizationStrategy: Prisma.MonetizationStrategyCreateNestedOneWithoutRevenueStreamsInput
}

export type RevenueStreamUncheckedCreateInput = {
  id?: string
  name: string
  description: string
  percentage: number
  monetizationStrategyId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RevenueStreamUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  percentage?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  monetizationStrategy?: Prisma.MonetizationStrategyUpdateOneRequiredWithoutRevenueStreamsNestedInput
}

export type RevenueStreamUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  percentage?: Prisma.IntFieldUpdateOperationsInput | number
  monetizationStrategyId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RevenueStreamCreateManyInput = {
  id?: string
  name: string
  description: string
  percentage: number
  monetizationStrategyId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RevenueStreamUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  percentage?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RevenueStreamUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  percentage?: Prisma.IntFieldUpdateOperationsInput | number
  monetizationStrategyId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RevenueStreamListRelationFilter = {
  every?: Prisma.RevenueStreamWhereInput
  some?: Prisma.RevenueStreamWhereInput
  none?: Prisma.RevenueStreamWhereInput
}

export type RevenueStreamOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type RevenueStreamCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RevenueStreamAvgOrderByAggregateInput = {
  percentage?: Prisma.SortOrder
}

export type RevenueStreamMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RevenueStreamMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RevenueStreamSumOrderByAggregateInput = {
  percentage?: Prisma.SortOrder
}

export type RevenueStreamCreateNestedManyWithoutMonetizationStrategyInput = {
  create?: Prisma.XOR<Prisma.RevenueStreamCreateWithoutMonetizationStrategyInput, Prisma.RevenueStreamUncheckedCreateWithoutMonetizationStrategyInput> | Prisma.RevenueStreamCreateWithoutMonetizationStrategyInput[] | Prisma.RevenueStreamUncheckedCreateWithoutMonetizationStrategyInput[]
  connectOrCreate?: Prisma.RevenueStreamCreateOrConnectWithoutMonetizationStrategyInput | Prisma.RevenueStreamCreateOrConnectWithoutMonetizationStrategyInput[]
  createMany?: Prisma.RevenueStreamCreateManyMonetizationStrategyInputEnvelope
  connect?: Prisma.RevenueStreamWhereUniqueInput | Prisma.RevenueStreamWhereUniqueInput[]
}

export type RevenueStreamUncheckedCreateNestedManyWithoutMonetizationStrategyInput = {
  create?: Prisma.XOR<Prisma.RevenueStreamCreateWithoutMonetizationStrategyInput, Prisma.RevenueStreamUncheckedCreateWithoutMonetizationStrategyInput> | Prisma.RevenueStreamCreateWithoutMonetizationStrategyInput[] | Prisma.RevenueStreamUncheckedCreateWithoutMonetizationStrategyInput[]
  connectOrCreate?: Prisma.RevenueStreamCreateOrConnectWithoutMonetizationStrategyInput | Prisma.RevenueStreamCreateOrConnectWithoutMonetizationStrategyInput[]
  createMany?: Prisma.RevenueStreamCreateManyMonetizationStrategyInputEnvelope
  connect?: Prisma.RevenueStreamWhereUniqueInput | Prisma.RevenueStreamWhereUniqueInput[]
}

export type RevenueStreamUpdateManyWithoutMonetizationStrategyNestedInput = {
  create?: Prisma.XOR<Prisma.RevenueStreamCreateWithoutMonetizationStrategyInput, Prisma.RevenueStreamUncheckedCreateWithoutMonetizationStrategyInput> | Prisma.RevenueStreamCreateWithoutMonetizationStrategyInput[] | Prisma.RevenueStreamUncheckedCreateWithoutMonetizationStrategyInput[]
  connectOrCreate?: Prisma.RevenueStreamCreateOrConnectWithoutMonetizationStrategyInput | Prisma.RevenueStreamCreateOrConnectWithoutMonetizationStrategyInput[]
  upsert?: Prisma.RevenueStreamUpsertWithWhereUniqueWithoutMonetizationStrategyInput | Prisma.RevenueStreamUpsertWithWhereUniqueWithoutMonetizationStrategyInput[]
  createMany?: Prisma.RevenueStreamCreateManyMonetizationStrategyInputEnvelope
  set?: Prisma.RevenueStreamWhereUniqueInput | Prisma.RevenueStreamWhereUniqueInput[]
  disconnect?: Prisma.RevenueStreamWhereUniqueInput | Prisma.RevenueStreamWhereUniqueInput[]
  delete?: Prisma.RevenueStreamWhereUniqueInput | Prisma.RevenueStreamWhereUniqueInput[]
  connect?: Prisma.RevenueStreamWhereUniqueInput | Prisma.RevenueStreamWhereUniqueInput[]
  update?: Prisma.RevenueStreamUpdateWithWhereUniqueWithoutMonetizationStrategyInput | Prisma.RevenueStreamUpdateWithWhereUniqueWithoutMonetizationStrategyInput[]
  updateMany?: Prisma.RevenueStreamUpdateManyWithWhereWithoutMonetizationStrategyInput | Prisma.RevenueStreamUpdateManyWithWhereWithoutMonetizationStrategyInput[]
  deleteMany?: Prisma.RevenueStreamScalarWhereInput | Prisma.RevenueStreamScalarWhereInput[]
}

export type RevenueStreamUncheckedUpdateManyWithoutMonetizationStrategyNestedInput = {
  create?: Prisma.XOR<Prisma.RevenueStreamCreateWithoutMonetizationStrategyInput, Prisma.RevenueStreamUncheckedCreateWithoutMonetizationStrategyInput> | Prisma.RevenueStreamCreateWithoutMonetizationStrategyInput[] | Prisma.RevenueStreamUncheckedCreateWithoutMonetizationStrategyInput[]
  connectOrCreate?: Prisma.RevenueStreamCreateOrConnectWithoutMonetizationStrategyInput | Prisma.RevenueStreamCreateOrConnectWithoutMonetizationStrategyInput[]
  upsert?: Prisma.RevenueStreamUpsertWithWhereUniqueWithoutMonetizationStrategyInput | Prisma.RevenueStreamUpsertWithWhereUniqueWithoutMonetizationStrategyInput[]
  createMany?: Prisma.RevenueStreamCreateManyMonetizationStrategyInputEnvelope
  set?: Prisma.RevenueStreamWhereUniqueInput | Prisma.RevenueStreamWhereUniqueInput[]
  disconnect?: Prisma.RevenueStreamWhereUniqueInput | Prisma.RevenueStreamWhereUniqueInput[]
  delete?: Prisma.RevenueStreamWhereUniqueInput | Prisma.RevenueStreamWhereUniqueInput[]
  connect?: Prisma.RevenueStreamWhereUniqueInput | Prisma.RevenueStreamWhereUniqueInput[]
  update?: Prisma.RevenueStreamUpdateWithWhereUniqueWithoutMonetizationStrategyInput | Prisma.RevenueStreamUpdateWithWhereUniqueWithoutMonetizationStrategyInput[]
  updateMany?: Prisma.RevenueStreamUpdateManyWithWhereWithoutMonetizationStrategyInput | Prisma.RevenueStreamUpdateManyWithWhereWithoutMonetizationStrategyInput[]
  deleteMany?: Prisma.RevenueStreamScalarWhereInput | Prisma.RevenueStreamScalarWhereInput[]
}

export type RevenueStreamCreateWithoutMonetizationStrategyInput = {
  id?: string
  name: string
  description: string
  percentage: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RevenueStreamUncheckedCreateWithoutMonetizationStrategyInput = {
  id?: string
  name: string
  description: string
  percentage: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RevenueStreamCreateOrConnectWithoutMonetizationStrategyInput = {
  where: Prisma.RevenueStreamWhereUniqueInput
  create: Prisma.XOR<Prisma.RevenueStreamCreateWithoutMonetizationStrategyInput, Prisma.RevenueStreamUncheckedCreateWithoutMonetizationStrategyInput>
}

export type RevenueStreamCreateManyMonetizationStrategyInputEnvelope = {
  data: Prisma.RevenueStreamCreateManyMonetizationStrategyInput | Prisma.RevenueStreamCreateManyMonetizationStrategyInput[]
  skipDuplicates?: boolean
}

export type RevenueStreamUpsertWithWhereUniqueWithoutMonetizationStrategyInput = {
  where: Prisma.RevenueStreamWhereUniqueInput
  update: Prisma.XOR<Prisma.RevenueStreamUpdateWithoutMonetizationStrategyInput, Prisma.RevenueStreamUncheckedUpdateWithoutMonetizationStrategyInput>
  create: Prisma.XOR<Prisma.RevenueStreamCreateWithoutMonetizationStrategyInput, Prisma.RevenueStreamUncheckedCreateWithoutMonetizationStrategyInput>
}

export type RevenueStreamUpdateWithWhereUniqueWithoutMonetizationStrategyInput = {
  where: Prisma.RevenueStreamWhereUniqueInput
  data: Prisma.XOR<Prisma.RevenueStreamUpdateWithoutMonetizationStrategyInput, Prisma.RevenueStreamUncheckedUpdateWithoutMonetizationStrategyInput>
}

export type RevenueStreamUpdateManyWithWhereWithoutMonetizationStrategyInput = {
  where: Prisma.RevenueStreamScalarWhereInput
  data: Prisma.XOR<Prisma.RevenueStreamUpdateManyMutationInput, Prisma.RevenueStreamUncheckedUpdateManyWithoutMonetizationStrategyInput>
}

export type RevenueStreamScalarWhereInput = {
  AND?: Prisma.RevenueStreamScalarWhereInput | Prisma.RevenueStreamScalarWhereInput[]
  OR?: Prisma.RevenueStreamScalarWhereInput[]
  NOT?: Prisma.RevenueStreamScalarWhereInput | Prisma.RevenueStreamScalarWhereInput[]
  id?: Prisma.StringFilter<"RevenueStream"> | string
  name?: Prisma.StringFilter<"RevenueStream"> | string
  description?: Prisma.StringFilter<"RevenueStream"> | string
  percentage?: Prisma.IntFilter<"RevenueStream"> | number
  monetizationStrategyId?: Prisma.StringFilter<"RevenueStream"> | string
  createdAt?: Prisma.DateTimeFilter<"RevenueStream"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"RevenueStream"> | Date | string
}

export type RevenueStreamCreateManyMonetizationStrategyInput = {
  id?: string
  name: string
  description: string
  percentage: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RevenueStreamUpdateWithoutMonetizationStrategyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  percentage?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RevenueStreamUncheckedUpdateWithoutMonetizationStrategyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  percentage?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RevenueStreamUncheckedUpdateManyWithoutMonetizationStrategyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  percentage?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type RevenueStreamSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  percentage?: boolean
  monetizationStrategyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  monetizationStrategy?: boolean | Prisma.MonetizationStrategyDefaultArgs<ExtArgs>
}, ExtArgs["result"]["revenueStream"]>

export type RevenueStreamSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  percentage?: boolean
  monetizationStrategyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  monetizationStrategy?: boolean | Prisma.MonetizationStrategyDefaultArgs<ExtArgs>
}, ExtArgs["result"]["revenueStream"]>

export type RevenueStreamSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  percentage?: boolean
  monetizationStrategyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  monetizationStrategy?: boolean | Prisma.MonetizationStrategyDefaultArgs<ExtArgs>
}, ExtArgs["result"]["revenueStream"]>

export type RevenueStreamSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  percentage?: boolean
  monetizationStrategyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type RevenueStreamOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "percentage" | "monetizationStrategyId" | "createdAt" | "updatedAt", ExtArgs["result"]["revenueStream"]>
export type RevenueStreamInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  monetizationStrategy?: boolean | Prisma.MonetizationStrategyDefaultArgs<ExtArgs>
}
export type RevenueStreamIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  monetizationStrategy?: boolean | Prisma.MonetizationStrategyDefaultArgs<ExtArgs>
}
export type RevenueStreamIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  monetizationStrategy?: boolean | Prisma.MonetizationStrategyDefaultArgs<ExtArgs>
}

export type $RevenueStreamPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "RevenueStream"
  objects: {
    monetizationStrategy: Prisma.$MonetizationStrategyPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string
    percentage: number
    monetizationStrategyId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["revenueStream"]>
  composites: {}
}

export type RevenueStreamGetPayload<S extends boolean | null | undefined | RevenueStreamDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RevenueStreamPayload, S>

export type RevenueStreamCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RevenueStreamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RevenueStreamCountAggregateInputType | true
  }

export interface RevenueStreamDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RevenueStream'], meta: { name: 'RevenueStream' } }
  /**
   * Find zero or one RevenueStream that matches the filter.
   * @param {RevenueStreamFindUniqueArgs} args - Arguments to find a RevenueStream
   * @example
   * // Get one RevenueStream
   * const revenueStream = await prisma.revenueStream.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RevenueStreamFindUniqueArgs>(args: Prisma.SelectSubset<T, RevenueStreamFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RevenueStreamClient<runtime.Types.Result.GetResult<Prisma.$RevenueStreamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one RevenueStream that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RevenueStreamFindUniqueOrThrowArgs} args - Arguments to find a RevenueStream
   * @example
   * // Get one RevenueStream
   * const revenueStream = await prisma.revenueStream.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RevenueStreamFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RevenueStreamFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RevenueStreamClient<runtime.Types.Result.GetResult<Prisma.$RevenueStreamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RevenueStream that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RevenueStreamFindFirstArgs} args - Arguments to find a RevenueStream
   * @example
   * // Get one RevenueStream
   * const revenueStream = await prisma.revenueStream.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RevenueStreamFindFirstArgs>(args?: Prisma.SelectSubset<T, RevenueStreamFindFirstArgs<ExtArgs>>): Prisma.Prisma__RevenueStreamClient<runtime.Types.Result.GetResult<Prisma.$RevenueStreamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RevenueStream that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RevenueStreamFindFirstOrThrowArgs} args - Arguments to find a RevenueStream
   * @example
   * // Get one RevenueStream
   * const revenueStream = await prisma.revenueStream.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RevenueStreamFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RevenueStreamFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RevenueStreamClient<runtime.Types.Result.GetResult<Prisma.$RevenueStreamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more RevenueStreams that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RevenueStreamFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RevenueStreams
   * const revenueStreams = await prisma.revenueStream.findMany()
   * 
   * // Get first 10 RevenueStreams
   * const revenueStreams = await prisma.revenueStream.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const revenueStreamWithIdOnly = await prisma.revenueStream.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RevenueStreamFindManyArgs>(args?: Prisma.SelectSubset<T, RevenueStreamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RevenueStreamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a RevenueStream.
   * @param {RevenueStreamCreateArgs} args - Arguments to create a RevenueStream.
   * @example
   * // Create one RevenueStream
   * const RevenueStream = await prisma.revenueStream.create({
   *   data: {
   *     // ... data to create a RevenueStream
   *   }
   * })
   * 
   */
  create<T extends RevenueStreamCreateArgs>(args: Prisma.SelectSubset<T, RevenueStreamCreateArgs<ExtArgs>>): Prisma.Prisma__RevenueStreamClient<runtime.Types.Result.GetResult<Prisma.$RevenueStreamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many RevenueStreams.
   * @param {RevenueStreamCreateManyArgs} args - Arguments to create many RevenueStreams.
   * @example
   * // Create many RevenueStreams
   * const revenueStream = await prisma.revenueStream.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RevenueStreamCreateManyArgs>(args?: Prisma.SelectSubset<T, RevenueStreamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many RevenueStreams and returns the data saved in the database.
   * @param {RevenueStreamCreateManyAndReturnArgs} args - Arguments to create many RevenueStreams.
   * @example
   * // Create many RevenueStreams
   * const revenueStream = await prisma.revenueStream.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many RevenueStreams and only return the `id`
   * const revenueStreamWithIdOnly = await prisma.revenueStream.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RevenueStreamCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RevenueStreamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RevenueStreamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a RevenueStream.
   * @param {RevenueStreamDeleteArgs} args - Arguments to delete one RevenueStream.
   * @example
   * // Delete one RevenueStream
   * const RevenueStream = await prisma.revenueStream.delete({
   *   where: {
   *     // ... filter to delete one RevenueStream
   *   }
   * })
   * 
   */
  delete<T extends RevenueStreamDeleteArgs>(args: Prisma.SelectSubset<T, RevenueStreamDeleteArgs<ExtArgs>>): Prisma.Prisma__RevenueStreamClient<runtime.Types.Result.GetResult<Prisma.$RevenueStreamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one RevenueStream.
   * @param {RevenueStreamUpdateArgs} args - Arguments to update one RevenueStream.
   * @example
   * // Update one RevenueStream
   * const revenueStream = await prisma.revenueStream.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RevenueStreamUpdateArgs>(args: Prisma.SelectSubset<T, RevenueStreamUpdateArgs<ExtArgs>>): Prisma.Prisma__RevenueStreamClient<runtime.Types.Result.GetResult<Prisma.$RevenueStreamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more RevenueStreams.
   * @param {RevenueStreamDeleteManyArgs} args - Arguments to filter RevenueStreams to delete.
   * @example
   * // Delete a few RevenueStreams
   * const { count } = await prisma.revenueStream.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RevenueStreamDeleteManyArgs>(args?: Prisma.SelectSubset<T, RevenueStreamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RevenueStreams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RevenueStreamUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RevenueStreams
   * const revenueStream = await prisma.revenueStream.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RevenueStreamUpdateManyArgs>(args: Prisma.SelectSubset<T, RevenueStreamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RevenueStreams and returns the data updated in the database.
   * @param {RevenueStreamUpdateManyAndReturnArgs} args - Arguments to update many RevenueStreams.
   * @example
   * // Update many RevenueStreams
   * const revenueStream = await prisma.revenueStream.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more RevenueStreams and only return the `id`
   * const revenueStreamWithIdOnly = await prisma.revenueStream.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RevenueStreamUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RevenueStreamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RevenueStreamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one RevenueStream.
   * @param {RevenueStreamUpsertArgs} args - Arguments to update or create a RevenueStream.
   * @example
   * // Update or create a RevenueStream
   * const revenueStream = await prisma.revenueStream.upsert({
   *   create: {
   *     // ... data to create a RevenueStream
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RevenueStream we want to update
   *   }
   * })
   */
  upsert<T extends RevenueStreamUpsertArgs>(args: Prisma.SelectSubset<T, RevenueStreamUpsertArgs<ExtArgs>>): Prisma.Prisma__RevenueStreamClient<runtime.Types.Result.GetResult<Prisma.$RevenueStreamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of RevenueStreams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RevenueStreamCountArgs} args - Arguments to filter RevenueStreams to count.
   * @example
   * // Count the number of RevenueStreams
   * const count = await prisma.revenueStream.count({
   *   where: {
   *     // ... the filter for the RevenueStreams we want to count
   *   }
   * })
  **/
  count<T extends RevenueStreamCountArgs>(
    args?: Prisma.Subset<T, RevenueStreamCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RevenueStreamCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a RevenueStream.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RevenueStreamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RevenueStreamAggregateArgs>(args: Prisma.Subset<T, RevenueStreamAggregateArgs>): Prisma.PrismaPromise<GetRevenueStreamAggregateType<T>>

  /**
   * Group by RevenueStream.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RevenueStreamGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RevenueStreamGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RevenueStreamGroupByArgs['orderBy'] }
      : { orderBy?: RevenueStreamGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RevenueStreamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRevenueStreamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the RevenueStream model
 */
readonly fields: RevenueStreamFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RevenueStream.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RevenueStreamClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  monetizationStrategy<T extends Prisma.MonetizationStrategyDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MonetizationStrategyDefaultArgs<ExtArgs>>): Prisma.Prisma__MonetizationStrategyClient<runtime.Types.Result.GetResult<Prisma.$MonetizationStrategyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the RevenueStream model
 */
export interface RevenueStreamFieldRefs {
  readonly id: Prisma.FieldRef<"RevenueStream", 'String'>
  readonly name: Prisma.FieldRef<"RevenueStream", 'String'>
  readonly description: Prisma.FieldRef<"RevenueStream", 'String'>
  readonly percentage: Prisma.FieldRef<"RevenueStream", 'Int'>
  readonly monetizationStrategyId: Prisma.FieldRef<"RevenueStream", 'String'>
  readonly createdAt: Prisma.FieldRef<"RevenueStream", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"RevenueStream", 'DateTime'>
}
    

// Custom InputTypes
/**
 * RevenueStream findUnique
 */
export type RevenueStreamFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RevenueStream
   */
  select?: Prisma.RevenueStreamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RevenueStream
   */
  omit?: Prisma.RevenueStreamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RevenueStreamInclude<ExtArgs> | null
  /**
   * Filter, which RevenueStream to fetch.
   */
  where: Prisma.RevenueStreamWhereUniqueInput
}

/**
 * RevenueStream findUniqueOrThrow
 */
export type RevenueStreamFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RevenueStream
   */
  select?: Prisma.RevenueStreamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RevenueStream
   */
  omit?: Prisma.RevenueStreamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RevenueStreamInclude<ExtArgs> | null
  /**
   * Filter, which RevenueStream to fetch.
   */
  where: Prisma.RevenueStreamWhereUniqueInput
}

/**
 * RevenueStream findFirst
 */
export type RevenueStreamFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RevenueStream
   */
  select?: Prisma.RevenueStreamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RevenueStream
   */
  omit?: Prisma.RevenueStreamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RevenueStreamInclude<ExtArgs> | null
  /**
   * Filter, which RevenueStream to fetch.
   */
  where?: Prisma.RevenueStreamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RevenueStreams to fetch.
   */
  orderBy?: Prisma.RevenueStreamOrderByWithRelationInput | Prisma.RevenueStreamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RevenueStreams.
   */
  cursor?: Prisma.RevenueStreamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RevenueStreams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RevenueStreams.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RevenueStreams.
   */
  distinct?: Prisma.RevenueStreamScalarFieldEnum | Prisma.RevenueStreamScalarFieldEnum[]
}

/**
 * RevenueStream findFirstOrThrow
 */
export type RevenueStreamFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RevenueStream
   */
  select?: Prisma.RevenueStreamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RevenueStream
   */
  omit?: Prisma.RevenueStreamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RevenueStreamInclude<ExtArgs> | null
  /**
   * Filter, which RevenueStream to fetch.
   */
  where?: Prisma.RevenueStreamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RevenueStreams to fetch.
   */
  orderBy?: Prisma.RevenueStreamOrderByWithRelationInput | Prisma.RevenueStreamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RevenueStreams.
   */
  cursor?: Prisma.RevenueStreamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RevenueStreams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RevenueStreams.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RevenueStreams.
   */
  distinct?: Prisma.RevenueStreamScalarFieldEnum | Prisma.RevenueStreamScalarFieldEnum[]
}

/**
 * RevenueStream findMany
 */
export type RevenueStreamFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RevenueStream
   */
  select?: Prisma.RevenueStreamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RevenueStream
   */
  omit?: Prisma.RevenueStreamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RevenueStreamInclude<ExtArgs> | null
  /**
   * Filter, which RevenueStreams to fetch.
   */
  where?: Prisma.RevenueStreamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RevenueStreams to fetch.
   */
  orderBy?: Prisma.RevenueStreamOrderByWithRelationInput | Prisma.RevenueStreamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing RevenueStreams.
   */
  cursor?: Prisma.RevenueStreamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RevenueStreams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RevenueStreams.
   */
  skip?: number
  distinct?: Prisma.RevenueStreamScalarFieldEnum | Prisma.RevenueStreamScalarFieldEnum[]
}

/**
 * RevenueStream create
 */
export type RevenueStreamCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RevenueStream
   */
  select?: Prisma.RevenueStreamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RevenueStream
   */
  omit?: Prisma.RevenueStreamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RevenueStreamInclude<ExtArgs> | null
  /**
   * The data needed to create a RevenueStream.
   */
  data: Prisma.XOR<Prisma.RevenueStreamCreateInput, Prisma.RevenueStreamUncheckedCreateInput>
}

/**
 * RevenueStream createMany
 */
export type RevenueStreamCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many RevenueStreams.
   */
  data: Prisma.RevenueStreamCreateManyInput | Prisma.RevenueStreamCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * RevenueStream createManyAndReturn
 */
export type RevenueStreamCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RevenueStream
   */
  select?: Prisma.RevenueStreamSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RevenueStream
   */
  omit?: Prisma.RevenueStreamOmit<ExtArgs> | null
  /**
   * The data used to create many RevenueStreams.
   */
  data: Prisma.RevenueStreamCreateManyInput | Prisma.RevenueStreamCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RevenueStreamIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * RevenueStream update
 */
export type RevenueStreamUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RevenueStream
   */
  select?: Prisma.RevenueStreamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RevenueStream
   */
  omit?: Prisma.RevenueStreamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RevenueStreamInclude<ExtArgs> | null
  /**
   * The data needed to update a RevenueStream.
   */
  data: Prisma.XOR<Prisma.RevenueStreamUpdateInput, Prisma.RevenueStreamUncheckedUpdateInput>
  /**
   * Choose, which RevenueStream to update.
   */
  where: Prisma.RevenueStreamWhereUniqueInput
}

/**
 * RevenueStream updateMany
 */
export type RevenueStreamUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update RevenueStreams.
   */
  data: Prisma.XOR<Prisma.RevenueStreamUpdateManyMutationInput, Prisma.RevenueStreamUncheckedUpdateManyInput>
  /**
   * Filter which RevenueStreams to update
   */
  where?: Prisma.RevenueStreamWhereInput
  /**
   * Limit how many RevenueStreams to update.
   */
  limit?: number
}

/**
 * RevenueStream updateManyAndReturn
 */
export type RevenueStreamUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RevenueStream
   */
  select?: Prisma.RevenueStreamSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RevenueStream
   */
  omit?: Prisma.RevenueStreamOmit<ExtArgs> | null
  /**
   * The data used to update RevenueStreams.
   */
  data: Prisma.XOR<Prisma.RevenueStreamUpdateManyMutationInput, Prisma.RevenueStreamUncheckedUpdateManyInput>
  /**
   * Filter which RevenueStreams to update
   */
  where?: Prisma.RevenueStreamWhereInput
  /**
   * Limit how many RevenueStreams to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RevenueStreamIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * RevenueStream upsert
 */
export type RevenueStreamUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RevenueStream
   */
  select?: Prisma.RevenueStreamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RevenueStream
   */
  omit?: Prisma.RevenueStreamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RevenueStreamInclude<ExtArgs> | null
  /**
   * The filter to search for the RevenueStream to update in case it exists.
   */
  where: Prisma.RevenueStreamWhereUniqueInput
  /**
   * In case the RevenueStream found by the `where` argument doesn't exist, create a new RevenueStream with this data.
   */
  create: Prisma.XOR<Prisma.RevenueStreamCreateInput, Prisma.RevenueStreamUncheckedCreateInput>
  /**
   * In case the RevenueStream was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RevenueStreamUpdateInput, Prisma.RevenueStreamUncheckedUpdateInput>
}

/**
 * RevenueStream delete
 */
export type RevenueStreamDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RevenueStream
   */
  select?: Prisma.RevenueStreamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RevenueStream
   */
  omit?: Prisma.RevenueStreamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RevenueStreamInclude<ExtArgs> | null
  /**
   * Filter which RevenueStream to delete.
   */
  where: Prisma.RevenueStreamWhereUniqueInput
}

/**
 * RevenueStream deleteMany
 */
export type RevenueStreamDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RevenueStreams to delete
   */
  where?: Prisma.RevenueStreamWhereInput
  /**
   * Limit how many RevenueStreams to delete.
   */
  limit?: number
}

/**
 * RevenueStream without action
 */
export type RevenueStreamDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RevenueStream
   */
  select?: Prisma.RevenueStreamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RevenueStream
   */
  omit?: Prisma.RevenueStreamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RevenueStreamInclude<ExtArgs> | null
}
