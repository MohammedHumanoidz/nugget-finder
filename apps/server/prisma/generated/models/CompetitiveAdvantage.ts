
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `CompetitiveAdvantage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CompetitiveAdvantage
 * 
 */
export type CompetitiveAdvantageModel = runtime.Types.Result.DefaultSelection<Prisma.$CompetitiveAdvantagePayload>

export type AggregateCompetitiveAdvantage = {
  _count: CompetitiveAdvantageCountAggregateOutputType | null
  _min: CompetitiveAdvantageMinAggregateOutputType | null
  _max: CompetitiveAdvantageMaxAggregateOutputType | null
}

export type CompetitiveAdvantageMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  sustainability: string | null
  impact: string | null
  createdAt: Date | null
  updatedAt: Date | null
  dailyIdeaId: string | null
}

export type CompetitiveAdvantageMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  sustainability: string | null
  impact: string | null
  createdAt: Date | null
  updatedAt: Date | null
  dailyIdeaId: string | null
}

export type CompetitiveAdvantageCountAggregateOutputType = {
  id: number
  title: number
  description: number
  sustainability: number
  impact: number
  createdAt: number
  updatedAt: number
  dailyIdeaId: number
  _all: number
}


export type CompetitiveAdvantageMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  sustainability?: true
  impact?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
}

export type CompetitiveAdvantageMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  sustainability?: true
  impact?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
}

export type CompetitiveAdvantageCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  sustainability?: true
  impact?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
  _all?: true
}

export type CompetitiveAdvantageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CompetitiveAdvantage to aggregate.
   */
  where?: Prisma.CompetitiveAdvantageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CompetitiveAdvantages to fetch.
   */
  orderBy?: Prisma.CompetitiveAdvantageOrderByWithRelationInput | Prisma.CompetitiveAdvantageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CompetitiveAdvantageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CompetitiveAdvantages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CompetitiveAdvantages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CompetitiveAdvantages
  **/
  _count?: true | CompetitiveAdvantageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CompetitiveAdvantageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CompetitiveAdvantageMaxAggregateInputType
}

export type GetCompetitiveAdvantageAggregateType<T extends CompetitiveAdvantageAggregateArgs> = {
      [P in keyof T & keyof AggregateCompetitiveAdvantage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCompetitiveAdvantage[P]>
    : Prisma.GetScalarType<T[P], AggregateCompetitiveAdvantage[P]>
}




export type CompetitiveAdvantageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CompetitiveAdvantageWhereInput
  orderBy?: Prisma.CompetitiveAdvantageOrderByWithAggregationInput | Prisma.CompetitiveAdvantageOrderByWithAggregationInput[]
  by: Prisma.CompetitiveAdvantageScalarFieldEnum[] | Prisma.CompetitiveAdvantageScalarFieldEnum
  having?: Prisma.CompetitiveAdvantageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CompetitiveAdvantageCountAggregateInputType | true
  _min?: CompetitiveAdvantageMinAggregateInputType
  _max?: CompetitiveAdvantageMaxAggregateInputType
}

export type CompetitiveAdvantageGroupByOutputType = {
  id: string
  title: string
  description: string
  sustainability: string
  impact: string
  createdAt: Date
  updatedAt: Date
  dailyIdeaId: string
  _count: CompetitiveAdvantageCountAggregateOutputType | null
  _min: CompetitiveAdvantageMinAggregateOutputType | null
  _max: CompetitiveAdvantageMaxAggregateOutputType | null
}

type GetCompetitiveAdvantageGroupByPayload<T extends CompetitiveAdvantageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CompetitiveAdvantageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CompetitiveAdvantageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CompetitiveAdvantageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CompetitiveAdvantageGroupByOutputType[P]>
      }
    >
  > 



export type CompetitiveAdvantageWhereInput = {
  AND?: Prisma.CompetitiveAdvantageWhereInput | Prisma.CompetitiveAdvantageWhereInput[]
  OR?: Prisma.CompetitiveAdvantageWhereInput[]
  NOT?: Prisma.CompetitiveAdvantageWhereInput | Prisma.CompetitiveAdvantageWhereInput[]
  id?: Prisma.StringFilter<"CompetitiveAdvantage"> | string
  title?: Prisma.StringFilter<"CompetitiveAdvantage"> | string
  description?: Prisma.StringFilter<"CompetitiveAdvantage"> | string
  sustainability?: Prisma.StringFilter<"CompetitiveAdvantage"> | string
  impact?: Prisma.StringFilter<"CompetitiveAdvantage"> | string
  createdAt?: Prisma.DateTimeFilter<"CompetitiveAdvantage"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CompetitiveAdvantage"> | Date | string
  dailyIdeaId?: Prisma.StringFilter<"CompetitiveAdvantage"> | string
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaScalarRelationFilter, Prisma.DailyIdeaWhereInput>
}

export type CompetitiveAdvantageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  sustainability?: Prisma.SortOrder
  impact?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
  dailyIdea?: Prisma.DailyIdeaOrderByWithRelationInput
}

export type CompetitiveAdvantageWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  dailyIdeaId?: string
  AND?: Prisma.CompetitiveAdvantageWhereInput | Prisma.CompetitiveAdvantageWhereInput[]
  OR?: Prisma.CompetitiveAdvantageWhereInput[]
  NOT?: Prisma.CompetitiveAdvantageWhereInput | Prisma.CompetitiveAdvantageWhereInput[]
  title?: Prisma.StringFilter<"CompetitiveAdvantage"> | string
  description?: Prisma.StringFilter<"CompetitiveAdvantage"> | string
  sustainability?: Prisma.StringFilter<"CompetitiveAdvantage"> | string
  impact?: Prisma.StringFilter<"CompetitiveAdvantage"> | string
  createdAt?: Prisma.DateTimeFilter<"CompetitiveAdvantage"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CompetitiveAdvantage"> | Date | string
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaScalarRelationFilter, Prisma.DailyIdeaWhereInput>
}, "id" | "dailyIdeaId">

export type CompetitiveAdvantageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  sustainability?: Prisma.SortOrder
  impact?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
  _count?: Prisma.CompetitiveAdvantageCountOrderByAggregateInput
  _max?: Prisma.CompetitiveAdvantageMaxOrderByAggregateInput
  _min?: Prisma.CompetitiveAdvantageMinOrderByAggregateInput
}

export type CompetitiveAdvantageScalarWhereWithAggregatesInput = {
  AND?: Prisma.CompetitiveAdvantageScalarWhereWithAggregatesInput | Prisma.CompetitiveAdvantageScalarWhereWithAggregatesInput[]
  OR?: Prisma.CompetitiveAdvantageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CompetitiveAdvantageScalarWhereWithAggregatesInput | Prisma.CompetitiveAdvantageScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CompetitiveAdvantage"> | string
  title?: Prisma.StringWithAggregatesFilter<"CompetitiveAdvantage"> | string
  description?: Prisma.StringWithAggregatesFilter<"CompetitiveAdvantage"> | string
  sustainability?: Prisma.StringWithAggregatesFilter<"CompetitiveAdvantage"> | string
  impact?: Prisma.StringWithAggregatesFilter<"CompetitiveAdvantage"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"CompetitiveAdvantage"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"CompetitiveAdvantage"> | Date | string
  dailyIdeaId?: Prisma.StringWithAggregatesFilter<"CompetitiveAdvantage"> | string
}

export type CompetitiveAdvantageCreateInput = {
  id?: string
  title: string
  description: string
  sustainability: string
  impact: string
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdea: Prisma.DailyIdeaCreateNestedOneWithoutCompetitiveAdvantageInput
}

export type CompetitiveAdvantageUncheckedCreateInput = {
  id?: string
  title: string
  description: string
  sustainability: string
  impact: string
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdeaId: string
}

export type CompetitiveAdvantageUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  sustainability?: Prisma.StringFieldUpdateOperationsInput | string
  impact?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdea?: Prisma.DailyIdeaUpdateOneRequiredWithoutCompetitiveAdvantageNestedInput
}

export type CompetitiveAdvantageUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  sustainability?: Prisma.StringFieldUpdateOperationsInput | string
  impact?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdeaId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CompetitiveAdvantageCreateManyInput = {
  id?: string
  title: string
  description: string
  sustainability: string
  impact: string
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdeaId: string
}

export type CompetitiveAdvantageUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  sustainability?: Prisma.StringFieldUpdateOperationsInput | string
  impact?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CompetitiveAdvantageUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  sustainability?: Prisma.StringFieldUpdateOperationsInput | string
  impact?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdeaId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CompetitiveAdvantageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  sustainability?: Prisma.SortOrder
  impact?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type CompetitiveAdvantageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  sustainability?: Prisma.SortOrder
  impact?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type CompetitiveAdvantageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  sustainability?: Prisma.SortOrder
  impact?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type CompetitiveAdvantageNullableScalarRelationFilter = {
  is?: Prisma.CompetitiveAdvantageWhereInput | null
  isNot?: Prisma.CompetitiveAdvantageWhereInput | null
}

export type CompetitiveAdvantageCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.CompetitiveAdvantageCreateWithoutDailyIdeaInput, Prisma.CompetitiveAdvantageUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.CompetitiveAdvantageCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.CompetitiveAdvantageWhereUniqueInput
}

export type CompetitiveAdvantageUncheckedCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.CompetitiveAdvantageCreateWithoutDailyIdeaInput, Prisma.CompetitiveAdvantageUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.CompetitiveAdvantageCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.CompetitiveAdvantageWhereUniqueInput
}

export type CompetitiveAdvantageUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.CompetitiveAdvantageCreateWithoutDailyIdeaInput, Prisma.CompetitiveAdvantageUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.CompetitiveAdvantageCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.CompetitiveAdvantageUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.CompetitiveAdvantageWhereInput | boolean
  delete?: Prisma.CompetitiveAdvantageWhereInput | boolean
  connect?: Prisma.CompetitiveAdvantageWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CompetitiveAdvantageUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.CompetitiveAdvantageUpdateWithoutDailyIdeaInput>, Prisma.CompetitiveAdvantageUncheckedUpdateWithoutDailyIdeaInput>
}

export type CompetitiveAdvantageUncheckedUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.CompetitiveAdvantageCreateWithoutDailyIdeaInput, Prisma.CompetitiveAdvantageUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.CompetitiveAdvantageCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.CompetitiveAdvantageUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.CompetitiveAdvantageWhereInput | boolean
  delete?: Prisma.CompetitiveAdvantageWhereInput | boolean
  connect?: Prisma.CompetitiveAdvantageWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CompetitiveAdvantageUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.CompetitiveAdvantageUpdateWithoutDailyIdeaInput>, Prisma.CompetitiveAdvantageUncheckedUpdateWithoutDailyIdeaInput>
}

export type CompetitiveAdvantageCreateWithoutDailyIdeaInput = {
  id?: string
  title: string
  description: string
  sustainability: string
  impact: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CompetitiveAdvantageUncheckedCreateWithoutDailyIdeaInput = {
  id?: string
  title: string
  description: string
  sustainability: string
  impact: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CompetitiveAdvantageCreateOrConnectWithoutDailyIdeaInput = {
  where: Prisma.CompetitiveAdvantageWhereUniqueInput
  create: Prisma.XOR<Prisma.CompetitiveAdvantageCreateWithoutDailyIdeaInput, Prisma.CompetitiveAdvantageUncheckedCreateWithoutDailyIdeaInput>
}

export type CompetitiveAdvantageUpsertWithoutDailyIdeaInput = {
  update: Prisma.XOR<Prisma.CompetitiveAdvantageUpdateWithoutDailyIdeaInput, Prisma.CompetitiveAdvantageUncheckedUpdateWithoutDailyIdeaInput>
  create: Prisma.XOR<Prisma.CompetitiveAdvantageCreateWithoutDailyIdeaInput, Prisma.CompetitiveAdvantageUncheckedCreateWithoutDailyIdeaInput>
  where?: Prisma.CompetitiveAdvantageWhereInput
}

export type CompetitiveAdvantageUpdateToOneWithWhereWithoutDailyIdeaInput = {
  where?: Prisma.CompetitiveAdvantageWhereInput
  data: Prisma.XOR<Prisma.CompetitiveAdvantageUpdateWithoutDailyIdeaInput, Prisma.CompetitiveAdvantageUncheckedUpdateWithoutDailyIdeaInput>
}

export type CompetitiveAdvantageUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  sustainability?: Prisma.StringFieldUpdateOperationsInput | string
  impact?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CompetitiveAdvantageUncheckedUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  sustainability?: Prisma.StringFieldUpdateOperationsInput | string
  impact?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CompetitiveAdvantageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  sustainability?: boolean
  impact?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["competitiveAdvantage"]>

export type CompetitiveAdvantageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  sustainability?: boolean
  impact?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["competitiveAdvantage"]>

export type CompetitiveAdvantageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  sustainability?: boolean
  impact?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["competitiveAdvantage"]>

export type CompetitiveAdvantageSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  sustainability?: boolean
  impact?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
}

export type CompetitiveAdvantageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "sustainability" | "impact" | "createdAt" | "updatedAt" | "dailyIdeaId", ExtArgs["result"]["competitiveAdvantage"]>
export type CompetitiveAdvantageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}
export type CompetitiveAdvantageIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}
export type CompetitiveAdvantageIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}

export type $CompetitiveAdvantagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CompetitiveAdvantage"
  objects: {
    dailyIdea: Prisma.$DailyIdeaPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    description: string
    sustainability: string
    impact: string
    createdAt: Date
    updatedAt: Date
    dailyIdeaId: string
  }, ExtArgs["result"]["competitiveAdvantage"]>
  composites: {}
}

export type CompetitiveAdvantageGetPayload<S extends boolean | null | undefined | CompetitiveAdvantageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CompetitiveAdvantagePayload, S>

export type CompetitiveAdvantageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CompetitiveAdvantageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CompetitiveAdvantageCountAggregateInputType | true
  }

export interface CompetitiveAdvantageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompetitiveAdvantage'], meta: { name: 'CompetitiveAdvantage' } }
  /**
   * Find zero or one CompetitiveAdvantage that matches the filter.
   * @param {CompetitiveAdvantageFindUniqueArgs} args - Arguments to find a CompetitiveAdvantage
   * @example
   * // Get one CompetitiveAdvantage
   * const competitiveAdvantage = await prisma.competitiveAdvantage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CompetitiveAdvantageFindUniqueArgs>(args: Prisma.SelectSubset<T, CompetitiveAdvantageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CompetitiveAdvantageClient<runtime.Types.Result.GetResult<Prisma.$CompetitiveAdvantagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CompetitiveAdvantage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CompetitiveAdvantageFindUniqueOrThrowArgs} args - Arguments to find a CompetitiveAdvantage
   * @example
   * // Get one CompetitiveAdvantage
   * const competitiveAdvantage = await prisma.competitiveAdvantage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CompetitiveAdvantageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CompetitiveAdvantageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CompetitiveAdvantageClient<runtime.Types.Result.GetResult<Prisma.$CompetitiveAdvantagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CompetitiveAdvantage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompetitiveAdvantageFindFirstArgs} args - Arguments to find a CompetitiveAdvantage
   * @example
   * // Get one CompetitiveAdvantage
   * const competitiveAdvantage = await prisma.competitiveAdvantage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CompetitiveAdvantageFindFirstArgs>(args?: Prisma.SelectSubset<T, CompetitiveAdvantageFindFirstArgs<ExtArgs>>): Prisma.Prisma__CompetitiveAdvantageClient<runtime.Types.Result.GetResult<Prisma.$CompetitiveAdvantagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CompetitiveAdvantage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompetitiveAdvantageFindFirstOrThrowArgs} args - Arguments to find a CompetitiveAdvantage
   * @example
   * // Get one CompetitiveAdvantage
   * const competitiveAdvantage = await prisma.competitiveAdvantage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CompetitiveAdvantageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CompetitiveAdvantageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CompetitiveAdvantageClient<runtime.Types.Result.GetResult<Prisma.$CompetitiveAdvantagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CompetitiveAdvantages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompetitiveAdvantageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CompetitiveAdvantages
   * const competitiveAdvantages = await prisma.competitiveAdvantage.findMany()
   * 
   * // Get first 10 CompetitiveAdvantages
   * const competitiveAdvantages = await prisma.competitiveAdvantage.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const competitiveAdvantageWithIdOnly = await prisma.competitiveAdvantage.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CompetitiveAdvantageFindManyArgs>(args?: Prisma.SelectSubset<T, CompetitiveAdvantageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompetitiveAdvantagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CompetitiveAdvantage.
   * @param {CompetitiveAdvantageCreateArgs} args - Arguments to create a CompetitiveAdvantage.
   * @example
   * // Create one CompetitiveAdvantage
   * const CompetitiveAdvantage = await prisma.competitiveAdvantage.create({
   *   data: {
   *     // ... data to create a CompetitiveAdvantage
   *   }
   * })
   * 
   */
  create<T extends CompetitiveAdvantageCreateArgs>(args: Prisma.SelectSubset<T, CompetitiveAdvantageCreateArgs<ExtArgs>>): Prisma.Prisma__CompetitiveAdvantageClient<runtime.Types.Result.GetResult<Prisma.$CompetitiveAdvantagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CompetitiveAdvantages.
   * @param {CompetitiveAdvantageCreateManyArgs} args - Arguments to create many CompetitiveAdvantages.
   * @example
   * // Create many CompetitiveAdvantages
   * const competitiveAdvantage = await prisma.competitiveAdvantage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CompetitiveAdvantageCreateManyArgs>(args?: Prisma.SelectSubset<T, CompetitiveAdvantageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CompetitiveAdvantages and returns the data saved in the database.
   * @param {CompetitiveAdvantageCreateManyAndReturnArgs} args - Arguments to create many CompetitiveAdvantages.
   * @example
   * // Create many CompetitiveAdvantages
   * const competitiveAdvantage = await prisma.competitiveAdvantage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CompetitiveAdvantages and only return the `id`
   * const competitiveAdvantageWithIdOnly = await prisma.competitiveAdvantage.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CompetitiveAdvantageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CompetitiveAdvantageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompetitiveAdvantagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CompetitiveAdvantage.
   * @param {CompetitiveAdvantageDeleteArgs} args - Arguments to delete one CompetitiveAdvantage.
   * @example
   * // Delete one CompetitiveAdvantage
   * const CompetitiveAdvantage = await prisma.competitiveAdvantage.delete({
   *   where: {
   *     // ... filter to delete one CompetitiveAdvantage
   *   }
   * })
   * 
   */
  delete<T extends CompetitiveAdvantageDeleteArgs>(args: Prisma.SelectSubset<T, CompetitiveAdvantageDeleteArgs<ExtArgs>>): Prisma.Prisma__CompetitiveAdvantageClient<runtime.Types.Result.GetResult<Prisma.$CompetitiveAdvantagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CompetitiveAdvantage.
   * @param {CompetitiveAdvantageUpdateArgs} args - Arguments to update one CompetitiveAdvantage.
   * @example
   * // Update one CompetitiveAdvantage
   * const competitiveAdvantage = await prisma.competitiveAdvantage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CompetitiveAdvantageUpdateArgs>(args: Prisma.SelectSubset<T, CompetitiveAdvantageUpdateArgs<ExtArgs>>): Prisma.Prisma__CompetitiveAdvantageClient<runtime.Types.Result.GetResult<Prisma.$CompetitiveAdvantagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CompetitiveAdvantages.
   * @param {CompetitiveAdvantageDeleteManyArgs} args - Arguments to filter CompetitiveAdvantages to delete.
   * @example
   * // Delete a few CompetitiveAdvantages
   * const { count } = await prisma.competitiveAdvantage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CompetitiveAdvantageDeleteManyArgs>(args?: Prisma.SelectSubset<T, CompetitiveAdvantageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CompetitiveAdvantages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompetitiveAdvantageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CompetitiveAdvantages
   * const competitiveAdvantage = await prisma.competitiveAdvantage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CompetitiveAdvantageUpdateManyArgs>(args: Prisma.SelectSubset<T, CompetitiveAdvantageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CompetitiveAdvantages and returns the data updated in the database.
   * @param {CompetitiveAdvantageUpdateManyAndReturnArgs} args - Arguments to update many CompetitiveAdvantages.
   * @example
   * // Update many CompetitiveAdvantages
   * const competitiveAdvantage = await prisma.competitiveAdvantage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CompetitiveAdvantages and only return the `id`
   * const competitiveAdvantageWithIdOnly = await prisma.competitiveAdvantage.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CompetitiveAdvantageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CompetitiveAdvantageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompetitiveAdvantagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CompetitiveAdvantage.
   * @param {CompetitiveAdvantageUpsertArgs} args - Arguments to update or create a CompetitiveAdvantage.
   * @example
   * // Update or create a CompetitiveAdvantage
   * const competitiveAdvantage = await prisma.competitiveAdvantage.upsert({
   *   create: {
   *     // ... data to create a CompetitiveAdvantage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CompetitiveAdvantage we want to update
   *   }
   * })
   */
  upsert<T extends CompetitiveAdvantageUpsertArgs>(args: Prisma.SelectSubset<T, CompetitiveAdvantageUpsertArgs<ExtArgs>>): Prisma.Prisma__CompetitiveAdvantageClient<runtime.Types.Result.GetResult<Prisma.$CompetitiveAdvantagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CompetitiveAdvantages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompetitiveAdvantageCountArgs} args - Arguments to filter CompetitiveAdvantages to count.
   * @example
   * // Count the number of CompetitiveAdvantages
   * const count = await prisma.competitiveAdvantage.count({
   *   where: {
   *     // ... the filter for the CompetitiveAdvantages we want to count
   *   }
   * })
  **/
  count<T extends CompetitiveAdvantageCountArgs>(
    args?: Prisma.Subset<T, CompetitiveAdvantageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CompetitiveAdvantageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CompetitiveAdvantage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompetitiveAdvantageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CompetitiveAdvantageAggregateArgs>(args: Prisma.Subset<T, CompetitiveAdvantageAggregateArgs>): Prisma.PrismaPromise<GetCompetitiveAdvantageAggregateType<T>>

  /**
   * Group by CompetitiveAdvantage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompetitiveAdvantageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CompetitiveAdvantageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CompetitiveAdvantageGroupByArgs['orderBy'] }
      : { orderBy?: CompetitiveAdvantageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CompetitiveAdvantageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompetitiveAdvantageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CompetitiveAdvantage model
 */
readonly fields: CompetitiveAdvantageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CompetitiveAdvantage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CompetitiveAdvantageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  dailyIdea<T extends Prisma.DailyIdeaDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdeaDefaultArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CompetitiveAdvantage model
 */
export interface CompetitiveAdvantageFieldRefs {
  readonly id: Prisma.FieldRef<"CompetitiveAdvantage", 'String'>
  readonly title: Prisma.FieldRef<"CompetitiveAdvantage", 'String'>
  readonly description: Prisma.FieldRef<"CompetitiveAdvantage", 'String'>
  readonly sustainability: Prisma.FieldRef<"CompetitiveAdvantage", 'String'>
  readonly impact: Prisma.FieldRef<"CompetitiveAdvantage", 'String'>
  readonly createdAt: Prisma.FieldRef<"CompetitiveAdvantage", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"CompetitiveAdvantage", 'DateTime'>
  readonly dailyIdeaId: Prisma.FieldRef<"CompetitiveAdvantage", 'String'>
}
    

// Custom InputTypes
/**
 * CompetitiveAdvantage findUnique
 */
export type CompetitiveAdvantageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompetitiveAdvantage
   */
  select?: Prisma.CompetitiveAdvantageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompetitiveAdvantage
   */
  omit?: Prisma.CompetitiveAdvantageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitiveAdvantageInclude<ExtArgs> | null
  /**
   * Filter, which CompetitiveAdvantage to fetch.
   */
  where: Prisma.CompetitiveAdvantageWhereUniqueInput
}

/**
 * CompetitiveAdvantage findUniqueOrThrow
 */
export type CompetitiveAdvantageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompetitiveAdvantage
   */
  select?: Prisma.CompetitiveAdvantageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompetitiveAdvantage
   */
  omit?: Prisma.CompetitiveAdvantageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitiveAdvantageInclude<ExtArgs> | null
  /**
   * Filter, which CompetitiveAdvantage to fetch.
   */
  where: Prisma.CompetitiveAdvantageWhereUniqueInput
}

/**
 * CompetitiveAdvantage findFirst
 */
export type CompetitiveAdvantageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompetitiveAdvantage
   */
  select?: Prisma.CompetitiveAdvantageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompetitiveAdvantage
   */
  omit?: Prisma.CompetitiveAdvantageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitiveAdvantageInclude<ExtArgs> | null
  /**
   * Filter, which CompetitiveAdvantage to fetch.
   */
  where?: Prisma.CompetitiveAdvantageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CompetitiveAdvantages to fetch.
   */
  orderBy?: Prisma.CompetitiveAdvantageOrderByWithRelationInput | Prisma.CompetitiveAdvantageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CompetitiveAdvantages.
   */
  cursor?: Prisma.CompetitiveAdvantageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CompetitiveAdvantages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CompetitiveAdvantages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CompetitiveAdvantages.
   */
  distinct?: Prisma.CompetitiveAdvantageScalarFieldEnum | Prisma.CompetitiveAdvantageScalarFieldEnum[]
}

/**
 * CompetitiveAdvantage findFirstOrThrow
 */
export type CompetitiveAdvantageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompetitiveAdvantage
   */
  select?: Prisma.CompetitiveAdvantageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompetitiveAdvantage
   */
  omit?: Prisma.CompetitiveAdvantageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitiveAdvantageInclude<ExtArgs> | null
  /**
   * Filter, which CompetitiveAdvantage to fetch.
   */
  where?: Prisma.CompetitiveAdvantageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CompetitiveAdvantages to fetch.
   */
  orderBy?: Prisma.CompetitiveAdvantageOrderByWithRelationInput | Prisma.CompetitiveAdvantageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CompetitiveAdvantages.
   */
  cursor?: Prisma.CompetitiveAdvantageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CompetitiveAdvantages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CompetitiveAdvantages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CompetitiveAdvantages.
   */
  distinct?: Prisma.CompetitiveAdvantageScalarFieldEnum | Prisma.CompetitiveAdvantageScalarFieldEnum[]
}

/**
 * CompetitiveAdvantage findMany
 */
export type CompetitiveAdvantageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompetitiveAdvantage
   */
  select?: Prisma.CompetitiveAdvantageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompetitiveAdvantage
   */
  omit?: Prisma.CompetitiveAdvantageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitiveAdvantageInclude<ExtArgs> | null
  /**
   * Filter, which CompetitiveAdvantages to fetch.
   */
  where?: Prisma.CompetitiveAdvantageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CompetitiveAdvantages to fetch.
   */
  orderBy?: Prisma.CompetitiveAdvantageOrderByWithRelationInput | Prisma.CompetitiveAdvantageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CompetitiveAdvantages.
   */
  cursor?: Prisma.CompetitiveAdvantageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CompetitiveAdvantages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CompetitiveAdvantages.
   */
  skip?: number
  distinct?: Prisma.CompetitiveAdvantageScalarFieldEnum | Prisma.CompetitiveAdvantageScalarFieldEnum[]
}

/**
 * CompetitiveAdvantage create
 */
export type CompetitiveAdvantageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompetitiveAdvantage
   */
  select?: Prisma.CompetitiveAdvantageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompetitiveAdvantage
   */
  omit?: Prisma.CompetitiveAdvantageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitiveAdvantageInclude<ExtArgs> | null
  /**
   * The data needed to create a CompetitiveAdvantage.
   */
  data: Prisma.XOR<Prisma.CompetitiveAdvantageCreateInput, Prisma.CompetitiveAdvantageUncheckedCreateInput>
}

/**
 * CompetitiveAdvantage createMany
 */
export type CompetitiveAdvantageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CompetitiveAdvantages.
   */
  data: Prisma.CompetitiveAdvantageCreateManyInput | Prisma.CompetitiveAdvantageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CompetitiveAdvantage createManyAndReturn
 */
export type CompetitiveAdvantageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompetitiveAdvantage
   */
  select?: Prisma.CompetitiveAdvantageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CompetitiveAdvantage
   */
  omit?: Prisma.CompetitiveAdvantageOmit<ExtArgs> | null
  /**
   * The data used to create many CompetitiveAdvantages.
   */
  data: Prisma.CompetitiveAdvantageCreateManyInput | Prisma.CompetitiveAdvantageCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitiveAdvantageIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CompetitiveAdvantage update
 */
export type CompetitiveAdvantageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompetitiveAdvantage
   */
  select?: Prisma.CompetitiveAdvantageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompetitiveAdvantage
   */
  omit?: Prisma.CompetitiveAdvantageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitiveAdvantageInclude<ExtArgs> | null
  /**
   * The data needed to update a CompetitiveAdvantage.
   */
  data: Prisma.XOR<Prisma.CompetitiveAdvantageUpdateInput, Prisma.CompetitiveAdvantageUncheckedUpdateInput>
  /**
   * Choose, which CompetitiveAdvantage to update.
   */
  where: Prisma.CompetitiveAdvantageWhereUniqueInput
}

/**
 * CompetitiveAdvantage updateMany
 */
export type CompetitiveAdvantageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CompetitiveAdvantages.
   */
  data: Prisma.XOR<Prisma.CompetitiveAdvantageUpdateManyMutationInput, Prisma.CompetitiveAdvantageUncheckedUpdateManyInput>
  /**
   * Filter which CompetitiveAdvantages to update
   */
  where?: Prisma.CompetitiveAdvantageWhereInput
  /**
   * Limit how many CompetitiveAdvantages to update.
   */
  limit?: number
}

/**
 * CompetitiveAdvantage updateManyAndReturn
 */
export type CompetitiveAdvantageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompetitiveAdvantage
   */
  select?: Prisma.CompetitiveAdvantageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CompetitiveAdvantage
   */
  omit?: Prisma.CompetitiveAdvantageOmit<ExtArgs> | null
  /**
   * The data used to update CompetitiveAdvantages.
   */
  data: Prisma.XOR<Prisma.CompetitiveAdvantageUpdateManyMutationInput, Prisma.CompetitiveAdvantageUncheckedUpdateManyInput>
  /**
   * Filter which CompetitiveAdvantages to update
   */
  where?: Prisma.CompetitiveAdvantageWhereInput
  /**
   * Limit how many CompetitiveAdvantages to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitiveAdvantageIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CompetitiveAdvantage upsert
 */
export type CompetitiveAdvantageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompetitiveAdvantage
   */
  select?: Prisma.CompetitiveAdvantageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompetitiveAdvantage
   */
  omit?: Prisma.CompetitiveAdvantageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitiveAdvantageInclude<ExtArgs> | null
  /**
   * The filter to search for the CompetitiveAdvantage to update in case it exists.
   */
  where: Prisma.CompetitiveAdvantageWhereUniqueInput
  /**
   * In case the CompetitiveAdvantage found by the `where` argument doesn't exist, create a new CompetitiveAdvantage with this data.
   */
  create: Prisma.XOR<Prisma.CompetitiveAdvantageCreateInput, Prisma.CompetitiveAdvantageUncheckedCreateInput>
  /**
   * In case the CompetitiveAdvantage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CompetitiveAdvantageUpdateInput, Prisma.CompetitiveAdvantageUncheckedUpdateInput>
}

/**
 * CompetitiveAdvantage delete
 */
export type CompetitiveAdvantageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompetitiveAdvantage
   */
  select?: Prisma.CompetitiveAdvantageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompetitiveAdvantage
   */
  omit?: Prisma.CompetitiveAdvantageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitiveAdvantageInclude<ExtArgs> | null
  /**
   * Filter which CompetitiveAdvantage to delete.
   */
  where: Prisma.CompetitiveAdvantageWhereUniqueInput
}

/**
 * CompetitiveAdvantage deleteMany
 */
export type CompetitiveAdvantageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CompetitiveAdvantages to delete
   */
  where?: Prisma.CompetitiveAdvantageWhereInput
  /**
   * Limit how many CompetitiveAdvantages to delete.
   */
  limit?: number
}

/**
 * CompetitiveAdvantage without action
 */
export type CompetitiveAdvantageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompetitiveAdvantage
   */
  select?: Prisma.CompetitiveAdvantageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompetitiveAdvantage
   */
  omit?: Prisma.CompetitiveAdvantageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitiveAdvantageInclude<ExtArgs> | null
}
