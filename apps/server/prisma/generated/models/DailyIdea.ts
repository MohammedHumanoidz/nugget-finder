
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `DailyIdea` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DailyIdea
 * 
 */
export type DailyIdeaModel = runtime.Types.Result.DefaultSelection<Prisma.$DailyIdeaPayload>

export type AggregateDailyIdea = {
  _count: DailyIdeaCountAggregateOutputType | null
  _avg: DailyIdeaAvgAggregateOutputType | null
  _sum: DailyIdeaSumAggregateOutputType | null
  _min: DailyIdeaMinAggregateOutputType | null
  _max: DailyIdeaMaxAggregateOutputType | null
}

export type DailyIdeaAvgAggregateOutputType = {
  innovationLevel: number | null
  timeToMarket: number | null
  confidenceScore: number | null
  urgencyLevel: number | null
  executionComplexity: number | null
}

export type DailyIdeaSumAggregateOutputType = {
  innovationLevel: number | null
  timeToMarket: number | null
  confidenceScore: number | null
  urgencyLevel: number | null
  executionComplexity: number | null
}

export type DailyIdeaMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  executiveSummary: string | null
  problemSolution: string | null
  problemStatement: string | null
  innovationLevel: number | null
  timeToMarket: number | null
  confidenceScore: number | null
  narrativeHook: string | null
  urgencyLevel: number | null
  executionComplexity: number | null
  ideaScoreId: string | null
  marketOpportunityId: string | null
  monetizationStrategyId: string | null
  whyNowId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DailyIdeaMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  executiveSummary: string | null
  problemSolution: string | null
  problemStatement: string | null
  innovationLevel: number | null
  timeToMarket: number | null
  confidenceScore: number | null
  narrativeHook: string | null
  urgencyLevel: number | null
  executionComplexity: number | null
  ideaScoreId: string | null
  marketOpportunityId: string | null
  monetizationStrategyId: string | null
  whyNowId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DailyIdeaCountAggregateOutputType = {
  id: number
  title: number
  description: number
  executiveSummary: number
  problemSolution: number
  problemStatement: number
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: number
  targetKeywords: number
  urgencyLevel: number
  executionComplexity: number
  tags: number
  ideaScoreId: number
  marketOpportunityId: number
  monetizationStrategyId: number
  whyNowId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type DailyIdeaAvgAggregateInputType = {
  innovationLevel?: true
  timeToMarket?: true
  confidenceScore?: true
  urgencyLevel?: true
  executionComplexity?: true
}

export type DailyIdeaSumAggregateInputType = {
  innovationLevel?: true
  timeToMarket?: true
  confidenceScore?: true
  urgencyLevel?: true
  executionComplexity?: true
}

export type DailyIdeaMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  executiveSummary?: true
  problemSolution?: true
  problemStatement?: true
  innovationLevel?: true
  timeToMarket?: true
  confidenceScore?: true
  narrativeHook?: true
  urgencyLevel?: true
  executionComplexity?: true
  ideaScoreId?: true
  marketOpportunityId?: true
  monetizationStrategyId?: true
  whyNowId?: true
  createdAt?: true
  updatedAt?: true
}

export type DailyIdeaMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  executiveSummary?: true
  problemSolution?: true
  problemStatement?: true
  innovationLevel?: true
  timeToMarket?: true
  confidenceScore?: true
  narrativeHook?: true
  urgencyLevel?: true
  executionComplexity?: true
  ideaScoreId?: true
  marketOpportunityId?: true
  monetizationStrategyId?: true
  whyNowId?: true
  createdAt?: true
  updatedAt?: true
}

export type DailyIdeaCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  executiveSummary?: true
  problemSolution?: true
  problemStatement?: true
  innovationLevel?: true
  timeToMarket?: true
  confidenceScore?: true
  narrativeHook?: true
  targetKeywords?: true
  urgencyLevel?: true
  executionComplexity?: true
  tags?: true
  ideaScoreId?: true
  marketOpportunityId?: true
  monetizationStrategyId?: true
  whyNowId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type DailyIdeaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DailyIdea to aggregate.
   */
  where?: Prisma.DailyIdeaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DailyIdeas to fetch.
   */
  orderBy?: Prisma.DailyIdeaOrderByWithRelationInput | Prisma.DailyIdeaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DailyIdeaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DailyIdeas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DailyIdeas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DailyIdeas
  **/
  _count?: true | DailyIdeaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DailyIdeaAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DailyIdeaSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DailyIdeaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DailyIdeaMaxAggregateInputType
}

export type GetDailyIdeaAggregateType<T extends DailyIdeaAggregateArgs> = {
      [P in keyof T & keyof AggregateDailyIdea]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDailyIdea[P]>
    : Prisma.GetScalarType<T[P], AggregateDailyIdea[P]>
}




export type DailyIdeaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DailyIdeaWhereInput
  orderBy?: Prisma.DailyIdeaOrderByWithAggregationInput | Prisma.DailyIdeaOrderByWithAggregationInput[]
  by: Prisma.DailyIdeaScalarFieldEnum[] | Prisma.DailyIdeaScalarFieldEnum
  having?: Prisma.DailyIdeaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DailyIdeaCountAggregateInputType | true
  _avg?: DailyIdeaAvgAggregateInputType
  _sum?: DailyIdeaSumAggregateInputType
  _min?: DailyIdeaMinAggregateInputType
  _max?: DailyIdeaMaxAggregateInputType
}

export type DailyIdeaGroupByOutputType = {
  id: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords: string[]
  urgencyLevel: number
  executionComplexity: number
  tags: string[]
  ideaScoreId: string | null
  marketOpportunityId: string | null
  monetizationStrategyId: string | null
  whyNowId: string
  createdAt: Date
  updatedAt: Date
  _count: DailyIdeaCountAggregateOutputType | null
  _avg: DailyIdeaAvgAggregateOutputType | null
  _sum: DailyIdeaSumAggregateOutputType | null
  _min: DailyIdeaMinAggregateOutputType | null
  _max: DailyIdeaMaxAggregateOutputType | null
}

type GetDailyIdeaGroupByPayload<T extends DailyIdeaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DailyIdeaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DailyIdeaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DailyIdeaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DailyIdeaGroupByOutputType[P]>
      }
    >
  > 



export type DailyIdeaWhereInput = {
  AND?: Prisma.DailyIdeaWhereInput | Prisma.DailyIdeaWhereInput[]
  OR?: Prisma.DailyIdeaWhereInput[]
  NOT?: Prisma.DailyIdeaWhereInput | Prisma.DailyIdeaWhereInput[]
  id?: Prisma.StringFilter<"DailyIdea"> | string
  title?: Prisma.StringFilter<"DailyIdea"> | string
  description?: Prisma.StringFilter<"DailyIdea"> | string
  executiveSummary?: Prisma.StringFilter<"DailyIdea"> | string
  problemSolution?: Prisma.StringFilter<"DailyIdea"> | string
  problemStatement?: Prisma.StringFilter<"DailyIdea"> | string
  innovationLevel?: Prisma.IntFilter<"DailyIdea"> | number
  timeToMarket?: Prisma.IntFilter<"DailyIdea"> | number
  confidenceScore?: Prisma.IntFilter<"DailyIdea"> | number
  narrativeHook?: Prisma.StringFilter<"DailyIdea"> | string
  targetKeywords?: Prisma.StringNullableListFilter<"DailyIdea">
  urgencyLevel?: Prisma.IntFilter<"DailyIdea"> | number
  executionComplexity?: Prisma.IntFilter<"DailyIdea"> | number
  tags?: Prisma.StringNullableListFilter<"DailyIdea">
  ideaScoreId?: Prisma.StringNullableFilter<"DailyIdea"> | string | null
  marketOpportunityId?: Prisma.StringNullableFilter<"DailyIdea"> | string | null
  monetizationStrategyId?: Prisma.StringNullableFilter<"DailyIdea"> | string | null
  whyNowId?: Prisma.StringFilter<"DailyIdea"> | string
  createdAt?: Prisma.DateTimeFilter<"DailyIdea"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DailyIdea"> | Date | string
  ideaScore?: Prisma.XOR<Prisma.IdeaScoreNullableScalarRelationFilter, Prisma.IdeaScoreWhereInput> | null
  marketOpportunity?: Prisma.XOR<Prisma.MarketOpportunityNullableScalarRelationFilter, Prisma.MarketOpportunityWhereInput> | null
  monetizationStrategy?: Prisma.XOR<Prisma.MonetizationStrategyNullableScalarRelationFilter, Prisma.MonetizationStrategyWhereInput> | null
  whyNow?: Prisma.XOR<Prisma.WhyNowScalarRelationFilter, Prisma.WhyNowWhereInput>
  marketCompetition?: Prisma.XOR<Prisma.MarketCompetitionNullableScalarRelationFilter, Prisma.MarketCompetitionWhereInput> | null
  marketGap?: Prisma.XOR<Prisma.MarketGapNullableScalarRelationFilter, Prisma.MarketGapWhereInput> | null
  competitiveAdvantage?: Prisma.XOR<Prisma.CompetitiveAdvantageNullableScalarRelationFilter, Prisma.CompetitiveAdvantageWhereInput> | null
  strategicPositioning?: Prisma.XOR<Prisma.StrategicPositioningNullableScalarRelationFilter, Prisma.StrategicPositioningWhereInput> | null
  executionPlan?: Prisma.XOR<Prisma.ExecutionPlanNullableScalarRelationFilter, Prisma.ExecutionPlanWhereInput> | null
  tractionSignals?: Prisma.XOR<Prisma.TractionSignalsNullableScalarRelationFilter, Prisma.TractionSignalsWhereInput> | null
  frameworkFit?: Prisma.XOR<Prisma.FrameworkFitNullableScalarRelationFilter, Prisma.FrameworkFitWhereInput> | null
}

export type DailyIdeaOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  executiveSummary?: Prisma.SortOrder
  problemSolution?: Prisma.SortOrder
  problemStatement?: Prisma.SortOrder
  innovationLevel?: Prisma.SortOrder
  timeToMarket?: Prisma.SortOrder
  confidenceScore?: Prisma.SortOrder
  narrativeHook?: Prisma.SortOrder
  targetKeywords?: Prisma.SortOrder
  urgencyLevel?: Prisma.SortOrder
  executionComplexity?: Prisma.SortOrder
  tags?: Prisma.SortOrder
  ideaScoreId?: Prisma.SortOrderInput | Prisma.SortOrder
  marketOpportunityId?: Prisma.SortOrderInput | Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrderInput | Prisma.SortOrder
  whyNowId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  ideaScore?: Prisma.IdeaScoreOrderByWithRelationInput
  marketOpportunity?: Prisma.MarketOpportunityOrderByWithRelationInput
  monetizationStrategy?: Prisma.MonetizationStrategyOrderByWithRelationInput
  whyNow?: Prisma.WhyNowOrderByWithRelationInput
  marketCompetition?: Prisma.MarketCompetitionOrderByWithRelationInput
  marketGap?: Prisma.MarketGapOrderByWithRelationInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageOrderByWithRelationInput
  strategicPositioning?: Prisma.StrategicPositioningOrderByWithRelationInput
  executionPlan?: Prisma.ExecutionPlanOrderByWithRelationInput
  tractionSignals?: Prisma.TractionSignalsOrderByWithRelationInput
  frameworkFit?: Prisma.FrameworkFitOrderByWithRelationInput
}

export type DailyIdeaWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  ideaScoreId?: string
  marketOpportunityId?: string
  monetizationStrategyId?: string
  AND?: Prisma.DailyIdeaWhereInput | Prisma.DailyIdeaWhereInput[]
  OR?: Prisma.DailyIdeaWhereInput[]
  NOT?: Prisma.DailyIdeaWhereInput | Prisma.DailyIdeaWhereInput[]
  title?: Prisma.StringFilter<"DailyIdea"> | string
  description?: Prisma.StringFilter<"DailyIdea"> | string
  executiveSummary?: Prisma.StringFilter<"DailyIdea"> | string
  problemSolution?: Prisma.StringFilter<"DailyIdea"> | string
  problemStatement?: Prisma.StringFilter<"DailyIdea"> | string
  innovationLevel?: Prisma.IntFilter<"DailyIdea"> | number
  timeToMarket?: Prisma.IntFilter<"DailyIdea"> | number
  confidenceScore?: Prisma.IntFilter<"DailyIdea"> | number
  narrativeHook?: Prisma.StringFilter<"DailyIdea"> | string
  targetKeywords?: Prisma.StringNullableListFilter<"DailyIdea">
  urgencyLevel?: Prisma.IntFilter<"DailyIdea"> | number
  executionComplexity?: Prisma.IntFilter<"DailyIdea"> | number
  tags?: Prisma.StringNullableListFilter<"DailyIdea">
  whyNowId?: Prisma.StringFilter<"DailyIdea"> | string
  createdAt?: Prisma.DateTimeFilter<"DailyIdea"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DailyIdea"> | Date | string
  ideaScore?: Prisma.XOR<Prisma.IdeaScoreNullableScalarRelationFilter, Prisma.IdeaScoreWhereInput> | null
  marketOpportunity?: Prisma.XOR<Prisma.MarketOpportunityNullableScalarRelationFilter, Prisma.MarketOpportunityWhereInput> | null
  monetizationStrategy?: Prisma.XOR<Prisma.MonetizationStrategyNullableScalarRelationFilter, Prisma.MonetizationStrategyWhereInput> | null
  whyNow?: Prisma.XOR<Prisma.WhyNowScalarRelationFilter, Prisma.WhyNowWhereInput>
  marketCompetition?: Prisma.XOR<Prisma.MarketCompetitionNullableScalarRelationFilter, Prisma.MarketCompetitionWhereInput> | null
  marketGap?: Prisma.XOR<Prisma.MarketGapNullableScalarRelationFilter, Prisma.MarketGapWhereInput> | null
  competitiveAdvantage?: Prisma.XOR<Prisma.CompetitiveAdvantageNullableScalarRelationFilter, Prisma.CompetitiveAdvantageWhereInput> | null
  strategicPositioning?: Prisma.XOR<Prisma.StrategicPositioningNullableScalarRelationFilter, Prisma.StrategicPositioningWhereInput> | null
  executionPlan?: Prisma.XOR<Prisma.ExecutionPlanNullableScalarRelationFilter, Prisma.ExecutionPlanWhereInput> | null
  tractionSignals?: Prisma.XOR<Prisma.TractionSignalsNullableScalarRelationFilter, Prisma.TractionSignalsWhereInput> | null
  frameworkFit?: Prisma.XOR<Prisma.FrameworkFitNullableScalarRelationFilter, Prisma.FrameworkFitWhereInput> | null
}, "id" | "ideaScoreId" | "marketOpportunityId" | "monetizationStrategyId">

export type DailyIdeaOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  executiveSummary?: Prisma.SortOrder
  problemSolution?: Prisma.SortOrder
  problemStatement?: Prisma.SortOrder
  innovationLevel?: Prisma.SortOrder
  timeToMarket?: Prisma.SortOrder
  confidenceScore?: Prisma.SortOrder
  narrativeHook?: Prisma.SortOrder
  targetKeywords?: Prisma.SortOrder
  urgencyLevel?: Prisma.SortOrder
  executionComplexity?: Prisma.SortOrder
  tags?: Prisma.SortOrder
  ideaScoreId?: Prisma.SortOrderInput | Prisma.SortOrder
  marketOpportunityId?: Prisma.SortOrderInput | Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrderInput | Prisma.SortOrder
  whyNowId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DailyIdeaCountOrderByAggregateInput
  _avg?: Prisma.DailyIdeaAvgOrderByAggregateInput
  _max?: Prisma.DailyIdeaMaxOrderByAggregateInput
  _min?: Prisma.DailyIdeaMinOrderByAggregateInput
  _sum?: Prisma.DailyIdeaSumOrderByAggregateInput
}

export type DailyIdeaScalarWhereWithAggregatesInput = {
  AND?: Prisma.DailyIdeaScalarWhereWithAggregatesInput | Prisma.DailyIdeaScalarWhereWithAggregatesInput[]
  OR?: Prisma.DailyIdeaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DailyIdeaScalarWhereWithAggregatesInput | Prisma.DailyIdeaScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DailyIdea"> | string
  title?: Prisma.StringWithAggregatesFilter<"DailyIdea"> | string
  description?: Prisma.StringWithAggregatesFilter<"DailyIdea"> | string
  executiveSummary?: Prisma.StringWithAggregatesFilter<"DailyIdea"> | string
  problemSolution?: Prisma.StringWithAggregatesFilter<"DailyIdea"> | string
  problemStatement?: Prisma.StringWithAggregatesFilter<"DailyIdea"> | string
  innovationLevel?: Prisma.IntWithAggregatesFilter<"DailyIdea"> | number
  timeToMarket?: Prisma.IntWithAggregatesFilter<"DailyIdea"> | number
  confidenceScore?: Prisma.IntWithAggregatesFilter<"DailyIdea"> | number
  narrativeHook?: Prisma.StringWithAggregatesFilter<"DailyIdea"> | string
  targetKeywords?: Prisma.StringNullableListFilter<"DailyIdea">
  urgencyLevel?: Prisma.IntWithAggregatesFilter<"DailyIdea"> | number
  executionComplexity?: Prisma.IntWithAggregatesFilter<"DailyIdea"> | number
  tags?: Prisma.StringNullableListFilter<"DailyIdea">
  ideaScoreId?: Prisma.StringNullableWithAggregatesFilter<"DailyIdea"> | string | null
  marketOpportunityId?: Prisma.StringNullableWithAggregatesFilter<"DailyIdea"> | string | null
  monetizationStrategyId?: Prisma.StringNullableWithAggregatesFilter<"DailyIdea"> | string | null
  whyNowId?: Prisma.StringWithAggregatesFilter<"DailyIdea"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"DailyIdea"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"DailyIdea"> | Date | string
}

export type DailyIdeaCreateInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  ideaScore?: Prisma.IdeaScoreCreateNestedOneWithoutDailyIdeaInput
  marketOpportunity?: Prisma.MarketOpportunityCreateNestedOneWithoutDailyIdeaInput
  monetizationStrategy?: Prisma.MonetizationStrategyCreateNestedOneWithoutDailyIdeaInput
  whyNow: Prisma.WhyNowCreateNestedOneWithoutDailyIdeasInput
  marketCompetition?: Prisma.MarketCompetitionCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaUncheckedCreateInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  ideaScoreId?: string | null
  marketOpportunityId?: string | null
  monetizationStrategyId?: string | null
  whyNowId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapUncheckedCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanUncheckedCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsUncheckedCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitUncheckedCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ideaScore?: Prisma.IdeaScoreUpdateOneWithoutDailyIdeaNestedInput
  marketOpportunity?: Prisma.MarketOpportunityUpdateOneWithoutDailyIdeaNestedInput
  monetizationStrategy?: Prisma.MonetizationStrategyUpdateOneWithoutDailyIdeaNestedInput
  whyNow?: Prisma.WhyNowUpdateOneRequiredWithoutDailyIdeasNestedInput
  marketCompetition?: Prisma.MarketCompetitionUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  ideaScoreId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  marketOpportunityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  monetizationStrategyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  whyNowId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUncheckedUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUncheckedUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUncheckedUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUncheckedUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaCreateManyInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  ideaScoreId?: string | null
  marketOpportunityId?: string | null
  monetizationStrategyId?: string | null
  whyNowId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DailyIdeaUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DailyIdeaUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  ideaScoreId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  marketOpportunityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  monetizationStrategyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  whyNowId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DailyIdeaListRelationFilter = {
  every?: Prisma.DailyIdeaWhereInput
  some?: Prisma.DailyIdeaWhereInput
  none?: Prisma.DailyIdeaWhereInput
}

export type DailyIdeaOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DailyIdeaNullableScalarRelationFilter = {
  is?: Prisma.DailyIdeaWhereInput | null
  isNot?: Prisma.DailyIdeaWhereInput | null
}

export type DailyIdeaScalarRelationFilter = {
  is?: Prisma.DailyIdeaWhereInput
  isNot?: Prisma.DailyIdeaWhereInput
}

export type DailyIdeaCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  executiveSummary?: Prisma.SortOrder
  problemSolution?: Prisma.SortOrder
  problemStatement?: Prisma.SortOrder
  innovationLevel?: Prisma.SortOrder
  timeToMarket?: Prisma.SortOrder
  confidenceScore?: Prisma.SortOrder
  narrativeHook?: Prisma.SortOrder
  targetKeywords?: Prisma.SortOrder
  urgencyLevel?: Prisma.SortOrder
  executionComplexity?: Prisma.SortOrder
  tags?: Prisma.SortOrder
  ideaScoreId?: Prisma.SortOrder
  marketOpportunityId?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrder
  whyNowId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DailyIdeaAvgOrderByAggregateInput = {
  innovationLevel?: Prisma.SortOrder
  timeToMarket?: Prisma.SortOrder
  confidenceScore?: Prisma.SortOrder
  urgencyLevel?: Prisma.SortOrder
  executionComplexity?: Prisma.SortOrder
}

export type DailyIdeaMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  executiveSummary?: Prisma.SortOrder
  problemSolution?: Prisma.SortOrder
  problemStatement?: Prisma.SortOrder
  innovationLevel?: Prisma.SortOrder
  timeToMarket?: Prisma.SortOrder
  confidenceScore?: Prisma.SortOrder
  narrativeHook?: Prisma.SortOrder
  urgencyLevel?: Prisma.SortOrder
  executionComplexity?: Prisma.SortOrder
  ideaScoreId?: Prisma.SortOrder
  marketOpportunityId?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrder
  whyNowId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DailyIdeaMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  executiveSummary?: Prisma.SortOrder
  problemSolution?: Prisma.SortOrder
  problemStatement?: Prisma.SortOrder
  innovationLevel?: Prisma.SortOrder
  timeToMarket?: Prisma.SortOrder
  confidenceScore?: Prisma.SortOrder
  narrativeHook?: Prisma.SortOrder
  urgencyLevel?: Prisma.SortOrder
  executionComplexity?: Prisma.SortOrder
  ideaScoreId?: Prisma.SortOrder
  marketOpportunityId?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrder
  whyNowId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DailyIdeaSumOrderByAggregateInput = {
  innovationLevel?: Prisma.SortOrder
  timeToMarket?: Prisma.SortOrder
  confidenceScore?: Prisma.SortOrder
  urgencyLevel?: Prisma.SortOrder
  executionComplexity?: Prisma.SortOrder
}

export type DailyIdeaCreateNestedManyWithoutWhyNowInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutWhyNowInput, Prisma.DailyIdeaUncheckedCreateWithoutWhyNowInput> | Prisma.DailyIdeaCreateWithoutWhyNowInput[] | Prisma.DailyIdeaUncheckedCreateWithoutWhyNowInput[]
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutWhyNowInput | Prisma.DailyIdeaCreateOrConnectWithoutWhyNowInput[]
  createMany?: Prisma.DailyIdeaCreateManyWhyNowInputEnvelope
  connect?: Prisma.DailyIdeaWhereUniqueInput | Prisma.DailyIdeaWhereUniqueInput[]
}

export type DailyIdeaUncheckedCreateNestedManyWithoutWhyNowInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutWhyNowInput, Prisma.DailyIdeaUncheckedCreateWithoutWhyNowInput> | Prisma.DailyIdeaCreateWithoutWhyNowInput[] | Prisma.DailyIdeaUncheckedCreateWithoutWhyNowInput[]
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutWhyNowInput | Prisma.DailyIdeaCreateOrConnectWithoutWhyNowInput[]
  createMany?: Prisma.DailyIdeaCreateManyWhyNowInputEnvelope
  connect?: Prisma.DailyIdeaWhereUniqueInput | Prisma.DailyIdeaWhereUniqueInput[]
}

export type DailyIdeaUpdateManyWithoutWhyNowNestedInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutWhyNowInput, Prisma.DailyIdeaUncheckedCreateWithoutWhyNowInput> | Prisma.DailyIdeaCreateWithoutWhyNowInput[] | Prisma.DailyIdeaUncheckedCreateWithoutWhyNowInput[]
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutWhyNowInput | Prisma.DailyIdeaCreateOrConnectWithoutWhyNowInput[]
  upsert?: Prisma.DailyIdeaUpsertWithWhereUniqueWithoutWhyNowInput | Prisma.DailyIdeaUpsertWithWhereUniqueWithoutWhyNowInput[]
  createMany?: Prisma.DailyIdeaCreateManyWhyNowInputEnvelope
  set?: Prisma.DailyIdeaWhereUniqueInput | Prisma.DailyIdeaWhereUniqueInput[]
  disconnect?: Prisma.DailyIdeaWhereUniqueInput | Prisma.DailyIdeaWhereUniqueInput[]
  delete?: Prisma.DailyIdeaWhereUniqueInput | Prisma.DailyIdeaWhereUniqueInput[]
  connect?: Prisma.DailyIdeaWhereUniqueInput | Prisma.DailyIdeaWhereUniqueInput[]
  update?: Prisma.DailyIdeaUpdateWithWhereUniqueWithoutWhyNowInput | Prisma.DailyIdeaUpdateWithWhereUniqueWithoutWhyNowInput[]
  updateMany?: Prisma.DailyIdeaUpdateManyWithWhereWithoutWhyNowInput | Prisma.DailyIdeaUpdateManyWithWhereWithoutWhyNowInput[]
  deleteMany?: Prisma.DailyIdeaScalarWhereInput | Prisma.DailyIdeaScalarWhereInput[]
}

export type DailyIdeaUncheckedUpdateManyWithoutWhyNowNestedInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutWhyNowInput, Prisma.DailyIdeaUncheckedCreateWithoutWhyNowInput> | Prisma.DailyIdeaCreateWithoutWhyNowInput[] | Prisma.DailyIdeaUncheckedCreateWithoutWhyNowInput[]
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutWhyNowInput | Prisma.DailyIdeaCreateOrConnectWithoutWhyNowInput[]
  upsert?: Prisma.DailyIdeaUpsertWithWhereUniqueWithoutWhyNowInput | Prisma.DailyIdeaUpsertWithWhereUniqueWithoutWhyNowInput[]
  createMany?: Prisma.DailyIdeaCreateManyWhyNowInputEnvelope
  set?: Prisma.DailyIdeaWhereUniqueInput | Prisma.DailyIdeaWhereUniqueInput[]
  disconnect?: Prisma.DailyIdeaWhereUniqueInput | Prisma.DailyIdeaWhereUniqueInput[]
  delete?: Prisma.DailyIdeaWhereUniqueInput | Prisma.DailyIdeaWhereUniqueInput[]
  connect?: Prisma.DailyIdeaWhereUniqueInput | Prisma.DailyIdeaWhereUniqueInput[]
  update?: Prisma.DailyIdeaUpdateWithWhereUniqueWithoutWhyNowInput | Prisma.DailyIdeaUpdateWithWhereUniqueWithoutWhyNowInput[]
  updateMany?: Prisma.DailyIdeaUpdateManyWithWhereWithoutWhyNowInput | Prisma.DailyIdeaUpdateManyWithWhereWithoutWhyNowInput[]
  deleteMany?: Prisma.DailyIdeaScalarWhereInput | Prisma.DailyIdeaScalarWhereInput[]
}

export type DailyIdeaCreateNestedOneWithoutIdeaScoreInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutIdeaScoreInput, Prisma.DailyIdeaUncheckedCreateWithoutIdeaScoreInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutIdeaScoreInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
}

export type DailyIdeaUncheckedCreateNestedOneWithoutIdeaScoreInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutIdeaScoreInput, Prisma.DailyIdeaUncheckedCreateWithoutIdeaScoreInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutIdeaScoreInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
}

export type DailyIdeaUpdateOneWithoutIdeaScoreNestedInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutIdeaScoreInput, Prisma.DailyIdeaUncheckedCreateWithoutIdeaScoreInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutIdeaScoreInput
  upsert?: Prisma.DailyIdeaUpsertWithoutIdeaScoreInput
  disconnect?: Prisma.DailyIdeaWhereInput | boolean
  delete?: Prisma.DailyIdeaWhereInput | boolean
  connect?: Prisma.DailyIdeaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DailyIdeaUpdateToOneWithWhereWithoutIdeaScoreInput, Prisma.DailyIdeaUpdateWithoutIdeaScoreInput>, Prisma.DailyIdeaUncheckedUpdateWithoutIdeaScoreInput>
}

export type DailyIdeaUncheckedUpdateOneWithoutIdeaScoreNestedInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutIdeaScoreInput, Prisma.DailyIdeaUncheckedCreateWithoutIdeaScoreInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutIdeaScoreInput
  upsert?: Prisma.DailyIdeaUpsertWithoutIdeaScoreInput
  disconnect?: Prisma.DailyIdeaWhereInput | boolean
  delete?: Prisma.DailyIdeaWhereInput | boolean
  connect?: Prisma.DailyIdeaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DailyIdeaUpdateToOneWithWhereWithoutIdeaScoreInput, Prisma.DailyIdeaUpdateWithoutIdeaScoreInput>, Prisma.DailyIdeaUncheckedUpdateWithoutIdeaScoreInput>
}

export type DailyIdeaCreateNestedOneWithoutMarketOpportunityInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMarketOpportunityInput, Prisma.DailyIdeaUncheckedCreateWithoutMarketOpportunityInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutMarketOpportunityInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
}

export type DailyIdeaUncheckedCreateNestedOneWithoutMarketOpportunityInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMarketOpportunityInput, Prisma.DailyIdeaUncheckedCreateWithoutMarketOpportunityInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutMarketOpportunityInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
}

export type DailyIdeaUpdateOneWithoutMarketOpportunityNestedInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMarketOpportunityInput, Prisma.DailyIdeaUncheckedCreateWithoutMarketOpportunityInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutMarketOpportunityInput
  upsert?: Prisma.DailyIdeaUpsertWithoutMarketOpportunityInput
  disconnect?: Prisma.DailyIdeaWhereInput | boolean
  delete?: Prisma.DailyIdeaWhereInput | boolean
  connect?: Prisma.DailyIdeaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DailyIdeaUpdateToOneWithWhereWithoutMarketOpportunityInput, Prisma.DailyIdeaUpdateWithoutMarketOpportunityInput>, Prisma.DailyIdeaUncheckedUpdateWithoutMarketOpportunityInput>
}

export type DailyIdeaUncheckedUpdateOneWithoutMarketOpportunityNestedInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMarketOpportunityInput, Prisma.DailyIdeaUncheckedCreateWithoutMarketOpportunityInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutMarketOpportunityInput
  upsert?: Prisma.DailyIdeaUpsertWithoutMarketOpportunityInput
  disconnect?: Prisma.DailyIdeaWhereInput | boolean
  delete?: Prisma.DailyIdeaWhereInput | boolean
  connect?: Prisma.DailyIdeaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DailyIdeaUpdateToOneWithWhereWithoutMarketOpportunityInput, Prisma.DailyIdeaUpdateWithoutMarketOpportunityInput>, Prisma.DailyIdeaUncheckedUpdateWithoutMarketOpportunityInput>
}

export type DailyIdeaCreateNestedOneWithoutMarketCompetitionInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMarketCompetitionInput, Prisma.DailyIdeaUncheckedCreateWithoutMarketCompetitionInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutMarketCompetitionInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
}

export type DailyIdeaUpdateOneRequiredWithoutMarketCompetitionNestedInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMarketCompetitionInput, Prisma.DailyIdeaUncheckedCreateWithoutMarketCompetitionInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutMarketCompetitionInput
  upsert?: Prisma.DailyIdeaUpsertWithoutMarketCompetitionInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DailyIdeaUpdateToOneWithWhereWithoutMarketCompetitionInput, Prisma.DailyIdeaUpdateWithoutMarketCompetitionInput>, Prisma.DailyIdeaUncheckedUpdateWithoutMarketCompetitionInput>
}

export type DailyIdeaCreateNestedOneWithoutMarketGapInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMarketGapInput, Prisma.DailyIdeaUncheckedCreateWithoutMarketGapInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutMarketGapInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
}

export type DailyIdeaUpdateOneRequiredWithoutMarketGapNestedInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMarketGapInput, Prisma.DailyIdeaUncheckedCreateWithoutMarketGapInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutMarketGapInput
  upsert?: Prisma.DailyIdeaUpsertWithoutMarketGapInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DailyIdeaUpdateToOneWithWhereWithoutMarketGapInput, Prisma.DailyIdeaUpdateWithoutMarketGapInput>, Prisma.DailyIdeaUncheckedUpdateWithoutMarketGapInput>
}

export type DailyIdeaCreateNestedOneWithoutCompetitiveAdvantageInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutCompetitiveAdvantageInput, Prisma.DailyIdeaUncheckedCreateWithoutCompetitiveAdvantageInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutCompetitiveAdvantageInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
}

export type DailyIdeaUpdateOneRequiredWithoutCompetitiveAdvantageNestedInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutCompetitiveAdvantageInput, Prisma.DailyIdeaUncheckedCreateWithoutCompetitiveAdvantageInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutCompetitiveAdvantageInput
  upsert?: Prisma.DailyIdeaUpsertWithoutCompetitiveAdvantageInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DailyIdeaUpdateToOneWithWhereWithoutCompetitiveAdvantageInput, Prisma.DailyIdeaUpdateWithoutCompetitiveAdvantageInput>, Prisma.DailyIdeaUncheckedUpdateWithoutCompetitiveAdvantageInput>
}

export type DailyIdeaCreateNestedOneWithoutStrategicPositioningInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutStrategicPositioningInput, Prisma.DailyIdeaUncheckedCreateWithoutStrategicPositioningInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutStrategicPositioningInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
}

export type DailyIdeaUpdateOneRequiredWithoutStrategicPositioningNestedInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutStrategicPositioningInput, Prisma.DailyIdeaUncheckedCreateWithoutStrategicPositioningInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutStrategicPositioningInput
  upsert?: Prisma.DailyIdeaUpsertWithoutStrategicPositioningInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DailyIdeaUpdateToOneWithWhereWithoutStrategicPositioningInput, Prisma.DailyIdeaUpdateWithoutStrategicPositioningInput>, Prisma.DailyIdeaUncheckedUpdateWithoutStrategicPositioningInput>
}

export type DailyIdeaCreateNestedOneWithoutMonetizationStrategyInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMonetizationStrategyInput, Prisma.DailyIdeaUncheckedCreateWithoutMonetizationStrategyInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutMonetizationStrategyInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
}

export type DailyIdeaUncheckedCreateNestedOneWithoutMonetizationStrategyInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMonetizationStrategyInput, Prisma.DailyIdeaUncheckedCreateWithoutMonetizationStrategyInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutMonetizationStrategyInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
}

export type DailyIdeaUpdateOneWithoutMonetizationStrategyNestedInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMonetizationStrategyInput, Prisma.DailyIdeaUncheckedCreateWithoutMonetizationStrategyInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutMonetizationStrategyInput
  upsert?: Prisma.DailyIdeaUpsertWithoutMonetizationStrategyInput
  disconnect?: Prisma.DailyIdeaWhereInput | boolean
  delete?: Prisma.DailyIdeaWhereInput | boolean
  connect?: Prisma.DailyIdeaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DailyIdeaUpdateToOneWithWhereWithoutMonetizationStrategyInput, Prisma.DailyIdeaUpdateWithoutMonetizationStrategyInput>, Prisma.DailyIdeaUncheckedUpdateWithoutMonetizationStrategyInput>
}

export type DailyIdeaUncheckedUpdateOneWithoutMonetizationStrategyNestedInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMonetizationStrategyInput, Prisma.DailyIdeaUncheckedCreateWithoutMonetizationStrategyInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutMonetizationStrategyInput
  upsert?: Prisma.DailyIdeaUpsertWithoutMonetizationStrategyInput
  disconnect?: Prisma.DailyIdeaWhereInput | boolean
  delete?: Prisma.DailyIdeaWhereInput | boolean
  connect?: Prisma.DailyIdeaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DailyIdeaUpdateToOneWithWhereWithoutMonetizationStrategyInput, Prisma.DailyIdeaUpdateWithoutMonetizationStrategyInput>, Prisma.DailyIdeaUncheckedUpdateWithoutMonetizationStrategyInput>
}

export type DailyIdeaCreateNestedOneWithoutExecutionPlanInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutExecutionPlanInput, Prisma.DailyIdeaUncheckedCreateWithoutExecutionPlanInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutExecutionPlanInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
}

export type DailyIdeaUpdateOneRequiredWithoutExecutionPlanNestedInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutExecutionPlanInput, Prisma.DailyIdeaUncheckedCreateWithoutExecutionPlanInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutExecutionPlanInput
  upsert?: Prisma.DailyIdeaUpsertWithoutExecutionPlanInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DailyIdeaUpdateToOneWithWhereWithoutExecutionPlanInput, Prisma.DailyIdeaUpdateWithoutExecutionPlanInput>, Prisma.DailyIdeaUncheckedUpdateWithoutExecutionPlanInput>
}

export type DailyIdeaCreateNestedOneWithoutTractionSignalsInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutTractionSignalsInput, Prisma.DailyIdeaUncheckedCreateWithoutTractionSignalsInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutTractionSignalsInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
}

export type DailyIdeaUpdateOneRequiredWithoutTractionSignalsNestedInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutTractionSignalsInput, Prisma.DailyIdeaUncheckedCreateWithoutTractionSignalsInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutTractionSignalsInput
  upsert?: Prisma.DailyIdeaUpsertWithoutTractionSignalsInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DailyIdeaUpdateToOneWithWhereWithoutTractionSignalsInput, Prisma.DailyIdeaUpdateWithoutTractionSignalsInput>, Prisma.DailyIdeaUncheckedUpdateWithoutTractionSignalsInput>
}

export type DailyIdeaCreateNestedOneWithoutFrameworkFitInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutFrameworkFitInput, Prisma.DailyIdeaUncheckedCreateWithoutFrameworkFitInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutFrameworkFitInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
}

export type DailyIdeaUpdateOneRequiredWithoutFrameworkFitNestedInput = {
  create?: Prisma.XOR<Prisma.DailyIdeaCreateWithoutFrameworkFitInput, Prisma.DailyIdeaUncheckedCreateWithoutFrameworkFitInput>
  connectOrCreate?: Prisma.DailyIdeaCreateOrConnectWithoutFrameworkFitInput
  upsert?: Prisma.DailyIdeaUpsertWithoutFrameworkFitInput
  connect?: Prisma.DailyIdeaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DailyIdeaUpdateToOneWithWhereWithoutFrameworkFitInput, Prisma.DailyIdeaUpdateWithoutFrameworkFitInput>, Prisma.DailyIdeaUncheckedUpdateWithoutFrameworkFitInput>
}

export type DailyIdeaCreatetargetKeywordsInput = {
  set: string[]
}

export type DailyIdeaCreatetagsInput = {
  set: string[]
}

export type DailyIdeaUpdatetargetKeywordsInput = {
  set?: string[]
  push?: string | string[]
}

export type DailyIdeaUpdatetagsInput = {
  set?: string[]
  push?: string | string[]
}

export type DailyIdeaCreateWithoutWhyNowInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  ideaScore?: Prisma.IdeaScoreCreateNestedOneWithoutDailyIdeaInput
  marketOpportunity?: Prisma.MarketOpportunityCreateNestedOneWithoutDailyIdeaInput
  monetizationStrategy?: Prisma.MonetizationStrategyCreateNestedOneWithoutDailyIdeaInput
  marketCompetition?: Prisma.MarketCompetitionCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaUncheckedCreateWithoutWhyNowInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  ideaScoreId?: string | null
  marketOpportunityId?: string | null
  monetizationStrategyId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapUncheckedCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanUncheckedCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsUncheckedCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitUncheckedCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaCreateOrConnectWithoutWhyNowInput = {
  where: Prisma.DailyIdeaWhereUniqueInput
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutWhyNowInput, Prisma.DailyIdeaUncheckedCreateWithoutWhyNowInput>
}

export type DailyIdeaCreateManyWhyNowInputEnvelope = {
  data: Prisma.DailyIdeaCreateManyWhyNowInput | Prisma.DailyIdeaCreateManyWhyNowInput[]
  skipDuplicates?: boolean
}

export type DailyIdeaUpsertWithWhereUniqueWithoutWhyNowInput = {
  where: Prisma.DailyIdeaWhereUniqueInput
  update: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutWhyNowInput, Prisma.DailyIdeaUncheckedUpdateWithoutWhyNowInput>
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutWhyNowInput, Prisma.DailyIdeaUncheckedCreateWithoutWhyNowInput>
}

export type DailyIdeaUpdateWithWhereUniqueWithoutWhyNowInput = {
  where: Prisma.DailyIdeaWhereUniqueInput
  data: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutWhyNowInput, Prisma.DailyIdeaUncheckedUpdateWithoutWhyNowInput>
}

export type DailyIdeaUpdateManyWithWhereWithoutWhyNowInput = {
  where: Prisma.DailyIdeaScalarWhereInput
  data: Prisma.XOR<Prisma.DailyIdeaUpdateManyMutationInput, Prisma.DailyIdeaUncheckedUpdateManyWithoutWhyNowInput>
}

export type DailyIdeaScalarWhereInput = {
  AND?: Prisma.DailyIdeaScalarWhereInput | Prisma.DailyIdeaScalarWhereInput[]
  OR?: Prisma.DailyIdeaScalarWhereInput[]
  NOT?: Prisma.DailyIdeaScalarWhereInput | Prisma.DailyIdeaScalarWhereInput[]
  id?: Prisma.StringFilter<"DailyIdea"> | string
  title?: Prisma.StringFilter<"DailyIdea"> | string
  description?: Prisma.StringFilter<"DailyIdea"> | string
  executiveSummary?: Prisma.StringFilter<"DailyIdea"> | string
  problemSolution?: Prisma.StringFilter<"DailyIdea"> | string
  problemStatement?: Prisma.StringFilter<"DailyIdea"> | string
  innovationLevel?: Prisma.IntFilter<"DailyIdea"> | number
  timeToMarket?: Prisma.IntFilter<"DailyIdea"> | number
  confidenceScore?: Prisma.IntFilter<"DailyIdea"> | number
  narrativeHook?: Prisma.StringFilter<"DailyIdea"> | string
  targetKeywords?: Prisma.StringNullableListFilter<"DailyIdea">
  urgencyLevel?: Prisma.IntFilter<"DailyIdea"> | number
  executionComplexity?: Prisma.IntFilter<"DailyIdea"> | number
  tags?: Prisma.StringNullableListFilter<"DailyIdea">
  ideaScoreId?: Prisma.StringNullableFilter<"DailyIdea"> | string | null
  marketOpportunityId?: Prisma.StringNullableFilter<"DailyIdea"> | string | null
  monetizationStrategyId?: Prisma.StringNullableFilter<"DailyIdea"> | string | null
  whyNowId?: Prisma.StringFilter<"DailyIdea"> | string
  createdAt?: Prisma.DateTimeFilter<"DailyIdea"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DailyIdea"> | Date | string
}

export type DailyIdeaCreateWithoutIdeaScoreInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  marketOpportunity?: Prisma.MarketOpportunityCreateNestedOneWithoutDailyIdeaInput
  monetizationStrategy?: Prisma.MonetizationStrategyCreateNestedOneWithoutDailyIdeaInput
  whyNow: Prisma.WhyNowCreateNestedOneWithoutDailyIdeasInput
  marketCompetition?: Prisma.MarketCompetitionCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaUncheckedCreateWithoutIdeaScoreInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  marketOpportunityId?: string | null
  monetizationStrategyId?: string | null
  whyNowId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapUncheckedCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanUncheckedCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsUncheckedCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitUncheckedCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaCreateOrConnectWithoutIdeaScoreInput = {
  where: Prisma.DailyIdeaWhereUniqueInput
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutIdeaScoreInput, Prisma.DailyIdeaUncheckedCreateWithoutIdeaScoreInput>
}

export type DailyIdeaUpsertWithoutIdeaScoreInput = {
  update: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutIdeaScoreInput, Prisma.DailyIdeaUncheckedUpdateWithoutIdeaScoreInput>
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutIdeaScoreInput, Prisma.DailyIdeaUncheckedCreateWithoutIdeaScoreInput>
  where?: Prisma.DailyIdeaWhereInput
}

export type DailyIdeaUpdateToOneWithWhereWithoutIdeaScoreInput = {
  where?: Prisma.DailyIdeaWhereInput
  data: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutIdeaScoreInput, Prisma.DailyIdeaUncheckedUpdateWithoutIdeaScoreInput>
}

export type DailyIdeaUpdateWithoutIdeaScoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketOpportunity?: Prisma.MarketOpportunityUpdateOneWithoutDailyIdeaNestedInput
  monetizationStrategy?: Prisma.MonetizationStrategyUpdateOneWithoutDailyIdeaNestedInput
  whyNow?: Prisma.WhyNowUpdateOneRequiredWithoutDailyIdeasNestedInput
  marketCompetition?: Prisma.MarketCompetitionUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaUncheckedUpdateWithoutIdeaScoreInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  marketOpportunityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  monetizationStrategyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  whyNowId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUncheckedUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUncheckedUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUncheckedUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUncheckedUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaCreateWithoutMarketOpportunityInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  ideaScore?: Prisma.IdeaScoreCreateNestedOneWithoutDailyIdeaInput
  monetizationStrategy?: Prisma.MonetizationStrategyCreateNestedOneWithoutDailyIdeaInput
  whyNow: Prisma.WhyNowCreateNestedOneWithoutDailyIdeasInput
  marketCompetition?: Prisma.MarketCompetitionCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaUncheckedCreateWithoutMarketOpportunityInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  ideaScoreId?: string | null
  monetizationStrategyId?: string | null
  whyNowId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapUncheckedCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanUncheckedCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsUncheckedCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitUncheckedCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaCreateOrConnectWithoutMarketOpportunityInput = {
  where: Prisma.DailyIdeaWhereUniqueInput
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMarketOpportunityInput, Prisma.DailyIdeaUncheckedCreateWithoutMarketOpportunityInput>
}

export type DailyIdeaUpsertWithoutMarketOpportunityInput = {
  update: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutMarketOpportunityInput, Prisma.DailyIdeaUncheckedUpdateWithoutMarketOpportunityInput>
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMarketOpportunityInput, Prisma.DailyIdeaUncheckedCreateWithoutMarketOpportunityInput>
  where?: Prisma.DailyIdeaWhereInput
}

export type DailyIdeaUpdateToOneWithWhereWithoutMarketOpportunityInput = {
  where?: Prisma.DailyIdeaWhereInput
  data: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutMarketOpportunityInput, Prisma.DailyIdeaUncheckedUpdateWithoutMarketOpportunityInput>
}

export type DailyIdeaUpdateWithoutMarketOpportunityInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ideaScore?: Prisma.IdeaScoreUpdateOneWithoutDailyIdeaNestedInput
  monetizationStrategy?: Prisma.MonetizationStrategyUpdateOneWithoutDailyIdeaNestedInput
  whyNow?: Prisma.WhyNowUpdateOneRequiredWithoutDailyIdeasNestedInput
  marketCompetition?: Prisma.MarketCompetitionUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaUncheckedUpdateWithoutMarketOpportunityInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  ideaScoreId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  monetizationStrategyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  whyNowId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUncheckedUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUncheckedUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUncheckedUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUncheckedUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaCreateWithoutMarketCompetitionInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  ideaScore?: Prisma.IdeaScoreCreateNestedOneWithoutDailyIdeaInput
  marketOpportunity?: Prisma.MarketOpportunityCreateNestedOneWithoutDailyIdeaInput
  monetizationStrategy?: Prisma.MonetizationStrategyCreateNestedOneWithoutDailyIdeaInput
  whyNow: Prisma.WhyNowCreateNestedOneWithoutDailyIdeasInput
  marketGap?: Prisma.MarketGapCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaUncheckedCreateWithoutMarketCompetitionInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  ideaScoreId?: string | null
  marketOpportunityId?: string | null
  monetizationStrategyId?: string | null
  whyNowId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketGap?: Prisma.MarketGapUncheckedCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanUncheckedCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsUncheckedCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitUncheckedCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaCreateOrConnectWithoutMarketCompetitionInput = {
  where: Prisma.DailyIdeaWhereUniqueInput
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMarketCompetitionInput, Prisma.DailyIdeaUncheckedCreateWithoutMarketCompetitionInput>
}

export type DailyIdeaUpsertWithoutMarketCompetitionInput = {
  update: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutMarketCompetitionInput, Prisma.DailyIdeaUncheckedUpdateWithoutMarketCompetitionInput>
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMarketCompetitionInput, Prisma.DailyIdeaUncheckedCreateWithoutMarketCompetitionInput>
  where?: Prisma.DailyIdeaWhereInput
}

export type DailyIdeaUpdateToOneWithWhereWithoutMarketCompetitionInput = {
  where?: Prisma.DailyIdeaWhereInput
  data: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutMarketCompetitionInput, Prisma.DailyIdeaUncheckedUpdateWithoutMarketCompetitionInput>
}

export type DailyIdeaUpdateWithoutMarketCompetitionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ideaScore?: Prisma.IdeaScoreUpdateOneWithoutDailyIdeaNestedInput
  marketOpportunity?: Prisma.MarketOpportunityUpdateOneWithoutDailyIdeaNestedInput
  monetizationStrategy?: Prisma.MonetizationStrategyUpdateOneWithoutDailyIdeaNestedInput
  whyNow?: Prisma.WhyNowUpdateOneRequiredWithoutDailyIdeasNestedInput
  marketGap?: Prisma.MarketGapUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaUncheckedUpdateWithoutMarketCompetitionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  ideaScoreId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  marketOpportunityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  monetizationStrategyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  whyNowId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketGap?: Prisma.MarketGapUncheckedUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUncheckedUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUncheckedUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUncheckedUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaCreateWithoutMarketGapInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  ideaScore?: Prisma.IdeaScoreCreateNestedOneWithoutDailyIdeaInput
  marketOpportunity?: Prisma.MarketOpportunityCreateNestedOneWithoutDailyIdeaInput
  monetizationStrategy?: Prisma.MonetizationStrategyCreateNestedOneWithoutDailyIdeaInput
  whyNow: Prisma.WhyNowCreateNestedOneWithoutDailyIdeasInput
  marketCompetition?: Prisma.MarketCompetitionCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaUncheckedCreateWithoutMarketGapInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  ideaScoreId?: string | null
  marketOpportunityId?: string | null
  monetizationStrategyId?: string | null
  whyNowId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanUncheckedCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsUncheckedCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitUncheckedCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaCreateOrConnectWithoutMarketGapInput = {
  where: Prisma.DailyIdeaWhereUniqueInput
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMarketGapInput, Prisma.DailyIdeaUncheckedCreateWithoutMarketGapInput>
}

export type DailyIdeaUpsertWithoutMarketGapInput = {
  update: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutMarketGapInput, Prisma.DailyIdeaUncheckedUpdateWithoutMarketGapInput>
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMarketGapInput, Prisma.DailyIdeaUncheckedCreateWithoutMarketGapInput>
  where?: Prisma.DailyIdeaWhereInput
}

export type DailyIdeaUpdateToOneWithWhereWithoutMarketGapInput = {
  where?: Prisma.DailyIdeaWhereInput
  data: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutMarketGapInput, Prisma.DailyIdeaUncheckedUpdateWithoutMarketGapInput>
}

export type DailyIdeaUpdateWithoutMarketGapInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ideaScore?: Prisma.IdeaScoreUpdateOneWithoutDailyIdeaNestedInput
  marketOpportunity?: Prisma.MarketOpportunityUpdateOneWithoutDailyIdeaNestedInput
  monetizationStrategy?: Prisma.MonetizationStrategyUpdateOneWithoutDailyIdeaNestedInput
  whyNow?: Prisma.WhyNowUpdateOneRequiredWithoutDailyIdeasNestedInput
  marketCompetition?: Prisma.MarketCompetitionUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaUncheckedUpdateWithoutMarketGapInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  ideaScoreId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  marketOpportunityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  monetizationStrategyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  whyNowId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUncheckedUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUncheckedUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUncheckedUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaCreateWithoutCompetitiveAdvantageInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  ideaScore?: Prisma.IdeaScoreCreateNestedOneWithoutDailyIdeaInput
  marketOpportunity?: Prisma.MarketOpportunityCreateNestedOneWithoutDailyIdeaInput
  monetizationStrategy?: Prisma.MonetizationStrategyCreateNestedOneWithoutDailyIdeaInput
  whyNow: Prisma.WhyNowCreateNestedOneWithoutDailyIdeasInput
  marketCompetition?: Prisma.MarketCompetitionCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaUncheckedCreateWithoutCompetitiveAdvantageInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  ideaScoreId?: string | null
  marketOpportunityId?: string | null
  monetizationStrategyId?: string | null
  whyNowId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapUncheckedCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanUncheckedCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsUncheckedCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitUncheckedCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaCreateOrConnectWithoutCompetitiveAdvantageInput = {
  where: Prisma.DailyIdeaWhereUniqueInput
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutCompetitiveAdvantageInput, Prisma.DailyIdeaUncheckedCreateWithoutCompetitiveAdvantageInput>
}

export type DailyIdeaUpsertWithoutCompetitiveAdvantageInput = {
  update: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutCompetitiveAdvantageInput, Prisma.DailyIdeaUncheckedUpdateWithoutCompetitiveAdvantageInput>
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutCompetitiveAdvantageInput, Prisma.DailyIdeaUncheckedCreateWithoutCompetitiveAdvantageInput>
  where?: Prisma.DailyIdeaWhereInput
}

export type DailyIdeaUpdateToOneWithWhereWithoutCompetitiveAdvantageInput = {
  where?: Prisma.DailyIdeaWhereInput
  data: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutCompetitiveAdvantageInput, Prisma.DailyIdeaUncheckedUpdateWithoutCompetitiveAdvantageInput>
}

export type DailyIdeaUpdateWithoutCompetitiveAdvantageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ideaScore?: Prisma.IdeaScoreUpdateOneWithoutDailyIdeaNestedInput
  marketOpportunity?: Prisma.MarketOpportunityUpdateOneWithoutDailyIdeaNestedInput
  monetizationStrategy?: Prisma.MonetizationStrategyUpdateOneWithoutDailyIdeaNestedInput
  whyNow?: Prisma.WhyNowUpdateOneRequiredWithoutDailyIdeasNestedInput
  marketCompetition?: Prisma.MarketCompetitionUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaUncheckedUpdateWithoutCompetitiveAdvantageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  ideaScoreId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  marketOpportunityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  monetizationStrategyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  whyNowId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUncheckedUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUncheckedUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUncheckedUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUncheckedUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaCreateWithoutStrategicPositioningInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  ideaScore?: Prisma.IdeaScoreCreateNestedOneWithoutDailyIdeaInput
  marketOpportunity?: Prisma.MarketOpportunityCreateNestedOneWithoutDailyIdeaInput
  monetizationStrategy?: Prisma.MonetizationStrategyCreateNestedOneWithoutDailyIdeaInput
  whyNow: Prisma.WhyNowCreateNestedOneWithoutDailyIdeasInput
  marketCompetition?: Prisma.MarketCompetitionCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaUncheckedCreateWithoutStrategicPositioningInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  ideaScoreId?: string | null
  marketOpportunityId?: string | null
  monetizationStrategyId?: string | null
  whyNowId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapUncheckedCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanUncheckedCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsUncheckedCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitUncheckedCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaCreateOrConnectWithoutStrategicPositioningInput = {
  where: Prisma.DailyIdeaWhereUniqueInput
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutStrategicPositioningInput, Prisma.DailyIdeaUncheckedCreateWithoutStrategicPositioningInput>
}

export type DailyIdeaUpsertWithoutStrategicPositioningInput = {
  update: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutStrategicPositioningInput, Prisma.DailyIdeaUncheckedUpdateWithoutStrategicPositioningInput>
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutStrategicPositioningInput, Prisma.DailyIdeaUncheckedCreateWithoutStrategicPositioningInput>
  where?: Prisma.DailyIdeaWhereInput
}

export type DailyIdeaUpdateToOneWithWhereWithoutStrategicPositioningInput = {
  where?: Prisma.DailyIdeaWhereInput
  data: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutStrategicPositioningInput, Prisma.DailyIdeaUncheckedUpdateWithoutStrategicPositioningInput>
}

export type DailyIdeaUpdateWithoutStrategicPositioningInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ideaScore?: Prisma.IdeaScoreUpdateOneWithoutDailyIdeaNestedInput
  marketOpportunity?: Prisma.MarketOpportunityUpdateOneWithoutDailyIdeaNestedInput
  monetizationStrategy?: Prisma.MonetizationStrategyUpdateOneWithoutDailyIdeaNestedInput
  whyNow?: Prisma.WhyNowUpdateOneRequiredWithoutDailyIdeasNestedInput
  marketCompetition?: Prisma.MarketCompetitionUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaUncheckedUpdateWithoutStrategicPositioningInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  ideaScoreId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  marketOpportunityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  monetizationStrategyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  whyNowId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUncheckedUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUncheckedUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUncheckedUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUncheckedUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaCreateWithoutMonetizationStrategyInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  ideaScore?: Prisma.IdeaScoreCreateNestedOneWithoutDailyIdeaInput
  marketOpportunity?: Prisma.MarketOpportunityCreateNestedOneWithoutDailyIdeaInput
  whyNow: Prisma.WhyNowCreateNestedOneWithoutDailyIdeasInput
  marketCompetition?: Prisma.MarketCompetitionCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaUncheckedCreateWithoutMonetizationStrategyInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  ideaScoreId?: string | null
  marketOpportunityId?: string | null
  whyNowId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapUncheckedCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanUncheckedCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsUncheckedCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitUncheckedCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaCreateOrConnectWithoutMonetizationStrategyInput = {
  where: Prisma.DailyIdeaWhereUniqueInput
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMonetizationStrategyInput, Prisma.DailyIdeaUncheckedCreateWithoutMonetizationStrategyInput>
}

export type DailyIdeaUpsertWithoutMonetizationStrategyInput = {
  update: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutMonetizationStrategyInput, Prisma.DailyIdeaUncheckedUpdateWithoutMonetizationStrategyInput>
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutMonetizationStrategyInput, Prisma.DailyIdeaUncheckedCreateWithoutMonetizationStrategyInput>
  where?: Prisma.DailyIdeaWhereInput
}

export type DailyIdeaUpdateToOneWithWhereWithoutMonetizationStrategyInput = {
  where?: Prisma.DailyIdeaWhereInput
  data: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutMonetizationStrategyInput, Prisma.DailyIdeaUncheckedUpdateWithoutMonetizationStrategyInput>
}

export type DailyIdeaUpdateWithoutMonetizationStrategyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ideaScore?: Prisma.IdeaScoreUpdateOneWithoutDailyIdeaNestedInput
  marketOpportunity?: Prisma.MarketOpportunityUpdateOneWithoutDailyIdeaNestedInput
  whyNow?: Prisma.WhyNowUpdateOneRequiredWithoutDailyIdeasNestedInput
  marketCompetition?: Prisma.MarketCompetitionUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaUncheckedUpdateWithoutMonetizationStrategyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  ideaScoreId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  marketOpportunityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  whyNowId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUncheckedUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUncheckedUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUncheckedUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUncheckedUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaCreateWithoutExecutionPlanInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  ideaScore?: Prisma.IdeaScoreCreateNestedOneWithoutDailyIdeaInput
  marketOpportunity?: Prisma.MarketOpportunityCreateNestedOneWithoutDailyIdeaInput
  monetizationStrategy?: Prisma.MonetizationStrategyCreateNestedOneWithoutDailyIdeaInput
  whyNow: Prisma.WhyNowCreateNestedOneWithoutDailyIdeasInput
  marketCompetition?: Prisma.MarketCompetitionCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaUncheckedCreateWithoutExecutionPlanInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  ideaScoreId?: string | null
  marketOpportunityId?: string | null
  monetizationStrategyId?: string | null
  whyNowId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapUncheckedCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsUncheckedCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitUncheckedCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaCreateOrConnectWithoutExecutionPlanInput = {
  where: Prisma.DailyIdeaWhereUniqueInput
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutExecutionPlanInput, Prisma.DailyIdeaUncheckedCreateWithoutExecutionPlanInput>
}

export type DailyIdeaUpsertWithoutExecutionPlanInput = {
  update: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutExecutionPlanInput, Prisma.DailyIdeaUncheckedUpdateWithoutExecutionPlanInput>
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutExecutionPlanInput, Prisma.DailyIdeaUncheckedCreateWithoutExecutionPlanInput>
  where?: Prisma.DailyIdeaWhereInput
}

export type DailyIdeaUpdateToOneWithWhereWithoutExecutionPlanInput = {
  where?: Prisma.DailyIdeaWhereInput
  data: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutExecutionPlanInput, Prisma.DailyIdeaUncheckedUpdateWithoutExecutionPlanInput>
}

export type DailyIdeaUpdateWithoutExecutionPlanInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ideaScore?: Prisma.IdeaScoreUpdateOneWithoutDailyIdeaNestedInput
  marketOpportunity?: Prisma.MarketOpportunityUpdateOneWithoutDailyIdeaNestedInput
  monetizationStrategy?: Prisma.MonetizationStrategyUpdateOneWithoutDailyIdeaNestedInput
  whyNow?: Prisma.WhyNowUpdateOneRequiredWithoutDailyIdeasNestedInput
  marketCompetition?: Prisma.MarketCompetitionUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaUncheckedUpdateWithoutExecutionPlanInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  ideaScoreId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  marketOpportunityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  monetizationStrategyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  whyNowId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUncheckedUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUncheckedUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUncheckedUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaCreateWithoutTractionSignalsInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  ideaScore?: Prisma.IdeaScoreCreateNestedOneWithoutDailyIdeaInput
  marketOpportunity?: Prisma.MarketOpportunityCreateNestedOneWithoutDailyIdeaInput
  monetizationStrategy?: Prisma.MonetizationStrategyCreateNestedOneWithoutDailyIdeaInput
  whyNow: Prisma.WhyNowCreateNestedOneWithoutDailyIdeasInput
  marketCompetition?: Prisma.MarketCompetitionCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaUncheckedCreateWithoutTractionSignalsInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  ideaScoreId?: string | null
  marketOpportunityId?: string | null
  monetizationStrategyId?: string | null
  whyNowId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapUncheckedCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanUncheckedCreateNestedOneWithoutDailyIdeaInput
  frameworkFit?: Prisma.FrameworkFitUncheckedCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaCreateOrConnectWithoutTractionSignalsInput = {
  where: Prisma.DailyIdeaWhereUniqueInput
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutTractionSignalsInput, Prisma.DailyIdeaUncheckedCreateWithoutTractionSignalsInput>
}

export type DailyIdeaUpsertWithoutTractionSignalsInput = {
  update: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutTractionSignalsInput, Prisma.DailyIdeaUncheckedUpdateWithoutTractionSignalsInput>
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutTractionSignalsInput, Prisma.DailyIdeaUncheckedCreateWithoutTractionSignalsInput>
  where?: Prisma.DailyIdeaWhereInput
}

export type DailyIdeaUpdateToOneWithWhereWithoutTractionSignalsInput = {
  where?: Prisma.DailyIdeaWhereInput
  data: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutTractionSignalsInput, Prisma.DailyIdeaUncheckedUpdateWithoutTractionSignalsInput>
}

export type DailyIdeaUpdateWithoutTractionSignalsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ideaScore?: Prisma.IdeaScoreUpdateOneWithoutDailyIdeaNestedInput
  marketOpportunity?: Prisma.MarketOpportunityUpdateOneWithoutDailyIdeaNestedInput
  monetizationStrategy?: Prisma.MonetizationStrategyUpdateOneWithoutDailyIdeaNestedInput
  whyNow?: Prisma.WhyNowUpdateOneRequiredWithoutDailyIdeasNestedInput
  marketCompetition?: Prisma.MarketCompetitionUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaUncheckedUpdateWithoutTractionSignalsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  ideaScoreId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  marketOpportunityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  monetizationStrategyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  whyNowId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUncheckedUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUncheckedUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUncheckedUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaCreateWithoutFrameworkFitInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  ideaScore?: Prisma.IdeaScoreCreateNestedOneWithoutDailyIdeaInput
  marketOpportunity?: Prisma.MarketOpportunityCreateNestedOneWithoutDailyIdeaInput
  monetizationStrategy?: Prisma.MonetizationStrategyCreateNestedOneWithoutDailyIdeaInput
  whyNow: Prisma.WhyNowCreateNestedOneWithoutDailyIdeasInput
  marketCompetition?: Prisma.MarketCompetitionCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaUncheckedCreateWithoutFrameworkFitInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  ideaScoreId?: string | null
  marketOpportunityId?: string | null
  monetizationStrategyId?: string | null
  whyNowId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedCreateNestedOneWithoutDailyIdeaInput
  marketGap?: Prisma.MarketGapUncheckedCreateNestedOneWithoutDailyIdeaInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedCreateNestedOneWithoutDailyIdeaInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedCreateNestedOneWithoutDailyIdeaInput
  executionPlan?: Prisma.ExecutionPlanUncheckedCreateNestedOneWithoutDailyIdeaInput
  tractionSignals?: Prisma.TractionSignalsUncheckedCreateNestedOneWithoutDailyIdeaInput
}

export type DailyIdeaCreateOrConnectWithoutFrameworkFitInput = {
  where: Prisma.DailyIdeaWhereUniqueInput
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutFrameworkFitInput, Prisma.DailyIdeaUncheckedCreateWithoutFrameworkFitInput>
}

export type DailyIdeaUpsertWithoutFrameworkFitInput = {
  update: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutFrameworkFitInput, Prisma.DailyIdeaUncheckedUpdateWithoutFrameworkFitInput>
  create: Prisma.XOR<Prisma.DailyIdeaCreateWithoutFrameworkFitInput, Prisma.DailyIdeaUncheckedCreateWithoutFrameworkFitInput>
  where?: Prisma.DailyIdeaWhereInput
}

export type DailyIdeaUpdateToOneWithWhereWithoutFrameworkFitInput = {
  where?: Prisma.DailyIdeaWhereInput
  data: Prisma.XOR<Prisma.DailyIdeaUpdateWithoutFrameworkFitInput, Prisma.DailyIdeaUncheckedUpdateWithoutFrameworkFitInput>
}

export type DailyIdeaUpdateWithoutFrameworkFitInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ideaScore?: Prisma.IdeaScoreUpdateOneWithoutDailyIdeaNestedInput
  marketOpportunity?: Prisma.MarketOpportunityUpdateOneWithoutDailyIdeaNestedInput
  monetizationStrategy?: Prisma.MonetizationStrategyUpdateOneWithoutDailyIdeaNestedInput
  whyNow?: Prisma.WhyNowUpdateOneRequiredWithoutDailyIdeasNestedInput
  marketCompetition?: Prisma.MarketCompetitionUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaUncheckedUpdateWithoutFrameworkFitInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  ideaScoreId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  marketOpportunityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  monetizationStrategyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  whyNowId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUncheckedUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUncheckedUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUncheckedUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaCreateManyWhyNowInput = {
  id?: string
  title: string
  description: string
  executiveSummary: string
  problemSolution: string
  problemStatement: string
  innovationLevel: number
  timeToMarket: number
  confidenceScore: number
  narrativeHook: string
  targetKeywords?: Prisma.DailyIdeaCreatetargetKeywordsInput | string[]
  urgencyLevel: number
  executionComplexity: number
  tags?: Prisma.DailyIdeaCreatetagsInput | string[]
  ideaScoreId?: string | null
  marketOpportunityId?: string | null
  monetizationStrategyId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DailyIdeaUpdateWithoutWhyNowInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ideaScore?: Prisma.IdeaScoreUpdateOneWithoutDailyIdeaNestedInput
  marketOpportunity?: Prisma.MarketOpportunityUpdateOneWithoutDailyIdeaNestedInput
  monetizationStrategy?: Prisma.MonetizationStrategyUpdateOneWithoutDailyIdeaNestedInput
  marketCompetition?: Prisma.MarketCompetitionUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaUncheckedUpdateWithoutWhyNowInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  ideaScoreId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  marketOpportunityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  monetizationStrategyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketCompetition?: Prisma.MarketCompetitionUncheckedUpdateOneWithoutDailyIdeaNestedInput
  marketGap?: Prisma.MarketGapUncheckedUpdateOneWithoutDailyIdeaNestedInput
  competitiveAdvantage?: Prisma.CompetitiveAdvantageUncheckedUpdateOneWithoutDailyIdeaNestedInput
  strategicPositioning?: Prisma.StrategicPositioningUncheckedUpdateOneWithoutDailyIdeaNestedInput
  executionPlan?: Prisma.ExecutionPlanUncheckedUpdateOneWithoutDailyIdeaNestedInput
  tractionSignals?: Prisma.TractionSignalsUncheckedUpdateOneWithoutDailyIdeaNestedInput
  frameworkFit?: Prisma.FrameworkFitUncheckedUpdateOneWithoutDailyIdeaNestedInput
}

export type DailyIdeaUncheckedUpdateManyWithoutWhyNowInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  executiveSummary?: Prisma.StringFieldUpdateOperationsInput | string
  problemSolution?: Prisma.StringFieldUpdateOperationsInput | string
  problemStatement?: Prisma.StringFieldUpdateOperationsInput | string
  innovationLevel?: Prisma.IntFieldUpdateOperationsInput | number
  timeToMarket?: Prisma.IntFieldUpdateOperationsInput | number
  confidenceScore?: Prisma.IntFieldUpdateOperationsInput | number
  narrativeHook?: Prisma.StringFieldUpdateOperationsInput | string
  targetKeywords?: Prisma.DailyIdeaUpdatetargetKeywordsInput | string[]
  urgencyLevel?: Prisma.IntFieldUpdateOperationsInput | number
  executionComplexity?: Prisma.IntFieldUpdateOperationsInput | number
  tags?: Prisma.DailyIdeaUpdatetagsInput | string[]
  ideaScoreId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  marketOpportunityId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  monetizationStrategyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type DailyIdeaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  executiveSummary?: boolean
  problemSolution?: boolean
  problemStatement?: boolean
  innovationLevel?: boolean
  timeToMarket?: boolean
  confidenceScore?: boolean
  narrativeHook?: boolean
  targetKeywords?: boolean
  urgencyLevel?: boolean
  executionComplexity?: boolean
  tags?: boolean
  ideaScoreId?: boolean
  marketOpportunityId?: boolean
  monetizationStrategyId?: boolean
  whyNowId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  ideaScore?: boolean | Prisma.DailyIdea$ideaScoreArgs<ExtArgs>
  marketOpportunity?: boolean | Prisma.DailyIdea$marketOpportunityArgs<ExtArgs>
  monetizationStrategy?: boolean | Prisma.DailyIdea$monetizationStrategyArgs<ExtArgs>
  whyNow?: boolean | Prisma.WhyNowDefaultArgs<ExtArgs>
  marketCompetition?: boolean | Prisma.DailyIdea$marketCompetitionArgs<ExtArgs>
  marketGap?: boolean | Prisma.DailyIdea$marketGapArgs<ExtArgs>
  competitiveAdvantage?: boolean | Prisma.DailyIdea$competitiveAdvantageArgs<ExtArgs>
  strategicPositioning?: boolean | Prisma.DailyIdea$strategicPositioningArgs<ExtArgs>
  executionPlan?: boolean | Prisma.DailyIdea$executionPlanArgs<ExtArgs>
  tractionSignals?: boolean | Prisma.DailyIdea$tractionSignalsArgs<ExtArgs>
  frameworkFit?: boolean | Prisma.DailyIdea$frameworkFitArgs<ExtArgs>
}, ExtArgs["result"]["dailyIdea"]>

export type DailyIdeaSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  executiveSummary?: boolean
  problemSolution?: boolean
  problemStatement?: boolean
  innovationLevel?: boolean
  timeToMarket?: boolean
  confidenceScore?: boolean
  narrativeHook?: boolean
  targetKeywords?: boolean
  urgencyLevel?: boolean
  executionComplexity?: boolean
  tags?: boolean
  ideaScoreId?: boolean
  marketOpportunityId?: boolean
  monetizationStrategyId?: boolean
  whyNowId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  ideaScore?: boolean | Prisma.DailyIdea$ideaScoreArgs<ExtArgs>
  marketOpportunity?: boolean | Prisma.DailyIdea$marketOpportunityArgs<ExtArgs>
  monetizationStrategy?: boolean | Prisma.DailyIdea$monetizationStrategyArgs<ExtArgs>
  whyNow?: boolean | Prisma.WhyNowDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dailyIdea"]>

export type DailyIdeaSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  executiveSummary?: boolean
  problemSolution?: boolean
  problemStatement?: boolean
  innovationLevel?: boolean
  timeToMarket?: boolean
  confidenceScore?: boolean
  narrativeHook?: boolean
  targetKeywords?: boolean
  urgencyLevel?: boolean
  executionComplexity?: boolean
  tags?: boolean
  ideaScoreId?: boolean
  marketOpportunityId?: boolean
  monetizationStrategyId?: boolean
  whyNowId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  ideaScore?: boolean | Prisma.DailyIdea$ideaScoreArgs<ExtArgs>
  marketOpportunity?: boolean | Prisma.DailyIdea$marketOpportunityArgs<ExtArgs>
  monetizationStrategy?: boolean | Prisma.DailyIdea$monetizationStrategyArgs<ExtArgs>
  whyNow?: boolean | Prisma.WhyNowDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dailyIdea"]>

export type DailyIdeaSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  executiveSummary?: boolean
  problemSolution?: boolean
  problemStatement?: boolean
  innovationLevel?: boolean
  timeToMarket?: boolean
  confidenceScore?: boolean
  narrativeHook?: boolean
  targetKeywords?: boolean
  urgencyLevel?: boolean
  executionComplexity?: boolean
  tags?: boolean
  ideaScoreId?: boolean
  marketOpportunityId?: boolean
  monetizationStrategyId?: boolean
  whyNowId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DailyIdeaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "executiveSummary" | "problemSolution" | "problemStatement" | "innovationLevel" | "timeToMarket" | "confidenceScore" | "narrativeHook" | "targetKeywords" | "urgencyLevel" | "executionComplexity" | "tags" | "ideaScoreId" | "marketOpportunityId" | "monetizationStrategyId" | "whyNowId" | "createdAt" | "updatedAt", ExtArgs["result"]["dailyIdea"]>
export type DailyIdeaInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ideaScore?: boolean | Prisma.DailyIdea$ideaScoreArgs<ExtArgs>
  marketOpportunity?: boolean | Prisma.DailyIdea$marketOpportunityArgs<ExtArgs>
  monetizationStrategy?: boolean | Prisma.DailyIdea$monetizationStrategyArgs<ExtArgs>
  whyNow?: boolean | Prisma.WhyNowDefaultArgs<ExtArgs>
  marketCompetition?: boolean | Prisma.DailyIdea$marketCompetitionArgs<ExtArgs>
  marketGap?: boolean | Prisma.DailyIdea$marketGapArgs<ExtArgs>
  competitiveAdvantage?: boolean | Prisma.DailyIdea$competitiveAdvantageArgs<ExtArgs>
  strategicPositioning?: boolean | Prisma.DailyIdea$strategicPositioningArgs<ExtArgs>
  executionPlan?: boolean | Prisma.DailyIdea$executionPlanArgs<ExtArgs>
  tractionSignals?: boolean | Prisma.DailyIdea$tractionSignalsArgs<ExtArgs>
  frameworkFit?: boolean | Prisma.DailyIdea$frameworkFitArgs<ExtArgs>
}
export type DailyIdeaIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ideaScore?: boolean | Prisma.DailyIdea$ideaScoreArgs<ExtArgs>
  marketOpportunity?: boolean | Prisma.DailyIdea$marketOpportunityArgs<ExtArgs>
  monetizationStrategy?: boolean | Prisma.DailyIdea$monetizationStrategyArgs<ExtArgs>
  whyNow?: boolean | Prisma.WhyNowDefaultArgs<ExtArgs>
}
export type DailyIdeaIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ideaScore?: boolean | Prisma.DailyIdea$ideaScoreArgs<ExtArgs>
  marketOpportunity?: boolean | Prisma.DailyIdea$marketOpportunityArgs<ExtArgs>
  monetizationStrategy?: boolean | Prisma.DailyIdea$monetizationStrategyArgs<ExtArgs>
  whyNow?: boolean | Prisma.WhyNowDefaultArgs<ExtArgs>
}

export type $DailyIdeaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DailyIdea"
  objects: {
    ideaScore: Prisma.$IdeaScorePayload<ExtArgs> | null
    marketOpportunity: Prisma.$MarketOpportunityPayload<ExtArgs> | null
    monetizationStrategy: Prisma.$MonetizationStrategyPayload<ExtArgs> | null
    whyNow: Prisma.$WhyNowPayload<ExtArgs>
    marketCompetition: Prisma.$MarketCompetitionPayload<ExtArgs> | null
    marketGap: Prisma.$MarketGapPayload<ExtArgs> | null
    competitiveAdvantage: Prisma.$CompetitiveAdvantagePayload<ExtArgs> | null
    strategicPositioning: Prisma.$StrategicPositioningPayload<ExtArgs> | null
    executionPlan: Prisma.$ExecutionPlanPayload<ExtArgs> | null
    tractionSignals: Prisma.$TractionSignalsPayload<ExtArgs> | null
    frameworkFit: Prisma.$FrameworkFitPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    description: string
    executiveSummary: string
    problemSolution: string
    problemStatement: string
    innovationLevel: number
    timeToMarket: number
    confidenceScore: number
    narrativeHook: string
    targetKeywords: string[]
    urgencyLevel: number
    executionComplexity: number
    tags: string[]
    ideaScoreId: string | null
    marketOpportunityId: string | null
    monetizationStrategyId: string | null
    whyNowId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["dailyIdea"]>
  composites: {}
}

export type DailyIdeaGetPayload<S extends boolean | null | undefined | DailyIdeaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload, S>

export type DailyIdeaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DailyIdeaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DailyIdeaCountAggregateInputType | true
  }

export interface DailyIdeaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DailyIdea'], meta: { name: 'DailyIdea' } }
  /**
   * Find zero or one DailyIdea that matches the filter.
   * @param {DailyIdeaFindUniqueArgs} args - Arguments to find a DailyIdea
   * @example
   * // Get one DailyIdea
   * const dailyIdea = await prisma.dailyIdea.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DailyIdeaFindUniqueArgs>(args: Prisma.SelectSubset<T, DailyIdeaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DailyIdea that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DailyIdeaFindUniqueOrThrowArgs} args - Arguments to find a DailyIdea
   * @example
   * // Get one DailyIdea
   * const dailyIdea = await prisma.dailyIdea.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DailyIdeaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DailyIdeaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DailyIdea that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DailyIdeaFindFirstArgs} args - Arguments to find a DailyIdea
   * @example
   * // Get one DailyIdea
   * const dailyIdea = await prisma.dailyIdea.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DailyIdeaFindFirstArgs>(args?: Prisma.SelectSubset<T, DailyIdeaFindFirstArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DailyIdea that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DailyIdeaFindFirstOrThrowArgs} args - Arguments to find a DailyIdea
   * @example
   * // Get one DailyIdea
   * const dailyIdea = await prisma.dailyIdea.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DailyIdeaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DailyIdeaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DailyIdeas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DailyIdeaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DailyIdeas
   * const dailyIdeas = await prisma.dailyIdea.findMany()
   * 
   * // Get first 10 DailyIdeas
   * const dailyIdeas = await prisma.dailyIdea.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dailyIdeaWithIdOnly = await prisma.dailyIdea.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DailyIdeaFindManyArgs>(args?: Prisma.SelectSubset<T, DailyIdeaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DailyIdea.
   * @param {DailyIdeaCreateArgs} args - Arguments to create a DailyIdea.
   * @example
   * // Create one DailyIdea
   * const DailyIdea = await prisma.dailyIdea.create({
   *   data: {
   *     // ... data to create a DailyIdea
   *   }
   * })
   * 
   */
  create<T extends DailyIdeaCreateArgs>(args: Prisma.SelectSubset<T, DailyIdeaCreateArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DailyIdeas.
   * @param {DailyIdeaCreateManyArgs} args - Arguments to create many DailyIdeas.
   * @example
   * // Create many DailyIdeas
   * const dailyIdea = await prisma.dailyIdea.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DailyIdeaCreateManyArgs>(args?: Prisma.SelectSubset<T, DailyIdeaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DailyIdeas and returns the data saved in the database.
   * @param {DailyIdeaCreateManyAndReturnArgs} args - Arguments to create many DailyIdeas.
   * @example
   * // Create many DailyIdeas
   * const dailyIdea = await prisma.dailyIdea.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DailyIdeas and only return the `id`
   * const dailyIdeaWithIdOnly = await prisma.dailyIdea.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DailyIdeaCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DailyIdeaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DailyIdea.
   * @param {DailyIdeaDeleteArgs} args - Arguments to delete one DailyIdea.
   * @example
   * // Delete one DailyIdea
   * const DailyIdea = await prisma.dailyIdea.delete({
   *   where: {
   *     // ... filter to delete one DailyIdea
   *   }
   * })
   * 
   */
  delete<T extends DailyIdeaDeleteArgs>(args: Prisma.SelectSubset<T, DailyIdeaDeleteArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DailyIdea.
   * @param {DailyIdeaUpdateArgs} args - Arguments to update one DailyIdea.
   * @example
   * // Update one DailyIdea
   * const dailyIdea = await prisma.dailyIdea.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DailyIdeaUpdateArgs>(args: Prisma.SelectSubset<T, DailyIdeaUpdateArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DailyIdeas.
   * @param {DailyIdeaDeleteManyArgs} args - Arguments to filter DailyIdeas to delete.
   * @example
   * // Delete a few DailyIdeas
   * const { count } = await prisma.dailyIdea.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DailyIdeaDeleteManyArgs>(args?: Prisma.SelectSubset<T, DailyIdeaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DailyIdeas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DailyIdeaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DailyIdeas
   * const dailyIdea = await prisma.dailyIdea.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DailyIdeaUpdateManyArgs>(args: Prisma.SelectSubset<T, DailyIdeaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DailyIdeas and returns the data updated in the database.
   * @param {DailyIdeaUpdateManyAndReturnArgs} args - Arguments to update many DailyIdeas.
   * @example
   * // Update many DailyIdeas
   * const dailyIdea = await prisma.dailyIdea.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DailyIdeas and only return the `id`
   * const dailyIdeaWithIdOnly = await prisma.dailyIdea.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DailyIdeaUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DailyIdeaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DailyIdea.
   * @param {DailyIdeaUpsertArgs} args - Arguments to update or create a DailyIdea.
   * @example
   * // Update or create a DailyIdea
   * const dailyIdea = await prisma.dailyIdea.upsert({
   *   create: {
   *     // ... data to create a DailyIdea
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DailyIdea we want to update
   *   }
   * })
   */
  upsert<T extends DailyIdeaUpsertArgs>(args: Prisma.SelectSubset<T, DailyIdeaUpsertArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DailyIdeas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DailyIdeaCountArgs} args - Arguments to filter DailyIdeas to count.
   * @example
   * // Count the number of DailyIdeas
   * const count = await prisma.dailyIdea.count({
   *   where: {
   *     // ... the filter for the DailyIdeas we want to count
   *   }
   * })
  **/
  count<T extends DailyIdeaCountArgs>(
    args?: Prisma.Subset<T, DailyIdeaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DailyIdeaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DailyIdea.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DailyIdeaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DailyIdeaAggregateArgs>(args: Prisma.Subset<T, DailyIdeaAggregateArgs>): Prisma.PrismaPromise<GetDailyIdeaAggregateType<T>>

  /**
   * Group by DailyIdea.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DailyIdeaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DailyIdeaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DailyIdeaGroupByArgs['orderBy'] }
      : { orderBy?: DailyIdeaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DailyIdeaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyIdeaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DailyIdea model
 */
readonly fields: DailyIdeaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DailyIdea.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DailyIdeaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  ideaScore<T extends Prisma.DailyIdea$ideaScoreArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdea$ideaScoreArgs<ExtArgs>>): Prisma.Prisma__IdeaScoreClient<runtime.Types.Result.GetResult<Prisma.$IdeaScorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  marketOpportunity<T extends Prisma.DailyIdea$marketOpportunityArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdea$marketOpportunityArgs<ExtArgs>>): Prisma.Prisma__MarketOpportunityClient<runtime.Types.Result.GetResult<Prisma.$MarketOpportunityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  monetizationStrategy<T extends Prisma.DailyIdea$monetizationStrategyArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdea$monetizationStrategyArgs<ExtArgs>>): Prisma.Prisma__MonetizationStrategyClient<runtime.Types.Result.GetResult<Prisma.$MonetizationStrategyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  whyNow<T extends Prisma.WhyNowDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WhyNowDefaultArgs<ExtArgs>>): Prisma.Prisma__WhyNowClient<runtime.Types.Result.GetResult<Prisma.$WhyNowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  marketCompetition<T extends Prisma.DailyIdea$marketCompetitionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdea$marketCompetitionArgs<ExtArgs>>): Prisma.Prisma__MarketCompetitionClient<runtime.Types.Result.GetResult<Prisma.$MarketCompetitionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  marketGap<T extends Prisma.DailyIdea$marketGapArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdea$marketGapArgs<ExtArgs>>): Prisma.Prisma__MarketGapClient<runtime.Types.Result.GetResult<Prisma.$MarketGapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  competitiveAdvantage<T extends Prisma.DailyIdea$competitiveAdvantageArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdea$competitiveAdvantageArgs<ExtArgs>>): Prisma.Prisma__CompetitiveAdvantageClient<runtime.Types.Result.GetResult<Prisma.$CompetitiveAdvantagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  strategicPositioning<T extends Prisma.DailyIdea$strategicPositioningArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdea$strategicPositioningArgs<ExtArgs>>): Prisma.Prisma__StrategicPositioningClient<runtime.Types.Result.GetResult<Prisma.$StrategicPositioningPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  executionPlan<T extends Prisma.DailyIdea$executionPlanArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdea$executionPlanArgs<ExtArgs>>): Prisma.Prisma__ExecutionPlanClient<runtime.Types.Result.GetResult<Prisma.$ExecutionPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  tractionSignals<T extends Prisma.DailyIdea$tractionSignalsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdea$tractionSignalsArgs<ExtArgs>>): Prisma.Prisma__TractionSignalsClient<runtime.Types.Result.GetResult<Prisma.$TractionSignalsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  frameworkFit<T extends Prisma.DailyIdea$frameworkFitArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdea$frameworkFitArgs<ExtArgs>>): Prisma.Prisma__FrameworkFitClient<runtime.Types.Result.GetResult<Prisma.$FrameworkFitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DailyIdea model
 */
export interface DailyIdeaFieldRefs {
  readonly id: Prisma.FieldRef<"DailyIdea", 'String'>
  readonly title: Prisma.FieldRef<"DailyIdea", 'String'>
  readonly description: Prisma.FieldRef<"DailyIdea", 'String'>
  readonly executiveSummary: Prisma.FieldRef<"DailyIdea", 'String'>
  readonly problemSolution: Prisma.FieldRef<"DailyIdea", 'String'>
  readonly problemStatement: Prisma.FieldRef<"DailyIdea", 'String'>
  readonly innovationLevel: Prisma.FieldRef<"DailyIdea", 'Int'>
  readonly timeToMarket: Prisma.FieldRef<"DailyIdea", 'Int'>
  readonly confidenceScore: Prisma.FieldRef<"DailyIdea", 'Int'>
  readonly narrativeHook: Prisma.FieldRef<"DailyIdea", 'String'>
  readonly targetKeywords: Prisma.FieldRef<"DailyIdea", 'String[]'>
  readonly urgencyLevel: Prisma.FieldRef<"DailyIdea", 'Int'>
  readonly executionComplexity: Prisma.FieldRef<"DailyIdea", 'Int'>
  readonly tags: Prisma.FieldRef<"DailyIdea", 'String[]'>
  readonly ideaScoreId: Prisma.FieldRef<"DailyIdea", 'String'>
  readonly marketOpportunityId: Prisma.FieldRef<"DailyIdea", 'String'>
  readonly monetizationStrategyId: Prisma.FieldRef<"DailyIdea", 'String'>
  readonly whyNowId: Prisma.FieldRef<"DailyIdea", 'String'>
  readonly createdAt: Prisma.FieldRef<"DailyIdea", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"DailyIdea", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DailyIdea findUnique
 */
export type DailyIdeaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DailyIdea
   */
  select?: Prisma.DailyIdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DailyIdea
   */
  omit?: Prisma.DailyIdeaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DailyIdeaInclude<ExtArgs> | null
  /**
   * Filter, which DailyIdea to fetch.
   */
  where: Prisma.DailyIdeaWhereUniqueInput
}

/**
 * DailyIdea findUniqueOrThrow
 */
export type DailyIdeaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DailyIdea
   */
  select?: Prisma.DailyIdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DailyIdea
   */
  omit?: Prisma.DailyIdeaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DailyIdeaInclude<ExtArgs> | null
  /**
   * Filter, which DailyIdea to fetch.
   */
  where: Prisma.DailyIdeaWhereUniqueInput
}

/**
 * DailyIdea findFirst
 */
export type DailyIdeaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DailyIdea
   */
  select?: Prisma.DailyIdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DailyIdea
   */
  omit?: Prisma.DailyIdeaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DailyIdeaInclude<ExtArgs> | null
  /**
   * Filter, which DailyIdea to fetch.
   */
  where?: Prisma.DailyIdeaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DailyIdeas to fetch.
   */
  orderBy?: Prisma.DailyIdeaOrderByWithRelationInput | Prisma.DailyIdeaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DailyIdeas.
   */
  cursor?: Prisma.DailyIdeaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DailyIdeas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DailyIdeas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DailyIdeas.
   */
  distinct?: Prisma.DailyIdeaScalarFieldEnum | Prisma.DailyIdeaScalarFieldEnum[]
}

/**
 * DailyIdea findFirstOrThrow
 */
export type DailyIdeaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DailyIdea
   */
  select?: Prisma.DailyIdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DailyIdea
   */
  omit?: Prisma.DailyIdeaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DailyIdeaInclude<ExtArgs> | null
  /**
   * Filter, which DailyIdea to fetch.
   */
  where?: Prisma.DailyIdeaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DailyIdeas to fetch.
   */
  orderBy?: Prisma.DailyIdeaOrderByWithRelationInput | Prisma.DailyIdeaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DailyIdeas.
   */
  cursor?: Prisma.DailyIdeaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DailyIdeas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DailyIdeas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DailyIdeas.
   */
  distinct?: Prisma.DailyIdeaScalarFieldEnum | Prisma.DailyIdeaScalarFieldEnum[]
}

/**
 * DailyIdea findMany
 */
export type DailyIdeaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DailyIdea
   */
  select?: Prisma.DailyIdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DailyIdea
   */
  omit?: Prisma.DailyIdeaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DailyIdeaInclude<ExtArgs> | null
  /**
   * Filter, which DailyIdeas to fetch.
   */
  where?: Prisma.DailyIdeaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DailyIdeas to fetch.
   */
  orderBy?: Prisma.DailyIdeaOrderByWithRelationInput | Prisma.DailyIdeaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DailyIdeas.
   */
  cursor?: Prisma.DailyIdeaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DailyIdeas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DailyIdeas.
   */
  skip?: number
  distinct?: Prisma.DailyIdeaScalarFieldEnum | Prisma.DailyIdeaScalarFieldEnum[]
}

/**
 * DailyIdea create
 */
export type DailyIdeaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DailyIdea
   */
  select?: Prisma.DailyIdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DailyIdea
   */
  omit?: Prisma.DailyIdeaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DailyIdeaInclude<ExtArgs> | null
  /**
   * The data needed to create a DailyIdea.
   */
  data: Prisma.XOR<Prisma.DailyIdeaCreateInput, Prisma.DailyIdeaUncheckedCreateInput>
}

/**
 * DailyIdea createMany
 */
export type DailyIdeaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DailyIdeas.
   */
  data: Prisma.DailyIdeaCreateManyInput | Prisma.DailyIdeaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DailyIdea createManyAndReturn
 */
export type DailyIdeaCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DailyIdea
   */
  select?: Prisma.DailyIdeaSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DailyIdea
   */
  omit?: Prisma.DailyIdeaOmit<ExtArgs> | null
  /**
   * The data used to create many DailyIdeas.
   */
  data: Prisma.DailyIdeaCreateManyInput | Prisma.DailyIdeaCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DailyIdeaIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * DailyIdea update
 */
export type DailyIdeaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DailyIdea
   */
  select?: Prisma.DailyIdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DailyIdea
   */
  omit?: Prisma.DailyIdeaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DailyIdeaInclude<ExtArgs> | null
  /**
   * The data needed to update a DailyIdea.
   */
  data: Prisma.XOR<Prisma.DailyIdeaUpdateInput, Prisma.DailyIdeaUncheckedUpdateInput>
  /**
   * Choose, which DailyIdea to update.
   */
  where: Prisma.DailyIdeaWhereUniqueInput
}

/**
 * DailyIdea updateMany
 */
export type DailyIdeaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DailyIdeas.
   */
  data: Prisma.XOR<Prisma.DailyIdeaUpdateManyMutationInput, Prisma.DailyIdeaUncheckedUpdateManyInput>
  /**
   * Filter which DailyIdeas to update
   */
  where?: Prisma.DailyIdeaWhereInput
  /**
   * Limit how many DailyIdeas to update.
   */
  limit?: number
}

/**
 * DailyIdea updateManyAndReturn
 */
export type DailyIdeaUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DailyIdea
   */
  select?: Prisma.DailyIdeaSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DailyIdea
   */
  omit?: Prisma.DailyIdeaOmit<ExtArgs> | null
  /**
   * The data used to update DailyIdeas.
   */
  data: Prisma.XOR<Prisma.DailyIdeaUpdateManyMutationInput, Prisma.DailyIdeaUncheckedUpdateManyInput>
  /**
   * Filter which DailyIdeas to update
   */
  where?: Prisma.DailyIdeaWhereInput
  /**
   * Limit how many DailyIdeas to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DailyIdeaIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DailyIdea upsert
 */
export type DailyIdeaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DailyIdea
   */
  select?: Prisma.DailyIdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DailyIdea
   */
  omit?: Prisma.DailyIdeaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DailyIdeaInclude<ExtArgs> | null
  /**
   * The filter to search for the DailyIdea to update in case it exists.
   */
  where: Prisma.DailyIdeaWhereUniqueInput
  /**
   * In case the DailyIdea found by the `where` argument doesn't exist, create a new DailyIdea with this data.
   */
  create: Prisma.XOR<Prisma.DailyIdeaCreateInput, Prisma.DailyIdeaUncheckedCreateInput>
  /**
   * In case the DailyIdea was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DailyIdeaUpdateInput, Prisma.DailyIdeaUncheckedUpdateInput>
}

/**
 * DailyIdea delete
 */
export type DailyIdeaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DailyIdea
   */
  select?: Prisma.DailyIdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DailyIdea
   */
  omit?: Prisma.DailyIdeaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DailyIdeaInclude<ExtArgs> | null
  /**
   * Filter which DailyIdea to delete.
   */
  where: Prisma.DailyIdeaWhereUniqueInput
}

/**
 * DailyIdea deleteMany
 */
export type DailyIdeaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DailyIdeas to delete
   */
  where?: Prisma.DailyIdeaWhereInput
  /**
   * Limit how many DailyIdeas to delete.
   */
  limit?: number
}

/**
 * DailyIdea.ideaScore
 */
export type DailyIdea$ideaScoreArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IdeaScore
   */
  select?: Prisma.IdeaScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IdeaScore
   */
  omit?: Prisma.IdeaScoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IdeaScoreInclude<ExtArgs> | null
  where?: Prisma.IdeaScoreWhereInput
}

/**
 * DailyIdea.marketOpportunity
 */
export type DailyIdea$marketOpportunityArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketOpportunity
   */
  select?: Prisma.MarketOpportunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketOpportunity
   */
  omit?: Prisma.MarketOpportunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketOpportunityInclude<ExtArgs> | null
  where?: Prisma.MarketOpportunityWhereInput
}

/**
 * DailyIdea.monetizationStrategy
 */
export type DailyIdea$monetizationStrategyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MonetizationStrategy
   */
  select?: Prisma.MonetizationStrategySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MonetizationStrategy
   */
  omit?: Prisma.MonetizationStrategyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MonetizationStrategyInclude<ExtArgs> | null
  where?: Prisma.MonetizationStrategyWhereInput
}

/**
 * DailyIdea.marketCompetition
 */
export type DailyIdea$marketCompetitionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketCompetition
   */
  select?: Prisma.MarketCompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketCompetition
   */
  omit?: Prisma.MarketCompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketCompetitionInclude<ExtArgs> | null
  where?: Prisma.MarketCompetitionWhereInput
}

/**
 * DailyIdea.marketGap
 */
export type DailyIdea$marketGapArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketGap
   */
  select?: Prisma.MarketGapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketGap
   */
  omit?: Prisma.MarketGapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketGapInclude<ExtArgs> | null
  where?: Prisma.MarketGapWhereInput
}

/**
 * DailyIdea.competitiveAdvantage
 */
export type DailyIdea$competitiveAdvantageArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompetitiveAdvantage
   */
  select?: Prisma.CompetitiveAdvantageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CompetitiveAdvantage
   */
  omit?: Prisma.CompetitiveAdvantageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompetitiveAdvantageInclude<ExtArgs> | null
  where?: Prisma.CompetitiveAdvantageWhereInput
}

/**
 * DailyIdea.strategicPositioning
 */
export type DailyIdea$strategicPositioningArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StrategicPositioning
   */
  select?: Prisma.StrategicPositioningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StrategicPositioning
   */
  omit?: Prisma.StrategicPositioningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StrategicPositioningInclude<ExtArgs> | null
  where?: Prisma.StrategicPositioningWhereInput
}

/**
 * DailyIdea.executionPlan
 */
export type DailyIdea$executionPlanArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExecutionPlan
   */
  select?: Prisma.ExecutionPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExecutionPlan
   */
  omit?: Prisma.ExecutionPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExecutionPlanInclude<ExtArgs> | null
  where?: Prisma.ExecutionPlanWhereInput
}

/**
 * DailyIdea.tractionSignals
 */
export type DailyIdea$tractionSignalsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TractionSignals
   */
  select?: Prisma.TractionSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TractionSignals
   */
  omit?: Prisma.TractionSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TractionSignalsInclude<ExtArgs> | null
  where?: Prisma.TractionSignalsWhereInput
}

/**
 * DailyIdea.frameworkFit
 */
export type DailyIdea$frameworkFitArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FrameworkFit
   */
  select?: Prisma.FrameworkFitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FrameworkFit
   */
  omit?: Prisma.FrameworkFitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FrameworkFitInclude<ExtArgs> | null
  where?: Prisma.FrameworkFitWhereInput
}

/**
 * DailyIdea without action
 */
export type DailyIdeaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DailyIdea
   */
  select?: Prisma.DailyIdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DailyIdea
   */
  omit?: Prisma.DailyIdeaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DailyIdeaInclude<ExtArgs> | null
}
