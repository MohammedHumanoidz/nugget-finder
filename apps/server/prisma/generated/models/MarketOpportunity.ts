
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MarketOpportunity` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MarketOpportunity
 * 
 */
export type MarketOpportunityModel = runtime.Types.Result.DefaultSelection<Prisma.$MarketOpportunityPayload>

export type AggregateMarketOpportunity = {
  _count: MarketOpportunityCountAggregateOutputType | null
  _avg: MarketOpportunityAvgAggregateOutputType | null
  _sum: MarketOpportunitySumAggregateOutputType | null
  _min: MarketOpportunityMinAggregateOutputType | null
  _max: MarketOpportunityMaxAggregateOutputType | null
}

export type MarketOpportunityAvgAggregateOutputType = {
  marketOpportunityScore: number | null
  ValidationStrength: number | null
  totalMarketSize: number | null
  reachableMarketSize: number | null
  realisticMarketSize: number | null
  growthRate: number | null
  adoptionRate: number | null
}

export type MarketOpportunitySumAggregateOutputType = {
  marketOpportunityScore: number | null
  ValidationStrength: number | null
  totalMarketSize: number | null
  reachableMarketSize: number | null
  realisticMarketSize: number | null
  growthRate: number | null
  adoptionRate: number | null
}

export type MarketOpportunityMinAggregateOutputType = {
  id: string | null
  marketOpportunityScore: number | null
  ValidationStrength: number | null
  totalMarketSize: number | null
  reachableMarketSize: number | null
  realisticMarketSize: number | null
  growthRate: number | null
  adoptionRate: number | null
  marketMaturityLevel: $Enums.MarketMaturityLevel | null
  marketAnalysisSummary: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MarketOpportunityMaxAggregateOutputType = {
  id: string | null
  marketOpportunityScore: number | null
  ValidationStrength: number | null
  totalMarketSize: number | null
  reachableMarketSize: number | null
  realisticMarketSize: number | null
  growthRate: number | null
  adoptionRate: number | null
  marketMaturityLevel: $Enums.MarketMaturityLevel | null
  marketAnalysisSummary: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MarketOpportunityCountAggregateOutputType = {
  id: number
  marketOpportunityScore: number
  ValidationStrength: number
  totalMarketSize: number
  reachableMarketSize: number
  realisticMarketSize: number
  growthRate: number
  adoptionRate: number
  marketMaturityLevel: number
  marketAnalysisSummary: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MarketOpportunityAvgAggregateInputType = {
  marketOpportunityScore?: true
  ValidationStrength?: true
  totalMarketSize?: true
  reachableMarketSize?: true
  realisticMarketSize?: true
  growthRate?: true
  adoptionRate?: true
}

export type MarketOpportunitySumAggregateInputType = {
  marketOpportunityScore?: true
  ValidationStrength?: true
  totalMarketSize?: true
  reachableMarketSize?: true
  realisticMarketSize?: true
  growthRate?: true
  adoptionRate?: true
}

export type MarketOpportunityMinAggregateInputType = {
  id?: true
  marketOpportunityScore?: true
  ValidationStrength?: true
  totalMarketSize?: true
  reachableMarketSize?: true
  realisticMarketSize?: true
  growthRate?: true
  adoptionRate?: true
  marketMaturityLevel?: true
  marketAnalysisSummary?: true
  createdAt?: true
  updatedAt?: true
}

export type MarketOpportunityMaxAggregateInputType = {
  id?: true
  marketOpportunityScore?: true
  ValidationStrength?: true
  totalMarketSize?: true
  reachableMarketSize?: true
  realisticMarketSize?: true
  growthRate?: true
  adoptionRate?: true
  marketMaturityLevel?: true
  marketAnalysisSummary?: true
  createdAt?: true
  updatedAt?: true
}

export type MarketOpportunityCountAggregateInputType = {
  id?: true
  marketOpportunityScore?: true
  ValidationStrength?: true
  totalMarketSize?: true
  reachableMarketSize?: true
  realisticMarketSize?: true
  growthRate?: true
  adoptionRate?: true
  marketMaturityLevel?: true
  marketAnalysisSummary?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MarketOpportunityAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MarketOpportunity to aggregate.
   */
  where?: Prisma.MarketOpportunityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MarketOpportunities to fetch.
   */
  orderBy?: Prisma.MarketOpportunityOrderByWithRelationInput | Prisma.MarketOpportunityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MarketOpportunityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MarketOpportunities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MarketOpportunities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MarketOpportunities
  **/
  _count?: true | MarketOpportunityCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MarketOpportunityAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MarketOpportunitySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MarketOpportunityMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MarketOpportunityMaxAggregateInputType
}

export type GetMarketOpportunityAggregateType<T extends MarketOpportunityAggregateArgs> = {
      [P in keyof T & keyof AggregateMarketOpportunity]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMarketOpportunity[P]>
    : Prisma.GetScalarType<T[P], AggregateMarketOpportunity[P]>
}




export type MarketOpportunityGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MarketOpportunityWhereInput
  orderBy?: Prisma.MarketOpportunityOrderByWithAggregationInput | Prisma.MarketOpportunityOrderByWithAggregationInput[]
  by: Prisma.MarketOpportunityScalarFieldEnum[] | Prisma.MarketOpportunityScalarFieldEnum
  having?: Prisma.MarketOpportunityScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MarketOpportunityCountAggregateInputType | true
  _avg?: MarketOpportunityAvgAggregateInputType
  _sum?: MarketOpportunitySumAggregateInputType
  _min?: MarketOpportunityMinAggregateInputType
  _max?: MarketOpportunityMaxAggregateInputType
}

export type MarketOpportunityGroupByOutputType = {
  id: string
  marketOpportunityScore: number
  ValidationStrength: number
  totalMarketSize: number
  reachableMarketSize: number
  realisticMarketSize: number
  growthRate: number
  adoptionRate: number
  marketMaturityLevel: $Enums.MarketMaturityLevel
  marketAnalysisSummary: string
  createdAt: Date
  updatedAt: Date
  _count: MarketOpportunityCountAggregateOutputType | null
  _avg: MarketOpportunityAvgAggregateOutputType | null
  _sum: MarketOpportunitySumAggregateOutputType | null
  _min: MarketOpportunityMinAggregateOutputType | null
  _max: MarketOpportunityMaxAggregateOutputType | null
}

type GetMarketOpportunityGroupByPayload<T extends MarketOpportunityGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MarketOpportunityGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MarketOpportunityGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MarketOpportunityGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MarketOpportunityGroupByOutputType[P]>
      }
    >
  > 



export type MarketOpportunityWhereInput = {
  AND?: Prisma.MarketOpportunityWhereInput | Prisma.MarketOpportunityWhereInput[]
  OR?: Prisma.MarketOpportunityWhereInput[]
  NOT?: Prisma.MarketOpportunityWhereInput | Prisma.MarketOpportunityWhereInput[]
  id?: Prisma.StringFilter<"MarketOpportunity"> | string
  marketOpportunityScore?: Prisma.IntFilter<"MarketOpportunity"> | number
  ValidationStrength?: Prisma.IntFilter<"MarketOpportunity"> | number
  totalMarketSize?: Prisma.IntFilter<"MarketOpportunity"> | number
  reachableMarketSize?: Prisma.IntFilter<"MarketOpportunity"> | number
  realisticMarketSize?: Prisma.IntFilter<"MarketOpportunity"> | number
  growthRate?: Prisma.IntFilter<"MarketOpportunity"> | number
  adoptionRate?: Prisma.IntFilter<"MarketOpportunity"> | number
  marketMaturityLevel?: Prisma.EnumMarketMaturityLevelFilter<"MarketOpportunity"> | $Enums.MarketMaturityLevel
  marketAnalysisSummary?: Prisma.StringFilter<"MarketOpportunity"> | string
  createdAt?: Prisma.DateTimeFilter<"MarketOpportunity"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MarketOpportunity"> | Date | string
  customerSegments?: Prisma.CustomerSegmentsListRelationFilter
  marketValidationSignals?: Prisma.MarketValidationSignalsListRelationFilter
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaNullableScalarRelationFilter, Prisma.DailyIdeaWhereInput> | null
}

export type MarketOpportunityOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  marketOpportunityScore?: Prisma.SortOrder
  ValidationStrength?: Prisma.SortOrder
  totalMarketSize?: Prisma.SortOrder
  reachableMarketSize?: Prisma.SortOrder
  realisticMarketSize?: Prisma.SortOrder
  growthRate?: Prisma.SortOrder
  adoptionRate?: Prisma.SortOrder
  marketMaturityLevel?: Prisma.SortOrder
  marketAnalysisSummary?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  customerSegments?: Prisma.CustomerSegmentsOrderByRelationAggregateInput
  marketValidationSignals?: Prisma.MarketValidationSignalsOrderByRelationAggregateInput
  dailyIdea?: Prisma.DailyIdeaOrderByWithRelationInput
}

export type MarketOpportunityWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MarketOpportunityWhereInput | Prisma.MarketOpportunityWhereInput[]
  OR?: Prisma.MarketOpportunityWhereInput[]
  NOT?: Prisma.MarketOpportunityWhereInput | Prisma.MarketOpportunityWhereInput[]
  marketOpportunityScore?: Prisma.IntFilter<"MarketOpportunity"> | number
  ValidationStrength?: Prisma.IntFilter<"MarketOpportunity"> | number
  totalMarketSize?: Prisma.IntFilter<"MarketOpportunity"> | number
  reachableMarketSize?: Prisma.IntFilter<"MarketOpportunity"> | number
  realisticMarketSize?: Prisma.IntFilter<"MarketOpportunity"> | number
  growthRate?: Prisma.IntFilter<"MarketOpportunity"> | number
  adoptionRate?: Prisma.IntFilter<"MarketOpportunity"> | number
  marketMaturityLevel?: Prisma.EnumMarketMaturityLevelFilter<"MarketOpportunity"> | $Enums.MarketMaturityLevel
  marketAnalysisSummary?: Prisma.StringFilter<"MarketOpportunity"> | string
  createdAt?: Prisma.DateTimeFilter<"MarketOpportunity"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MarketOpportunity"> | Date | string
  customerSegments?: Prisma.CustomerSegmentsListRelationFilter
  marketValidationSignals?: Prisma.MarketValidationSignalsListRelationFilter
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaNullableScalarRelationFilter, Prisma.DailyIdeaWhereInput> | null
}, "id">

export type MarketOpportunityOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  marketOpportunityScore?: Prisma.SortOrder
  ValidationStrength?: Prisma.SortOrder
  totalMarketSize?: Prisma.SortOrder
  reachableMarketSize?: Prisma.SortOrder
  realisticMarketSize?: Prisma.SortOrder
  growthRate?: Prisma.SortOrder
  adoptionRate?: Prisma.SortOrder
  marketMaturityLevel?: Prisma.SortOrder
  marketAnalysisSummary?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MarketOpportunityCountOrderByAggregateInput
  _avg?: Prisma.MarketOpportunityAvgOrderByAggregateInput
  _max?: Prisma.MarketOpportunityMaxOrderByAggregateInput
  _min?: Prisma.MarketOpportunityMinOrderByAggregateInput
  _sum?: Prisma.MarketOpportunitySumOrderByAggregateInput
}

export type MarketOpportunityScalarWhereWithAggregatesInput = {
  AND?: Prisma.MarketOpportunityScalarWhereWithAggregatesInput | Prisma.MarketOpportunityScalarWhereWithAggregatesInput[]
  OR?: Prisma.MarketOpportunityScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MarketOpportunityScalarWhereWithAggregatesInput | Prisma.MarketOpportunityScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MarketOpportunity"> | string
  marketOpportunityScore?: Prisma.IntWithAggregatesFilter<"MarketOpportunity"> | number
  ValidationStrength?: Prisma.IntWithAggregatesFilter<"MarketOpportunity"> | number
  totalMarketSize?: Prisma.IntWithAggregatesFilter<"MarketOpportunity"> | number
  reachableMarketSize?: Prisma.IntWithAggregatesFilter<"MarketOpportunity"> | number
  realisticMarketSize?: Prisma.IntWithAggregatesFilter<"MarketOpportunity"> | number
  growthRate?: Prisma.IntWithAggregatesFilter<"MarketOpportunity"> | number
  adoptionRate?: Prisma.IntWithAggregatesFilter<"MarketOpportunity"> | number
  marketMaturityLevel?: Prisma.EnumMarketMaturityLevelWithAggregatesFilter<"MarketOpportunity"> | $Enums.MarketMaturityLevel
  marketAnalysisSummary?: Prisma.StringWithAggregatesFilter<"MarketOpportunity"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MarketOpportunity"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MarketOpportunity"> | Date | string
}

export type MarketOpportunityCreateInput = {
  id?: string
  marketOpportunityScore: number
  ValidationStrength: number
  totalMarketSize: number
  reachableMarketSize: number
  realisticMarketSize: number
  growthRate: number
  adoptionRate: number
  marketMaturityLevel: $Enums.MarketMaturityLevel
  marketAnalysisSummary: string
  createdAt?: Date | string
  updatedAt?: Date | string
  customerSegments?: Prisma.CustomerSegmentsCreateNestedManyWithoutMarketOpportunityInput
  marketValidationSignals?: Prisma.MarketValidationSignalsCreateNestedManyWithoutMarketOpportunityInput
  dailyIdea?: Prisma.DailyIdeaCreateNestedOneWithoutMarketOpportunityInput
}

export type MarketOpportunityUncheckedCreateInput = {
  id?: string
  marketOpportunityScore: number
  ValidationStrength: number
  totalMarketSize: number
  reachableMarketSize: number
  realisticMarketSize: number
  growthRate: number
  adoptionRate: number
  marketMaturityLevel: $Enums.MarketMaturityLevel
  marketAnalysisSummary: string
  createdAt?: Date | string
  updatedAt?: Date | string
  customerSegments?: Prisma.CustomerSegmentsUncheckedCreateNestedManyWithoutMarketOpportunityInput
  marketValidationSignals?: Prisma.MarketValidationSignalsUncheckedCreateNestedManyWithoutMarketOpportunityInput
  dailyIdea?: Prisma.DailyIdeaUncheckedCreateNestedOneWithoutMarketOpportunityInput
}

export type MarketOpportunityUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  marketOpportunityScore?: Prisma.IntFieldUpdateOperationsInput | number
  ValidationStrength?: Prisma.IntFieldUpdateOperationsInput | number
  totalMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  reachableMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  realisticMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  growthRate?: Prisma.IntFieldUpdateOperationsInput | number
  adoptionRate?: Prisma.IntFieldUpdateOperationsInput | number
  marketMaturityLevel?: Prisma.EnumMarketMaturityLevelFieldUpdateOperationsInput | $Enums.MarketMaturityLevel
  marketAnalysisSummary?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  customerSegments?: Prisma.CustomerSegmentsUpdateManyWithoutMarketOpportunityNestedInput
  marketValidationSignals?: Prisma.MarketValidationSignalsUpdateManyWithoutMarketOpportunityNestedInput
  dailyIdea?: Prisma.DailyIdeaUpdateOneWithoutMarketOpportunityNestedInput
}

export type MarketOpportunityUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  marketOpportunityScore?: Prisma.IntFieldUpdateOperationsInput | number
  ValidationStrength?: Prisma.IntFieldUpdateOperationsInput | number
  totalMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  reachableMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  realisticMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  growthRate?: Prisma.IntFieldUpdateOperationsInput | number
  adoptionRate?: Prisma.IntFieldUpdateOperationsInput | number
  marketMaturityLevel?: Prisma.EnumMarketMaturityLevelFieldUpdateOperationsInput | $Enums.MarketMaturityLevel
  marketAnalysisSummary?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  customerSegments?: Prisma.CustomerSegmentsUncheckedUpdateManyWithoutMarketOpportunityNestedInput
  marketValidationSignals?: Prisma.MarketValidationSignalsUncheckedUpdateManyWithoutMarketOpportunityNestedInput
  dailyIdea?: Prisma.DailyIdeaUncheckedUpdateOneWithoutMarketOpportunityNestedInput
}

export type MarketOpportunityCreateManyInput = {
  id?: string
  marketOpportunityScore: number
  ValidationStrength: number
  totalMarketSize: number
  reachableMarketSize: number
  realisticMarketSize: number
  growthRate: number
  adoptionRate: number
  marketMaturityLevel: $Enums.MarketMaturityLevel
  marketAnalysisSummary: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MarketOpportunityUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  marketOpportunityScore?: Prisma.IntFieldUpdateOperationsInput | number
  ValidationStrength?: Prisma.IntFieldUpdateOperationsInput | number
  totalMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  reachableMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  realisticMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  growthRate?: Prisma.IntFieldUpdateOperationsInput | number
  adoptionRate?: Prisma.IntFieldUpdateOperationsInput | number
  marketMaturityLevel?: Prisma.EnumMarketMaturityLevelFieldUpdateOperationsInput | $Enums.MarketMaturityLevel
  marketAnalysisSummary?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MarketOpportunityUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  marketOpportunityScore?: Prisma.IntFieldUpdateOperationsInput | number
  ValidationStrength?: Prisma.IntFieldUpdateOperationsInput | number
  totalMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  reachableMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  realisticMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  growthRate?: Prisma.IntFieldUpdateOperationsInput | number
  adoptionRate?: Prisma.IntFieldUpdateOperationsInput | number
  marketMaturityLevel?: Prisma.EnumMarketMaturityLevelFieldUpdateOperationsInput | $Enums.MarketMaturityLevel
  marketAnalysisSummary?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MarketOpportunityCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  marketOpportunityScore?: Prisma.SortOrder
  ValidationStrength?: Prisma.SortOrder
  totalMarketSize?: Prisma.SortOrder
  reachableMarketSize?: Prisma.SortOrder
  realisticMarketSize?: Prisma.SortOrder
  growthRate?: Prisma.SortOrder
  adoptionRate?: Prisma.SortOrder
  marketMaturityLevel?: Prisma.SortOrder
  marketAnalysisSummary?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MarketOpportunityAvgOrderByAggregateInput = {
  marketOpportunityScore?: Prisma.SortOrder
  ValidationStrength?: Prisma.SortOrder
  totalMarketSize?: Prisma.SortOrder
  reachableMarketSize?: Prisma.SortOrder
  realisticMarketSize?: Prisma.SortOrder
  growthRate?: Prisma.SortOrder
  adoptionRate?: Prisma.SortOrder
}

export type MarketOpportunityMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  marketOpportunityScore?: Prisma.SortOrder
  ValidationStrength?: Prisma.SortOrder
  totalMarketSize?: Prisma.SortOrder
  reachableMarketSize?: Prisma.SortOrder
  realisticMarketSize?: Prisma.SortOrder
  growthRate?: Prisma.SortOrder
  adoptionRate?: Prisma.SortOrder
  marketMaturityLevel?: Prisma.SortOrder
  marketAnalysisSummary?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MarketOpportunityMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  marketOpportunityScore?: Prisma.SortOrder
  ValidationStrength?: Prisma.SortOrder
  totalMarketSize?: Prisma.SortOrder
  reachableMarketSize?: Prisma.SortOrder
  realisticMarketSize?: Prisma.SortOrder
  growthRate?: Prisma.SortOrder
  adoptionRate?: Prisma.SortOrder
  marketMaturityLevel?: Prisma.SortOrder
  marketAnalysisSummary?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MarketOpportunitySumOrderByAggregateInput = {
  marketOpportunityScore?: Prisma.SortOrder
  ValidationStrength?: Prisma.SortOrder
  totalMarketSize?: Prisma.SortOrder
  reachableMarketSize?: Prisma.SortOrder
  realisticMarketSize?: Prisma.SortOrder
  growthRate?: Prisma.SortOrder
  adoptionRate?: Prisma.SortOrder
}

export type MarketOpportunityScalarRelationFilter = {
  is?: Prisma.MarketOpportunityWhereInput
  isNot?: Prisma.MarketOpportunityWhereInput
}

export type MarketOpportunityNullableScalarRelationFilter = {
  is?: Prisma.MarketOpportunityWhereInput | null
  isNot?: Prisma.MarketOpportunityWhereInput | null
}

export type EnumMarketMaturityLevelFieldUpdateOperationsInput = {
  set?: $Enums.MarketMaturityLevel
}

export type MarketOpportunityCreateNestedOneWithoutMarketValidationSignalsInput = {
  create?: Prisma.XOR<Prisma.MarketOpportunityCreateWithoutMarketValidationSignalsInput, Prisma.MarketOpportunityUncheckedCreateWithoutMarketValidationSignalsInput>
  connectOrCreate?: Prisma.MarketOpportunityCreateOrConnectWithoutMarketValidationSignalsInput
  connect?: Prisma.MarketOpportunityWhereUniqueInput
}

export type MarketOpportunityUpdateOneRequiredWithoutMarketValidationSignalsNestedInput = {
  create?: Prisma.XOR<Prisma.MarketOpportunityCreateWithoutMarketValidationSignalsInput, Prisma.MarketOpportunityUncheckedCreateWithoutMarketValidationSignalsInput>
  connectOrCreate?: Prisma.MarketOpportunityCreateOrConnectWithoutMarketValidationSignalsInput
  upsert?: Prisma.MarketOpportunityUpsertWithoutMarketValidationSignalsInput
  connect?: Prisma.MarketOpportunityWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MarketOpportunityUpdateToOneWithWhereWithoutMarketValidationSignalsInput, Prisma.MarketOpportunityUpdateWithoutMarketValidationSignalsInput>, Prisma.MarketOpportunityUncheckedUpdateWithoutMarketValidationSignalsInput>
}

export type MarketOpportunityCreateNestedOneWithoutCustomerSegmentsInput = {
  create?: Prisma.XOR<Prisma.MarketOpportunityCreateWithoutCustomerSegmentsInput, Prisma.MarketOpportunityUncheckedCreateWithoutCustomerSegmentsInput>
  connectOrCreate?: Prisma.MarketOpportunityCreateOrConnectWithoutCustomerSegmentsInput
  connect?: Prisma.MarketOpportunityWhereUniqueInput
}

export type MarketOpportunityUpdateOneRequiredWithoutCustomerSegmentsNestedInput = {
  create?: Prisma.XOR<Prisma.MarketOpportunityCreateWithoutCustomerSegmentsInput, Prisma.MarketOpportunityUncheckedCreateWithoutCustomerSegmentsInput>
  connectOrCreate?: Prisma.MarketOpportunityCreateOrConnectWithoutCustomerSegmentsInput
  upsert?: Prisma.MarketOpportunityUpsertWithoutCustomerSegmentsInput
  connect?: Prisma.MarketOpportunityWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MarketOpportunityUpdateToOneWithWhereWithoutCustomerSegmentsInput, Prisma.MarketOpportunityUpdateWithoutCustomerSegmentsInput>, Prisma.MarketOpportunityUncheckedUpdateWithoutCustomerSegmentsInput>
}

export type MarketOpportunityCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.MarketOpportunityCreateWithoutDailyIdeaInput, Prisma.MarketOpportunityUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.MarketOpportunityCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.MarketOpportunityWhereUniqueInput
}

export type MarketOpportunityUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.MarketOpportunityCreateWithoutDailyIdeaInput, Prisma.MarketOpportunityUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.MarketOpportunityCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.MarketOpportunityUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.MarketOpportunityWhereInput | boolean
  delete?: Prisma.MarketOpportunityWhereInput | boolean
  connect?: Prisma.MarketOpportunityWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MarketOpportunityUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.MarketOpportunityUpdateWithoutDailyIdeaInput>, Prisma.MarketOpportunityUncheckedUpdateWithoutDailyIdeaInput>
}

export type MarketOpportunityCreateWithoutMarketValidationSignalsInput = {
  id?: string
  marketOpportunityScore: number
  ValidationStrength: number
  totalMarketSize: number
  reachableMarketSize: number
  realisticMarketSize: number
  growthRate: number
  adoptionRate: number
  marketMaturityLevel: $Enums.MarketMaturityLevel
  marketAnalysisSummary: string
  createdAt?: Date | string
  updatedAt?: Date | string
  customerSegments?: Prisma.CustomerSegmentsCreateNestedManyWithoutMarketOpportunityInput
  dailyIdea?: Prisma.DailyIdeaCreateNestedOneWithoutMarketOpportunityInput
}

export type MarketOpportunityUncheckedCreateWithoutMarketValidationSignalsInput = {
  id?: string
  marketOpportunityScore: number
  ValidationStrength: number
  totalMarketSize: number
  reachableMarketSize: number
  realisticMarketSize: number
  growthRate: number
  adoptionRate: number
  marketMaturityLevel: $Enums.MarketMaturityLevel
  marketAnalysisSummary: string
  createdAt?: Date | string
  updatedAt?: Date | string
  customerSegments?: Prisma.CustomerSegmentsUncheckedCreateNestedManyWithoutMarketOpportunityInput
  dailyIdea?: Prisma.DailyIdeaUncheckedCreateNestedOneWithoutMarketOpportunityInput
}

export type MarketOpportunityCreateOrConnectWithoutMarketValidationSignalsInput = {
  where: Prisma.MarketOpportunityWhereUniqueInput
  create: Prisma.XOR<Prisma.MarketOpportunityCreateWithoutMarketValidationSignalsInput, Prisma.MarketOpportunityUncheckedCreateWithoutMarketValidationSignalsInput>
}

export type MarketOpportunityUpsertWithoutMarketValidationSignalsInput = {
  update: Prisma.XOR<Prisma.MarketOpportunityUpdateWithoutMarketValidationSignalsInput, Prisma.MarketOpportunityUncheckedUpdateWithoutMarketValidationSignalsInput>
  create: Prisma.XOR<Prisma.MarketOpportunityCreateWithoutMarketValidationSignalsInput, Prisma.MarketOpportunityUncheckedCreateWithoutMarketValidationSignalsInput>
  where?: Prisma.MarketOpportunityWhereInput
}

export type MarketOpportunityUpdateToOneWithWhereWithoutMarketValidationSignalsInput = {
  where?: Prisma.MarketOpportunityWhereInput
  data: Prisma.XOR<Prisma.MarketOpportunityUpdateWithoutMarketValidationSignalsInput, Prisma.MarketOpportunityUncheckedUpdateWithoutMarketValidationSignalsInput>
}

export type MarketOpportunityUpdateWithoutMarketValidationSignalsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  marketOpportunityScore?: Prisma.IntFieldUpdateOperationsInput | number
  ValidationStrength?: Prisma.IntFieldUpdateOperationsInput | number
  totalMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  reachableMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  realisticMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  growthRate?: Prisma.IntFieldUpdateOperationsInput | number
  adoptionRate?: Prisma.IntFieldUpdateOperationsInput | number
  marketMaturityLevel?: Prisma.EnumMarketMaturityLevelFieldUpdateOperationsInput | $Enums.MarketMaturityLevel
  marketAnalysisSummary?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  customerSegments?: Prisma.CustomerSegmentsUpdateManyWithoutMarketOpportunityNestedInput
  dailyIdea?: Prisma.DailyIdeaUpdateOneWithoutMarketOpportunityNestedInput
}

export type MarketOpportunityUncheckedUpdateWithoutMarketValidationSignalsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  marketOpportunityScore?: Prisma.IntFieldUpdateOperationsInput | number
  ValidationStrength?: Prisma.IntFieldUpdateOperationsInput | number
  totalMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  reachableMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  realisticMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  growthRate?: Prisma.IntFieldUpdateOperationsInput | number
  adoptionRate?: Prisma.IntFieldUpdateOperationsInput | number
  marketMaturityLevel?: Prisma.EnumMarketMaturityLevelFieldUpdateOperationsInput | $Enums.MarketMaturityLevel
  marketAnalysisSummary?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  customerSegments?: Prisma.CustomerSegmentsUncheckedUpdateManyWithoutMarketOpportunityNestedInput
  dailyIdea?: Prisma.DailyIdeaUncheckedUpdateOneWithoutMarketOpportunityNestedInput
}

export type MarketOpportunityCreateWithoutCustomerSegmentsInput = {
  id?: string
  marketOpportunityScore: number
  ValidationStrength: number
  totalMarketSize: number
  reachableMarketSize: number
  realisticMarketSize: number
  growthRate: number
  adoptionRate: number
  marketMaturityLevel: $Enums.MarketMaturityLevel
  marketAnalysisSummary: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketValidationSignals?: Prisma.MarketValidationSignalsCreateNestedManyWithoutMarketOpportunityInput
  dailyIdea?: Prisma.DailyIdeaCreateNestedOneWithoutMarketOpportunityInput
}

export type MarketOpportunityUncheckedCreateWithoutCustomerSegmentsInput = {
  id?: string
  marketOpportunityScore: number
  ValidationStrength: number
  totalMarketSize: number
  reachableMarketSize: number
  realisticMarketSize: number
  growthRate: number
  adoptionRate: number
  marketMaturityLevel: $Enums.MarketMaturityLevel
  marketAnalysisSummary: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketValidationSignals?: Prisma.MarketValidationSignalsUncheckedCreateNestedManyWithoutMarketOpportunityInput
  dailyIdea?: Prisma.DailyIdeaUncheckedCreateNestedOneWithoutMarketOpportunityInput
}

export type MarketOpportunityCreateOrConnectWithoutCustomerSegmentsInput = {
  where: Prisma.MarketOpportunityWhereUniqueInput
  create: Prisma.XOR<Prisma.MarketOpportunityCreateWithoutCustomerSegmentsInput, Prisma.MarketOpportunityUncheckedCreateWithoutCustomerSegmentsInput>
}

export type MarketOpportunityUpsertWithoutCustomerSegmentsInput = {
  update: Prisma.XOR<Prisma.MarketOpportunityUpdateWithoutCustomerSegmentsInput, Prisma.MarketOpportunityUncheckedUpdateWithoutCustomerSegmentsInput>
  create: Prisma.XOR<Prisma.MarketOpportunityCreateWithoutCustomerSegmentsInput, Prisma.MarketOpportunityUncheckedCreateWithoutCustomerSegmentsInput>
  where?: Prisma.MarketOpportunityWhereInput
}

export type MarketOpportunityUpdateToOneWithWhereWithoutCustomerSegmentsInput = {
  where?: Prisma.MarketOpportunityWhereInput
  data: Prisma.XOR<Prisma.MarketOpportunityUpdateWithoutCustomerSegmentsInput, Prisma.MarketOpportunityUncheckedUpdateWithoutCustomerSegmentsInput>
}

export type MarketOpportunityUpdateWithoutCustomerSegmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  marketOpportunityScore?: Prisma.IntFieldUpdateOperationsInput | number
  ValidationStrength?: Prisma.IntFieldUpdateOperationsInput | number
  totalMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  reachableMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  realisticMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  growthRate?: Prisma.IntFieldUpdateOperationsInput | number
  adoptionRate?: Prisma.IntFieldUpdateOperationsInput | number
  marketMaturityLevel?: Prisma.EnumMarketMaturityLevelFieldUpdateOperationsInput | $Enums.MarketMaturityLevel
  marketAnalysisSummary?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketValidationSignals?: Prisma.MarketValidationSignalsUpdateManyWithoutMarketOpportunityNestedInput
  dailyIdea?: Prisma.DailyIdeaUpdateOneWithoutMarketOpportunityNestedInput
}

export type MarketOpportunityUncheckedUpdateWithoutCustomerSegmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  marketOpportunityScore?: Prisma.IntFieldUpdateOperationsInput | number
  ValidationStrength?: Prisma.IntFieldUpdateOperationsInput | number
  totalMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  reachableMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  realisticMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  growthRate?: Prisma.IntFieldUpdateOperationsInput | number
  adoptionRate?: Prisma.IntFieldUpdateOperationsInput | number
  marketMaturityLevel?: Prisma.EnumMarketMaturityLevelFieldUpdateOperationsInput | $Enums.MarketMaturityLevel
  marketAnalysisSummary?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketValidationSignals?: Prisma.MarketValidationSignalsUncheckedUpdateManyWithoutMarketOpportunityNestedInput
  dailyIdea?: Prisma.DailyIdeaUncheckedUpdateOneWithoutMarketOpportunityNestedInput
}

export type MarketOpportunityCreateWithoutDailyIdeaInput = {
  id?: string
  marketOpportunityScore: number
  ValidationStrength: number
  totalMarketSize: number
  reachableMarketSize: number
  realisticMarketSize: number
  growthRate: number
  adoptionRate: number
  marketMaturityLevel: $Enums.MarketMaturityLevel
  marketAnalysisSummary: string
  createdAt?: Date | string
  updatedAt?: Date | string
  customerSegments?: Prisma.CustomerSegmentsCreateNestedManyWithoutMarketOpportunityInput
  marketValidationSignals?: Prisma.MarketValidationSignalsCreateNestedManyWithoutMarketOpportunityInput
}

export type MarketOpportunityUncheckedCreateWithoutDailyIdeaInput = {
  id?: string
  marketOpportunityScore: number
  ValidationStrength: number
  totalMarketSize: number
  reachableMarketSize: number
  realisticMarketSize: number
  growthRate: number
  adoptionRate: number
  marketMaturityLevel: $Enums.MarketMaturityLevel
  marketAnalysisSummary: string
  createdAt?: Date | string
  updatedAt?: Date | string
  customerSegments?: Prisma.CustomerSegmentsUncheckedCreateNestedManyWithoutMarketOpportunityInput
  marketValidationSignals?: Prisma.MarketValidationSignalsUncheckedCreateNestedManyWithoutMarketOpportunityInput
}

export type MarketOpportunityCreateOrConnectWithoutDailyIdeaInput = {
  where: Prisma.MarketOpportunityWhereUniqueInput
  create: Prisma.XOR<Prisma.MarketOpportunityCreateWithoutDailyIdeaInput, Prisma.MarketOpportunityUncheckedCreateWithoutDailyIdeaInput>
}

export type MarketOpportunityUpsertWithoutDailyIdeaInput = {
  update: Prisma.XOR<Prisma.MarketOpportunityUpdateWithoutDailyIdeaInput, Prisma.MarketOpportunityUncheckedUpdateWithoutDailyIdeaInput>
  create: Prisma.XOR<Prisma.MarketOpportunityCreateWithoutDailyIdeaInput, Prisma.MarketOpportunityUncheckedCreateWithoutDailyIdeaInput>
  where?: Prisma.MarketOpportunityWhereInput
}

export type MarketOpportunityUpdateToOneWithWhereWithoutDailyIdeaInput = {
  where?: Prisma.MarketOpportunityWhereInput
  data: Prisma.XOR<Prisma.MarketOpportunityUpdateWithoutDailyIdeaInput, Prisma.MarketOpportunityUncheckedUpdateWithoutDailyIdeaInput>
}

export type MarketOpportunityUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  marketOpportunityScore?: Prisma.IntFieldUpdateOperationsInput | number
  ValidationStrength?: Prisma.IntFieldUpdateOperationsInput | number
  totalMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  reachableMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  realisticMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  growthRate?: Prisma.IntFieldUpdateOperationsInput | number
  adoptionRate?: Prisma.IntFieldUpdateOperationsInput | number
  marketMaturityLevel?: Prisma.EnumMarketMaturityLevelFieldUpdateOperationsInput | $Enums.MarketMaturityLevel
  marketAnalysisSummary?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  customerSegments?: Prisma.CustomerSegmentsUpdateManyWithoutMarketOpportunityNestedInput
  marketValidationSignals?: Prisma.MarketValidationSignalsUpdateManyWithoutMarketOpportunityNestedInput
}

export type MarketOpportunityUncheckedUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  marketOpportunityScore?: Prisma.IntFieldUpdateOperationsInput | number
  ValidationStrength?: Prisma.IntFieldUpdateOperationsInput | number
  totalMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  reachableMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  realisticMarketSize?: Prisma.IntFieldUpdateOperationsInput | number
  growthRate?: Prisma.IntFieldUpdateOperationsInput | number
  adoptionRate?: Prisma.IntFieldUpdateOperationsInput | number
  marketMaturityLevel?: Prisma.EnumMarketMaturityLevelFieldUpdateOperationsInput | $Enums.MarketMaturityLevel
  marketAnalysisSummary?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  customerSegments?: Prisma.CustomerSegmentsUncheckedUpdateManyWithoutMarketOpportunityNestedInput
  marketValidationSignals?: Prisma.MarketValidationSignalsUncheckedUpdateManyWithoutMarketOpportunityNestedInput
}


/**
 * Count Type MarketOpportunityCountOutputType
 */

export type MarketOpportunityCountOutputType = {
  customerSegments: number
  marketValidationSignals: number
}

export type MarketOpportunityCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  customerSegments?: boolean | MarketOpportunityCountOutputTypeCountCustomerSegmentsArgs
  marketValidationSignals?: boolean | MarketOpportunityCountOutputTypeCountMarketValidationSignalsArgs
}

/**
 * MarketOpportunityCountOutputType without action
 */
export type MarketOpportunityCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketOpportunityCountOutputType
   */
  select?: Prisma.MarketOpportunityCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MarketOpportunityCountOutputType without action
 */
export type MarketOpportunityCountOutputTypeCountCustomerSegmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CustomerSegmentsWhereInput
}

/**
 * MarketOpportunityCountOutputType without action
 */
export type MarketOpportunityCountOutputTypeCountMarketValidationSignalsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MarketValidationSignalsWhereInput
}


export type MarketOpportunitySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  marketOpportunityScore?: boolean
  ValidationStrength?: boolean
  totalMarketSize?: boolean
  reachableMarketSize?: boolean
  realisticMarketSize?: boolean
  growthRate?: boolean
  adoptionRate?: boolean
  marketMaturityLevel?: boolean
  marketAnalysisSummary?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  customerSegments?: boolean | Prisma.MarketOpportunity$customerSegmentsArgs<ExtArgs>
  marketValidationSignals?: boolean | Prisma.MarketOpportunity$marketValidationSignalsArgs<ExtArgs>
  dailyIdea?: boolean | Prisma.MarketOpportunity$dailyIdeaArgs<ExtArgs>
  _count?: boolean | Prisma.MarketOpportunityCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["marketOpportunity"]>

export type MarketOpportunitySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  marketOpportunityScore?: boolean
  ValidationStrength?: boolean
  totalMarketSize?: boolean
  reachableMarketSize?: boolean
  realisticMarketSize?: boolean
  growthRate?: boolean
  adoptionRate?: boolean
  marketMaturityLevel?: boolean
  marketAnalysisSummary?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["marketOpportunity"]>

export type MarketOpportunitySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  marketOpportunityScore?: boolean
  ValidationStrength?: boolean
  totalMarketSize?: boolean
  reachableMarketSize?: boolean
  realisticMarketSize?: boolean
  growthRate?: boolean
  adoptionRate?: boolean
  marketMaturityLevel?: boolean
  marketAnalysisSummary?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["marketOpportunity"]>

export type MarketOpportunitySelectScalar = {
  id?: boolean
  marketOpportunityScore?: boolean
  ValidationStrength?: boolean
  totalMarketSize?: boolean
  reachableMarketSize?: boolean
  realisticMarketSize?: boolean
  growthRate?: boolean
  adoptionRate?: boolean
  marketMaturityLevel?: boolean
  marketAnalysisSummary?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MarketOpportunityOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "marketOpportunityScore" | "ValidationStrength" | "totalMarketSize" | "reachableMarketSize" | "realisticMarketSize" | "growthRate" | "adoptionRate" | "marketMaturityLevel" | "marketAnalysisSummary" | "createdAt" | "updatedAt", ExtArgs["result"]["marketOpportunity"]>
export type MarketOpportunityInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  customerSegments?: boolean | Prisma.MarketOpportunity$customerSegmentsArgs<ExtArgs>
  marketValidationSignals?: boolean | Prisma.MarketOpportunity$marketValidationSignalsArgs<ExtArgs>
  dailyIdea?: boolean | Prisma.MarketOpportunity$dailyIdeaArgs<ExtArgs>
  _count?: boolean | Prisma.MarketOpportunityCountOutputTypeDefaultArgs<ExtArgs>
}
export type MarketOpportunityIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type MarketOpportunityIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $MarketOpportunityPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MarketOpportunity"
  objects: {
    customerSegments: Prisma.$CustomerSegmentsPayload<ExtArgs>[]
    marketValidationSignals: Prisma.$MarketValidationSignalsPayload<ExtArgs>[]
    dailyIdea: Prisma.$DailyIdeaPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    marketOpportunityScore: number
    ValidationStrength: number
    totalMarketSize: number
    reachableMarketSize: number
    realisticMarketSize: number
    growthRate: number
    adoptionRate: number
    marketMaturityLevel: $Enums.MarketMaturityLevel
    marketAnalysisSummary: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["marketOpportunity"]>
  composites: {}
}

export type MarketOpportunityGetPayload<S extends boolean | null | undefined | MarketOpportunityDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MarketOpportunityPayload, S>

export type MarketOpportunityCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MarketOpportunityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MarketOpportunityCountAggregateInputType | true
  }

export interface MarketOpportunityDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MarketOpportunity'], meta: { name: 'MarketOpportunity' } }
  /**
   * Find zero or one MarketOpportunity that matches the filter.
   * @param {MarketOpportunityFindUniqueArgs} args - Arguments to find a MarketOpportunity
   * @example
   * // Get one MarketOpportunity
   * const marketOpportunity = await prisma.marketOpportunity.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MarketOpportunityFindUniqueArgs>(args: Prisma.SelectSubset<T, MarketOpportunityFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MarketOpportunityClient<runtime.Types.Result.GetResult<Prisma.$MarketOpportunityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MarketOpportunity that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MarketOpportunityFindUniqueOrThrowArgs} args - Arguments to find a MarketOpportunity
   * @example
   * // Get one MarketOpportunity
   * const marketOpportunity = await prisma.marketOpportunity.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MarketOpportunityFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MarketOpportunityFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MarketOpportunityClient<runtime.Types.Result.GetResult<Prisma.$MarketOpportunityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MarketOpportunity that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketOpportunityFindFirstArgs} args - Arguments to find a MarketOpportunity
   * @example
   * // Get one MarketOpportunity
   * const marketOpportunity = await prisma.marketOpportunity.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MarketOpportunityFindFirstArgs>(args?: Prisma.SelectSubset<T, MarketOpportunityFindFirstArgs<ExtArgs>>): Prisma.Prisma__MarketOpportunityClient<runtime.Types.Result.GetResult<Prisma.$MarketOpportunityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MarketOpportunity that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketOpportunityFindFirstOrThrowArgs} args - Arguments to find a MarketOpportunity
   * @example
   * // Get one MarketOpportunity
   * const marketOpportunity = await prisma.marketOpportunity.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MarketOpportunityFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MarketOpportunityFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MarketOpportunityClient<runtime.Types.Result.GetResult<Prisma.$MarketOpportunityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MarketOpportunities that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketOpportunityFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MarketOpportunities
   * const marketOpportunities = await prisma.marketOpportunity.findMany()
   * 
   * // Get first 10 MarketOpportunities
   * const marketOpportunities = await prisma.marketOpportunity.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const marketOpportunityWithIdOnly = await prisma.marketOpportunity.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MarketOpportunityFindManyArgs>(args?: Prisma.SelectSubset<T, MarketOpportunityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MarketOpportunityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MarketOpportunity.
   * @param {MarketOpportunityCreateArgs} args - Arguments to create a MarketOpportunity.
   * @example
   * // Create one MarketOpportunity
   * const MarketOpportunity = await prisma.marketOpportunity.create({
   *   data: {
   *     // ... data to create a MarketOpportunity
   *   }
   * })
   * 
   */
  create<T extends MarketOpportunityCreateArgs>(args: Prisma.SelectSubset<T, MarketOpportunityCreateArgs<ExtArgs>>): Prisma.Prisma__MarketOpportunityClient<runtime.Types.Result.GetResult<Prisma.$MarketOpportunityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MarketOpportunities.
   * @param {MarketOpportunityCreateManyArgs} args - Arguments to create many MarketOpportunities.
   * @example
   * // Create many MarketOpportunities
   * const marketOpportunity = await prisma.marketOpportunity.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MarketOpportunityCreateManyArgs>(args?: Prisma.SelectSubset<T, MarketOpportunityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MarketOpportunities and returns the data saved in the database.
   * @param {MarketOpportunityCreateManyAndReturnArgs} args - Arguments to create many MarketOpportunities.
   * @example
   * // Create many MarketOpportunities
   * const marketOpportunity = await prisma.marketOpportunity.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MarketOpportunities and only return the `id`
   * const marketOpportunityWithIdOnly = await prisma.marketOpportunity.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MarketOpportunityCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MarketOpportunityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MarketOpportunityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MarketOpportunity.
   * @param {MarketOpportunityDeleteArgs} args - Arguments to delete one MarketOpportunity.
   * @example
   * // Delete one MarketOpportunity
   * const MarketOpportunity = await prisma.marketOpportunity.delete({
   *   where: {
   *     // ... filter to delete one MarketOpportunity
   *   }
   * })
   * 
   */
  delete<T extends MarketOpportunityDeleteArgs>(args: Prisma.SelectSubset<T, MarketOpportunityDeleteArgs<ExtArgs>>): Prisma.Prisma__MarketOpportunityClient<runtime.Types.Result.GetResult<Prisma.$MarketOpportunityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MarketOpportunity.
   * @param {MarketOpportunityUpdateArgs} args - Arguments to update one MarketOpportunity.
   * @example
   * // Update one MarketOpportunity
   * const marketOpportunity = await prisma.marketOpportunity.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MarketOpportunityUpdateArgs>(args: Prisma.SelectSubset<T, MarketOpportunityUpdateArgs<ExtArgs>>): Prisma.Prisma__MarketOpportunityClient<runtime.Types.Result.GetResult<Prisma.$MarketOpportunityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MarketOpportunities.
   * @param {MarketOpportunityDeleteManyArgs} args - Arguments to filter MarketOpportunities to delete.
   * @example
   * // Delete a few MarketOpportunities
   * const { count } = await prisma.marketOpportunity.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MarketOpportunityDeleteManyArgs>(args?: Prisma.SelectSubset<T, MarketOpportunityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MarketOpportunities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketOpportunityUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MarketOpportunities
   * const marketOpportunity = await prisma.marketOpportunity.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MarketOpportunityUpdateManyArgs>(args: Prisma.SelectSubset<T, MarketOpportunityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MarketOpportunities and returns the data updated in the database.
   * @param {MarketOpportunityUpdateManyAndReturnArgs} args - Arguments to update many MarketOpportunities.
   * @example
   * // Update many MarketOpportunities
   * const marketOpportunity = await prisma.marketOpportunity.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MarketOpportunities and only return the `id`
   * const marketOpportunityWithIdOnly = await prisma.marketOpportunity.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MarketOpportunityUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MarketOpportunityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MarketOpportunityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MarketOpportunity.
   * @param {MarketOpportunityUpsertArgs} args - Arguments to update or create a MarketOpportunity.
   * @example
   * // Update or create a MarketOpportunity
   * const marketOpportunity = await prisma.marketOpportunity.upsert({
   *   create: {
   *     // ... data to create a MarketOpportunity
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MarketOpportunity we want to update
   *   }
   * })
   */
  upsert<T extends MarketOpportunityUpsertArgs>(args: Prisma.SelectSubset<T, MarketOpportunityUpsertArgs<ExtArgs>>): Prisma.Prisma__MarketOpportunityClient<runtime.Types.Result.GetResult<Prisma.$MarketOpportunityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MarketOpportunities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketOpportunityCountArgs} args - Arguments to filter MarketOpportunities to count.
   * @example
   * // Count the number of MarketOpportunities
   * const count = await prisma.marketOpportunity.count({
   *   where: {
   *     // ... the filter for the MarketOpportunities we want to count
   *   }
   * })
  **/
  count<T extends MarketOpportunityCountArgs>(
    args?: Prisma.Subset<T, MarketOpportunityCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MarketOpportunityCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MarketOpportunity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketOpportunityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MarketOpportunityAggregateArgs>(args: Prisma.Subset<T, MarketOpportunityAggregateArgs>): Prisma.PrismaPromise<GetMarketOpportunityAggregateType<T>>

  /**
   * Group by MarketOpportunity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketOpportunityGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MarketOpportunityGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MarketOpportunityGroupByArgs['orderBy'] }
      : { orderBy?: MarketOpportunityGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MarketOpportunityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarketOpportunityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MarketOpportunity model
 */
readonly fields: MarketOpportunityFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MarketOpportunity.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MarketOpportunityClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  customerSegments<T extends Prisma.MarketOpportunity$customerSegmentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MarketOpportunity$customerSegmentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CustomerSegmentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  marketValidationSignals<T extends Prisma.MarketOpportunity$marketValidationSignalsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MarketOpportunity$marketValidationSignalsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MarketValidationSignalsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  dailyIdea<T extends Prisma.MarketOpportunity$dailyIdeaArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MarketOpportunity$dailyIdeaArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MarketOpportunity model
 */
export interface MarketOpportunityFieldRefs {
  readonly id: Prisma.FieldRef<"MarketOpportunity", 'String'>
  readonly marketOpportunityScore: Prisma.FieldRef<"MarketOpportunity", 'Int'>
  readonly ValidationStrength: Prisma.FieldRef<"MarketOpportunity", 'Int'>
  readonly totalMarketSize: Prisma.FieldRef<"MarketOpportunity", 'Int'>
  readonly reachableMarketSize: Prisma.FieldRef<"MarketOpportunity", 'Int'>
  readonly realisticMarketSize: Prisma.FieldRef<"MarketOpportunity", 'Int'>
  readonly growthRate: Prisma.FieldRef<"MarketOpportunity", 'Int'>
  readonly adoptionRate: Prisma.FieldRef<"MarketOpportunity", 'Int'>
  readonly marketMaturityLevel: Prisma.FieldRef<"MarketOpportunity", 'MarketMaturityLevel'>
  readonly marketAnalysisSummary: Prisma.FieldRef<"MarketOpportunity", 'String'>
  readonly createdAt: Prisma.FieldRef<"MarketOpportunity", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MarketOpportunity", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MarketOpportunity findUnique
 */
export type MarketOpportunityFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketOpportunity
   */
  select?: Prisma.MarketOpportunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketOpportunity
   */
  omit?: Prisma.MarketOpportunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketOpportunityInclude<ExtArgs> | null
  /**
   * Filter, which MarketOpportunity to fetch.
   */
  where: Prisma.MarketOpportunityWhereUniqueInput
}

/**
 * MarketOpportunity findUniqueOrThrow
 */
export type MarketOpportunityFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketOpportunity
   */
  select?: Prisma.MarketOpportunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketOpportunity
   */
  omit?: Prisma.MarketOpportunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketOpportunityInclude<ExtArgs> | null
  /**
   * Filter, which MarketOpportunity to fetch.
   */
  where: Prisma.MarketOpportunityWhereUniqueInput
}

/**
 * MarketOpportunity findFirst
 */
export type MarketOpportunityFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketOpportunity
   */
  select?: Prisma.MarketOpportunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketOpportunity
   */
  omit?: Prisma.MarketOpportunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketOpportunityInclude<ExtArgs> | null
  /**
   * Filter, which MarketOpportunity to fetch.
   */
  where?: Prisma.MarketOpportunityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MarketOpportunities to fetch.
   */
  orderBy?: Prisma.MarketOpportunityOrderByWithRelationInput | Prisma.MarketOpportunityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MarketOpportunities.
   */
  cursor?: Prisma.MarketOpportunityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MarketOpportunities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MarketOpportunities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MarketOpportunities.
   */
  distinct?: Prisma.MarketOpportunityScalarFieldEnum | Prisma.MarketOpportunityScalarFieldEnum[]
}

/**
 * MarketOpportunity findFirstOrThrow
 */
export type MarketOpportunityFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketOpportunity
   */
  select?: Prisma.MarketOpportunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketOpportunity
   */
  omit?: Prisma.MarketOpportunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketOpportunityInclude<ExtArgs> | null
  /**
   * Filter, which MarketOpportunity to fetch.
   */
  where?: Prisma.MarketOpportunityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MarketOpportunities to fetch.
   */
  orderBy?: Prisma.MarketOpportunityOrderByWithRelationInput | Prisma.MarketOpportunityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MarketOpportunities.
   */
  cursor?: Prisma.MarketOpportunityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MarketOpportunities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MarketOpportunities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MarketOpportunities.
   */
  distinct?: Prisma.MarketOpportunityScalarFieldEnum | Prisma.MarketOpportunityScalarFieldEnum[]
}

/**
 * MarketOpportunity findMany
 */
export type MarketOpportunityFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketOpportunity
   */
  select?: Prisma.MarketOpportunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketOpportunity
   */
  omit?: Prisma.MarketOpportunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketOpportunityInclude<ExtArgs> | null
  /**
   * Filter, which MarketOpportunities to fetch.
   */
  where?: Prisma.MarketOpportunityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MarketOpportunities to fetch.
   */
  orderBy?: Prisma.MarketOpportunityOrderByWithRelationInput | Prisma.MarketOpportunityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MarketOpportunities.
   */
  cursor?: Prisma.MarketOpportunityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MarketOpportunities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MarketOpportunities.
   */
  skip?: number
  distinct?: Prisma.MarketOpportunityScalarFieldEnum | Prisma.MarketOpportunityScalarFieldEnum[]
}

/**
 * MarketOpportunity create
 */
export type MarketOpportunityCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketOpportunity
   */
  select?: Prisma.MarketOpportunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketOpportunity
   */
  omit?: Prisma.MarketOpportunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketOpportunityInclude<ExtArgs> | null
  /**
   * The data needed to create a MarketOpportunity.
   */
  data: Prisma.XOR<Prisma.MarketOpportunityCreateInput, Prisma.MarketOpportunityUncheckedCreateInput>
}

/**
 * MarketOpportunity createMany
 */
export type MarketOpportunityCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MarketOpportunities.
   */
  data: Prisma.MarketOpportunityCreateManyInput | Prisma.MarketOpportunityCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MarketOpportunity createManyAndReturn
 */
export type MarketOpportunityCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketOpportunity
   */
  select?: Prisma.MarketOpportunitySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MarketOpportunity
   */
  omit?: Prisma.MarketOpportunityOmit<ExtArgs> | null
  /**
   * The data used to create many MarketOpportunities.
   */
  data: Prisma.MarketOpportunityCreateManyInput | Prisma.MarketOpportunityCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MarketOpportunity update
 */
export type MarketOpportunityUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketOpportunity
   */
  select?: Prisma.MarketOpportunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketOpportunity
   */
  omit?: Prisma.MarketOpportunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketOpportunityInclude<ExtArgs> | null
  /**
   * The data needed to update a MarketOpportunity.
   */
  data: Prisma.XOR<Prisma.MarketOpportunityUpdateInput, Prisma.MarketOpportunityUncheckedUpdateInput>
  /**
   * Choose, which MarketOpportunity to update.
   */
  where: Prisma.MarketOpportunityWhereUniqueInput
}

/**
 * MarketOpportunity updateMany
 */
export type MarketOpportunityUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MarketOpportunities.
   */
  data: Prisma.XOR<Prisma.MarketOpportunityUpdateManyMutationInput, Prisma.MarketOpportunityUncheckedUpdateManyInput>
  /**
   * Filter which MarketOpportunities to update
   */
  where?: Prisma.MarketOpportunityWhereInput
  /**
   * Limit how many MarketOpportunities to update.
   */
  limit?: number
}

/**
 * MarketOpportunity updateManyAndReturn
 */
export type MarketOpportunityUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketOpportunity
   */
  select?: Prisma.MarketOpportunitySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MarketOpportunity
   */
  omit?: Prisma.MarketOpportunityOmit<ExtArgs> | null
  /**
   * The data used to update MarketOpportunities.
   */
  data: Prisma.XOR<Prisma.MarketOpportunityUpdateManyMutationInput, Prisma.MarketOpportunityUncheckedUpdateManyInput>
  /**
   * Filter which MarketOpportunities to update
   */
  where?: Prisma.MarketOpportunityWhereInput
  /**
   * Limit how many MarketOpportunities to update.
   */
  limit?: number
}

/**
 * MarketOpportunity upsert
 */
export type MarketOpportunityUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketOpportunity
   */
  select?: Prisma.MarketOpportunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketOpportunity
   */
  omit?: Prisma.MarketOpportunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketOpportunityInclude<ExtArgs> | null
  /**
   * The filter to search for the MarketOpportunity to update in case it exists.
   */
  where: Prisma.MarketOpportunityWhereUniqueInput
  /**
   * In case the MarketOpportunity found by the `where` argument doesn't exist, create a new MarketOpportunity with this data.
   */
  create: Prisma.XOR<Prisma.MarketOpportunityCreateInput, Prisma.MarketOpportunityUncheckedCreateInput>
  /**
   * In case the MarketOpportunity was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MarketOpportunityUpdateInput, Prisma.MarketOpportunityUncheckedUpdateInput>
}

/**
 * MarketOpportunity delete
 */
export type MarketOpportunityDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketOpportunity
   */
  select?: Prisma.MarketOpportunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketOpportunity
   */
  omit?: Prisma.MarketOpportunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketOpportunityInclude<ExtArgs> | null
  /**
   * Filter which MarketOpportunity to delete.
   */
  where: Prisma.MarketOpportunityWhereUniqueInput
}

/**
 * MarketOpportunity deleteMany
 */
export type MarketOpportunityDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MarketOpportunities to delete
   */
  where?: Prisma.MarketOpportunityWhereInput
  /**
   * Limit how many MarketOpportunities to delete.
   */
  limit?: number
}

/**
 * MarketOpportunity.customerSegments
 */
export type MarketOpportunity$customerSegmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerSegments
   */
  select?: Prisma.CustomerSegmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerSegments
   */
  omit?: Prisma.CustomerSegmentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerSegmentsInclude<ExtArgs> | null
  where?: Prisma.CustomerSegmentsWhereInput
  orderBy?: Prisma.CustomerSegmentsOrderByWithRelationInput | Prisma.CustomerSegmentsOrderByWithRelationInput[]
  cursor?: Prisma.CustomerSegmentsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CustomerSegmentsScalarFieldEnum | Prisma.CustomerSegmentsScalarFieldEnum[]
}

/**
 * MarketOpportunity.marketValidationSignals
 */
export type MarketOpportunity$marketValidationSignalsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketValidationSignals
   */
  select?: Prisma.MarketValidationSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketValidationSignals
   */
  omit?: Prisma.MarketValidationSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketValidationSignalsInclude<ExtArgs> | null
  where?: Prisma.MarketValidationSignalsWhereInput
  orderBy?: Prisma.MarketValidationSignalsOrderByWithRelationInput | Prisma.MarketValidationSignalsOrderByWithRelationInput[]
  cursor?: Prisma.MarketValidationSignalsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MarketValidationSignalsScalarFieldEnum | Prisma.MarketValidationSignalsScalarFieldEnum[]
}

/**
 * MarketOpportunity.dailyIdea
 */
export type MarketOpportunity$dailyIdeaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DailyIdea
   */
  select?: Prisma.DailyIdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DailyIdea
   */
  omit?: Prisma.DailyIdeaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DailyIdeaInclude<ExtArgs> | null
  where?: Prisma.DailyIdeaWhereInput
}

/**
 * MarketOpportunity without action
 */
export type MarketOpportunityDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketOpportunity
   */
  select?: Prisma.MarketOpportunitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketOpportunity
   */
  omit?: Prisma.MarketOpportunityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketOpportunityInclude<ExtArgs> | null
}
