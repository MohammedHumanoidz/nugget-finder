
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `WhyNow` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model WhyNow
 * 
 */
export type WhyNowModel = runtime.Types.Result.DefaultSelection<Prisma.$WhyNowPayload>

export type AggregateWhyNow = {
  _count: WhyNowCountAggregateOutputType | null
  _avg: WhyNowAvgAggregateOutputType | null
  _sum: WhyNowSumAggregateOutputType | null
  _min: WhyNowMinAggregateOutputType | null
  _max: WhyNowMaxAggregateOutputType | null
}

export type WhyNowAvgAggregateOutputType = {
  trendStrength: number | null
  timingUrgency: number | null
}

export type WhyNowSumAggregateOutputType = {
  trendStrength: number | null
  timingUrgency: number | null
}

export type WhyNowMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  trendStrength: number | null
  catalystType: $Enums.CatalystType | null
  timingUrgency: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WhyNowMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  trendStrength: number | null
  catalystType: $Enums.CatalystType | null
  timingUrgency: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WhyNowCountAggregateOutputType = {
  id: number
  title: number
  description: number
  trendStrength: number
  catalystType: number
  timingUrgency: number
  supportingData: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type WhyNowAvgAggregateInputType = {
  trendStrength?: true
  timingUrgency?: true
}

export type WhyNowSumAggregateInputType = {
  trendStrength?: true
  timingUrgency?: true
}

export type WhyNowMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  trendStrength?: true
  catalystType?: true
  timingUrgency?: true
  createdAt?: true
  updatedAt?: true
}

export type WhyNowMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  trendStrength?: true
  catalystType?: true
  timingUrgency?: true
  createdAt?: true
  updatedAt?: true
}

export type WhyNowCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  trendStrength?: true
  catalystType?: true
  timingUrgency?: true
  supportingData?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type WhyNowAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WhyNow to aggregate.
   */
  where?: Prisma.WhyNowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WhyNows to fetch.
   */
  orderBy?: Prisma.WhyNowOrderByWithRelationInput | Prisma.WhyNowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WhyNowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WhyNows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WhyNows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WhyNows
  **/
  _count?: true | WhyNowCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WhyNowAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WhyNowSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WhyNowMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WhyNowMaxAggregateInputType
}

export type GetWhyNowAggregateType<T extends WhyNowAggregateArgs> = {
      [P in keyof T & keyof AggregateWhyNow]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWhyNow[P]>
    : Prisma.GetScalarType<T[P], AggregateWhyNow[P]>
}




export type WhyNowGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WhyNowWhereInput
  orderBy?: Prisma.WhyNowOrderByWithAggregationInput | Prisma.WhyNowOrderByWithAggregationInput[]
  by: Prisma.WhyNowScalarFieldEnum[] | Prisma.WhyNowScalarFieldEnum
  having?: Prisma.WhyNowScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WhyNowCountAggregateInputType | true
  _avg?: WhyNowAvgAggregateInputType
  _sum?: WhyNowSumAggregateInputType
  _min?: WhyNowMinAggregateInputType
  _max?: WhyNowMaxAggregateInputType
}

export type WhyNowGroupByOutputType = {
  id: string
  title: string
  description: string
  trendStrength: number
  catalystType: $Enums.CatalystType
  timingUrgency: number
  supportingData: runtime.JsonValue
  createdAt: Date
  updatedAt: Date
  _count: WhyNowCountAggregateOutputType | null
  _avg: WhyNowAvgAggregateOutputType | null
  _sum: WhyNowSumAggregateOutputType | null
  _min: WhyNowMinAggregateOutputType | null
  _max: WhyNowMaxAggregateOutputType | null
}

type GetWhyNowGroupByPayload<T extends WhyNowGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WhyNowGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WhyNowGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WhyNowGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WhyNowGroupByOutputType[P]>
      }
    >
  > 



export type WhyNowWhereInput = {
  AND?: Prisma.WhyNowWhereInput | Prisma.WhyNowWhereInput[]
  OR?: Prisma.WhyNowWhereInput[]
  NOT?: Prisma.WhyNowWhereInput | Prisma.WhyNowWhereInput[]
  id?: Prisma.StringFilter<"WhyNow"> | string
  title?: Prisma.StringFilter<"WhyNow"> | string
  description?: Prisma.StringFilter<"WhyNow"> | string
  trendStrength?: Prisma.IntFilter<"WhyNow"> | number
  catalystType?: Prisma.EnumCatalystTypeFilter<"WhyNow"> | $Enums.CatalystType
  timingUrgency?: Prisma.IntFilter<"WhyNow"> | number
  supportingData?: Prisma.JsonFilter<"WhyNow">
  createdAt?: Prisma.DateTimeFilter<"WhyNow"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WhyNow"> | Date | string
  dailyIdeas?: Prisma.DailyIdeaListRelationFilter
}

export type WhyNowOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  trendStrength?: Prisma.SortOrder
  catalystType?: Prisma.SortOrder
  timingUrgency?: Prisma.SortOrder
  supportingData?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeas?: Prisma.DailyIdeaOrderByRelationAggregateInput
}

export type WhyNowWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.WhyNowWhereInput | Prisma.WhyNowWhereInput[]
  OR?: Prisma.WhyNowWhereInput[]
  NOT?: Prisma.WhyNowWhereInput | Prisma.WhyNowWhereInput[]
  title?: Prisma.StringFilter<"WhyNow"> | string
  description?: Prisma.StringFilter<"WhyNow"> | string
  trendStrength?: Prisma.IntFilter<"WhyNow"> | number
  catalystType?: Prisma.EnumCatalystTypeFilter<"WhyNow"> | $Enums.CatalystType
  timingUrgency?: Prisma.IntFilter<"WhyNow"> | number
  supportingData?: Prisma.JsonFilter<"WhyNow">
  createdAt?: Prisma.DateTimeFilter<"WhyNow"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WhyNow"> | Date | string
  dailyIdeas?: Prisma.DailyIdeaListRelationFilter
}, "id">

export type WhyNowOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  trendStrength?: Prisma.SortOrder
  catalystType?: Prisma.SortOrder
  timingUrgency?: Prisma.SortOrder
  supportingData?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.WhyNowCountOrderByAggregateInput
  _avg?: Prisma.WhyNowAvgOrderByAggregateInput
  _max?: Prisma.WhyNowMaxOrderByAggregateInput
  _min?: Prisma.WhyNowMinOrderByAggregateInput
  _sum?: Prisma.WhyNowSumOrderByAggregateInput
}

export type WhyNowScalarWhereWithAggregatesInput = {
  AND?: Prisma.WhyNowScalarWhereWithAggregatesInput | Prisma.WhyNowScalarWhereWithAggregatesInput[]
  OR?: Prisma.WhyNowScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WhyNowScalarWhereWithAggregatesInput | Prisma.WhyNowScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"WhyNow"> | string
  title?: Prisma.StringWithAggregatesFilter<"WhyNow"> | string
  description?: Prisma.StringWithAggregatesFilter<"WhyNow"> | string
  trendStrength?: Prisma.IntWithAggregatesFilter<"WhyNow"> | number
  catalystType?: Prisma.EnumCatalystTypeWithAggregatesFilter<"WhyNow"> | $Enums.CatalystType
  timingUrgency?: Prisma.IntWithAggregatesFilter<"WhyNow"> | number
  supportingData?: Prisma.JsonWithAggregatesFilter<"WhyNow">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WhyNow"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WhyNow"> | Date | string
}

export type WhyNowCreateInput = {
  id?: string
  title: string
  description: string
  trendStrength: number
  catalystType: $Enums.CatalystType
  timingUrgency: number
  supportingData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdeas?: Prisma.DailyIdeaCreateNestedManyWithoutWhyNowInput
}

export type WhyNowUncheckedCreateInput = {
  id?: string
  title: string
  description: string
  trendStrength: number
  catalystType: $Enums.CatalystType
  timingUrgency: number
  supportingData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdeas?: Prisma.DailyIdeaUncheckedCreateNestedManyWithoutWhyNowInput
}

export type WhyNowUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  trendStrength?: Prisma.IntFieldUpdateOperationsInput | number
  catalystType?: Prisma.EnumCatalystTypeFieldUpdateOperationsInput | $Enums.CatalystType
  timingUrgency?: Prisma.IntFieldUpdateOperationsInput | number
  supportingData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdeas?: Prisma.DailyIdeaUpdateManyWithoutWhyNowNestedInput
}

export type WhyNowUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  trendStrength?: Prisma.IntFieldUpdateOperationsInput | number
  catalystType?: Prisma.EnumCatalystTypeFieldUpdateOperationsInput | $Enums.CatalystType
  timingUrgency?: Prisma.IntFieldUpdateOperationsInput | number
  supportingData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdeas?: Prisma.DailyIdeaUncheckedUpdateManyWithoutWhyNowNestedInput
}

export type WhyNowCreateManyInput = {
  id?: string
  title: string
  description: string
  trendStrength: number
  catalystType: $Enums.CatalystType
  timingUrgency: number
  supportingData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WhyNowUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  trendStrength?: Prisma.IntFieldUpdateOperationsInput | number
  catalystType?: Prisma.EnumCatalystTypeFieldUpdateOperationsInput | $Enums.CatalystType
  timingUrgency?: Prisma.IntFieldUpdateOperationsInput | number
  supportingData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WhyNowUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  trendStrength?: Prisma.IntFieldUpdateOperationsInput | number
  catalystType?: Prisma.EnumCatalystTypeFieldUpdateOperationsInput | $Enums.CatalystType
  timingUrgency?: Prisma.IntFieldUpdateOperationsInput | number
  supportingData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WhyNowCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  trendStrength?: Prisma.SortOrder
  catalystType?: Prisma.SortOrder
  timingUrgency?: Prisma.SortOrder
  supportingData?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WhyNowAvgOrderByAggregateInput = {
  trendStrength?: Prisma.SortOrder
  timingUrgency?: Prisma.SortOrder
}

export type WhyNowMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  trendStrength?: Prisma.SortOrder
  catalystType?: Prisma.SortOrder
  timingUrgency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WhyNowMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  trendStrength?: Prisma.SortOrder
  catalystType?: Prisma.SortOrder
  timingUrgency?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WhyNowSumOrderByAggregateInput = {
  trendStrength?: Prisma.SortOrder
  timingUrgency?: Prisma.SortOrder
}

export type WhyNowScalarRelationFilter = {
  is?: Prisma.WhyNowWhereInput
  isNot?: Prisma.WhyNowWhereInput
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EnumCatalystTypeFieldUpdateOperationsInput = {
  set?: $Enums.CatalystType
}

export type WhyNowCreateNestedOneWithoutDailyIdeasInput = {
  create?: Prisma.XOR<Prisma.WhyNowCreateWithoutDailyIdeasInput, Prisma.WhyNowUncheckedCreateWithoutDailyIdeasInput>
  connectOrCreate?: Prisma.WhyNowCreateOrConnectWithoutDailyIdeasInput
  connect?: Prisma.WhyNowWhereUniqueInput
}

export type WhyNowUpdateOneRequiredWithoutDailyIdeasNestedInput = {
  create?: Prisma.XOR<Prisma.WhyNowCreateWithoutDailyIdeasInput, Prisma.WhyNowUncheckedCreateWithoutDailyIdeasInput>
  connectOrCreate?: Prisma.WhyNowCreateOrConnectWithoutDailyIdeasInput
  upsert?: Prisma.WhyNowUpsertWithoutDailyIdeasInput
  connect?: Prisma.WhyNowWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WhyNowUpdateToOneWithWhereWithoutDailyIdeasInput, Prisma.WhyNowUpdateWithoutDailyIdeasInput>, Prisma.WhyNowUncheckedUpdateWithoutDailyIdeasInput>
}

export type WhyNowCreateWithoutDailyIdeasInput = {
  id?: string
  title: string
  description: string
  trendStrength: number
  catalystType: $Enums.CatalystType
  timingUrgency: number
  supportingData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WhyNowUncheckedCreateWithoutDailyIdeasInput = {
  id?: string
  title: string
  description: string
  trendStrength: number
  catalystType: $Enums.CatalystType
  timingUrgency: number
  supportingData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WhyNowCreateOrConnectWithoutDailyIdeasInput = {
  where: Prisma.WhyNowWhereUniqueInput
  create: Prisma.XOR<Prisma.WhyNowCreateWithoutDailyIdeasInput, Prisma.WhyNowUncheckedCreateWithoutDailyIdeasInput>
}

export type WhyNowUpsertWithoutDailyIdeasInput = {
  update: Prisma.XOR<Prisma.WhyNowUpdateWithoutDailyIdeasInput, Prisma.WhyNowUncheckedUpdateWithoutDailyIdeasInput>
  create: Prisma.XOR<Prisma.WhyNowCreateWithoutDailyIdeasInput, Prisma.WhyNowUncheckedCreateWithoutDailyIdeasInput>
  where?: Prisma.WhyNowWhereInput
}

export type WhyNowUpdateToOneWithWhereWithoutDailyIdeasInput = {
  where?: Prisma.WhyNowWhereInput
  data: Prisma.XOR<Prisma.WhyNowUpdateWithoutDailyIdeasInput, Prisma.WhyNowUncheckedUpdateWithoutDailyIdeasInput>
}

export type WhyNowUpdateWithoutDailyIdeasInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  trendStrength?: Prisma.IntFieldUpdateOperationsInput | number
  catalystType?: Prisma.EnumCatalystTypeFieldUpdateOperationsInput | $Enums.CatalystType
  timingUrgency?: Prisma.IntFieldUpdateOperationsInput | number
  supportingData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WhyNowUncheckedUpdateWithoutDailyIdeasInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  trendStrength?: Prisma.IntFieldUpdateOperationsInput | number
  catalystType?: Prisma.EnumCatalystTypeFieldUpdateOperationsInput | $Enums.CatalystType
  timingUrgency?: Prisma.IntFieldUpdateOperationsInput | number
  supportingData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type WhyNowCountOutputType
 */

export type WhyNowCountOutputType = {
  dailyIdeas: number
}

export type WhyNowCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdeas?: boolean | WhyNowCountOutputTypeCountDailyIdeasArgs
}

/**
 * WhyNowCountOutputType without action
 */
export type WhyNowCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WhyNowCountOutputType
   */
  select?: Prisma.WhyNowCountOutputTypeSelect<ExtArgs> | null
}

/**
 * WhyNowCountOutputType without action
 */
export type WhyNowCountOutputTypeCountDailyIdeasArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DailyIdeaWhereInput
}


export type WhyNowSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  trendStrength?: boolean
  catalystType?: boolean
  timingUrgency?: boolean
  supportingData?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeas?: boolean | Prisma.WhyNow$dailyIdeasArgs<ExtArgs>
  _count?: boolean | Prisma.WhyNowCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["whyNow"]>

export type WhyNowSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  trendStrength?: boolean
  catalystType?: boolean
  timingUrgency?: boolean
  supportingData?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["whyNow"]>

export type WhyNowSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  trendStrength?: boolean
  catalystType?: boolean
  timingUrgency?: boolean
  supportingData?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["whyNow"]>

export type WhyNowSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  trendStrength?: boolean
  catalystType?: boolean
  timingUrgency?: boolean
  supportingData?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type WhyNowOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "trendStrength" | "catalystType" | "timingUrgency" | "supportingData" | "createdAt" | "updatedAt", ExtArgs["result"]["whyNow"]>
export type WhyNowInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdeas?: boolean | Prisma.WhyNow$dailyIdeasArgs<ExtArgs>
  _count?: boolean | Prisma.WhyNowCountOutputTypeDefaultArgs<ExtArgs>
}
export type WhyNowIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type WhyNowIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $WhyNowPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WhyNow"
  objects: {
    dailyIdeas: Prisma.$DailyIdeaPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    description: string
    trendStrength: number
    catalystType: $Enums.CatalystType
    timingUrgency: number
    supportingData: runtime.JsonValue
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["whyNow"]>
  composites: {}
}

export type WhyNowGetPayload<S extends boolean | null | undefined | WhyNowDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WhyNowPayload, S>

export type WhyNowCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WhyNowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WhyNowCountAggregateInputType | true
  }

export interface WhyNowDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WhyNow'], meta: { name: 'WhyNow' } }
  /**
   * Find zero or one WhyNow that matches the filter.
   * @param {WhyNowFindUniqueArgs} args - Arguments to find a WhyNow
   * @example
   * // Get one WhyNow
   * const whyNow = await prisma.whyNow.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WhyNowFindUniqueArgs>(args: Prisma.SelectSubset<T, WhyNowFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WhyNowClient<runtime.Types.Result.GetResult<Prisma.$WhyNowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WhyNow that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WhyNowFindUniqueOrThrowArgs} args - Arguments to find a WhyNow
   * @example
   * // Get one WhyNow
   * const whyNow = await prisma.whyNow.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WhyNowFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WhyNowFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WhyNowClient<runtime.Types.Result.GetResult<Prisma.$WhyNowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WhyNow that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WhyNowFindFirstArgs} args - Arguments to find a WhyNow
   * @example
   * // Get one WhyNow
   * const whyNow = await prisma.whyNow.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WhyNowFindFirstArgs>(args?: Prisma.SelectSubset<T, WhyNowFindFirstArgs<ExtArgs>>): Prisma.Prisma__WhyNowClient<runtime.Types.Result.GetResult<Prisma.$WhyNowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WhyNow that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WhyNowFindFirstOrThrowArgs} args - Arguments to find a WhyNow
   * @example
   * // Get one WhyNow
   * const whyNow = await prisma.whyNow.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WhyNowFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WhyNowFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WhyNowClient<runtime.Types.Result.GetResult<Prisma.$WhyNowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WhyNows that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WhyNowFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WhyNows
   * const whyNows = await prisma.whyNow.findMany()
   * 
   * // Get first 10 WhyNows
   * const whyNows = await prisma.whyNow.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const whyNowWithIdOnly = await prisma.whyNow.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WhyNowFindManyArgs>(args?: Prisma.SelectSubset<T, WhyNowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WhyNowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WhyNow.
   * @param {WhyNowCreateArgs} args - Arguments to create a WhyNow.
   * @example
   * // Create one WhyNow
   * const WhyNow = await prisma.whyNow.create({
   *   data: {
   *     // ... data to create a WhyNow
   *   }
   * })
   * 
   */
  create<T extends WhyNowCreateArgs>(args: Prisma.SelectSubset<T, WhyNowCreateArgs<ExtArgs>>): Prisma.Prisma__WhyNowClient<runtime.Types.Result.GetResult<Prisma.$WhyNowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WhyNows.
   * @param {WhyNowCreateManyArgs} args - Arguments to create many WhyNows.
   * @example
   * // Create many WhyNows
   * const whyNow = await prisma.whyNow.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WhyNowCreateManyArgs>(args?: Prisma.SelectSubset<T, WhyNowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WhyNows and returns the data saved in the database.
   * @param {WhyNowCreateManyAndReturnArgs} args - Arguments to create many WhyNows.
   * @example
   * // Create many WhyNows
   * const whyNow = await prisma.whyNow.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WhyNows and only return the `id`
   * const whyNowWithIdOnly = await prisma.whyNow.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WhyNowCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WhyNowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WhyNowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WhyNow.
   * @param {WhyNowDeleteArgs} args - Arguments to delete one WhyNow.
   * @example
   * // Delete one WhyNow
   * const WhyNow = await prisma.whyNow.delete({
   *   where: {
   *     // ... filter to delete one WhyNow
   *   }
   * })
   * 
   */
  delete<T extends WhyNowDeleteArgs>(args: Prisma.SelectSubset<T, WhyNowDeleteArgs<ExtArgs>>): Prisma.Prisma__WhyNowClient<runtime.Types.Result.GetResult<Prisma.$WhyNowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WhyNow.
   * @param {WhyNowUpdateArgs} args - Arguments to update one WhyNow.
   * @example
   * // Update one WhyNow
   * const whyNow = await prisma.whyNow.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WhyNowUpdateArgs>(args: Prisma.SelectSubset<T, WhyNowUpdateArgs<ExtArgs>>): Prisma.Prisma__WhyNowClient<runtime.Types.Result.GetResult<Prisma.$WhyNowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WhyNows.
   * @param {WhyNowDeleteManyArgs} args - Arguments to filter WhyNows to delete.
   * @example
   * // Delete a few WhyNows
   * const { count } = await prisma.whyNow.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WhyNowDeleteManyArgs>(args?: Prisma.SelectSubset<T, WhyNowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WhyNows.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WhyNowUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WhyNows
   * const whyNow = await prisma.whyNow.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WhyNowUpdateManyArgs>(args: Prisma.SelectSubset<T, WhyNowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WhyNows and returns the data updated in the database.
   * @param {WhyNowUpdateManyAndReturnArgs} args - Arguments to update many WhyNows.
   * @example
   * // Update many WhyNows
   * const whyNow = await prisma.whyNow.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WhyNows and only return the `id`
   * const whyNowWithIdOnly = await prisma.whyNow.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WhyNowUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WhyNowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WhyNowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WhyNow.
   * @param {WhyNowUpsertArgs} args - Arguments to update or create a WhyNow.
   * @example
   * // Update or create a WhyNow
   * const whyNow = await prisma.whyNow.upsert({
   *   create: {
   *     // ... data to create a WhyNow
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WhyNow we want to update
   *   }
   * })
   */
  upsert<T extends WhyNowUpsertArgs>(args: Prisma.SelectSubset<T, WhyNowUpsertArgs<ExtArgs>>): Prisma.Prisma__WhyNowClient<runtime.Types.Result.GetResult<Prisma.$WhyNowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WhyNows.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WhyNowCountArgs} args - Arguments to filter WhyNows to count.
   * @example
   * // Count the number of WhyNows
   * const count = await prisma.whyNow.count({
   *   where: {
   *     // ... the filter for the WhyNows we want to count
   *   }
   * })
  **/
  count<T extends WhyNowCountArgs>(
    args?: Prisma.Subset<T, WhyNowCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WhyNowCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WhyNow.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WhyNowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WhyNowAggregateArgs>(args: Prisma.Subset<T, WhyNowAggregateArgs>): Prisma.PrismaPromise<GetWhyNowAggregateType<T>>

  /**
   * Group by WhyNow.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WhyNowGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WhyNowGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WhyNowGroupByArgs['orderBy'] }
      : { orderBy?: WhyNowGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WhyNowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWhyNowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WhyNow model
 */
readonly fields: WhyNowFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WhyNow.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WhyNowClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  dailyIdeas<T extends Prisma.WhyNow$dailyIdeasArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WhyNow$dailyIdeasArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WhyNow model
 */
export interface WhyNowFieldRefs {
  readonly id: Prisma.FieldRef<"WhyNow", 'String'>
  readonly title: Prisma.FieldRef<"WhyNow", 'String'>
  readonly description: Prisma.FieldRef<"WhyNow", 'String'>
  readonly trendStrength: Prisma.FieldRef<"WhyNow", 'Int'>
  readonly catalystType: Prisma.FieldRef<"WhyNow", 'CatalystType'>
  readonly timingUrgency: Prisma.FieldRef<"WhyNow", 'Int'>
  readonly supportingData: Prisma.FieldRef<"WhyNow", 'Json'>
  readonly createdAt: Prisma.FieldRef<"WhyNow", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WhyNow", 'DateTime'>
}
    

// Custom InputTypes
/**
 * WhyNow findUnique
 */
export type WhyNowFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WhyNow
   */
  select?: Prisma.WhyNowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WhyNow
   */
  omit?: Prisma.WhyNowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WhyNowInclude<ExtArgs> | null
  /**
   * Filter, which WhyNow to fetch.
   */
  where: Prisma.WhyNowWhereUniqueInput
}

/**
 * WhyNow findUniqueOrThrow
 */
export type WhyNowFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WhyNow
   */
  select?: Prisma.WhyNowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WhyNow
   */
  omit?: Prisma.WhyNowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WhyNowInclude<ExtArgs> | null
  /**
   * Filter, which WhyNow to fetch.
   */
  where: Prisma.WhyNowWhereUniqueInput
}

/**
 * WhyNow findFirst
 */
export type WhyNowFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WhyNow
   */
  select?: Prisma.WhyNowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WhyNow
   */
  omit?: Prisma.WhyNowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WhyNowInclude<ExtArgs> | null
  /**
   * Filter, which WhyNow to fetch.
   */
  where?: Prisma.WhyNowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WhyNows to fetch.
   */
  orderBy?: Prisma.WhyNowOrderByWithRelationInput | Prisma.WhyNowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WhyNows.
   */
  cursor?: Prisma.WhyNowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WhyNows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WhyNows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WhyNows.
   */
  distinct?: Prisma.WhyNowScalarFieldEnum | Prisma.WhyNowScalarFieldEnum[]
}

/**
 * WhyNow findFirstOrThrow
 */
export type WhyNowFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WhyNow
   */
  select?: Prisma.WhyNowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WhyNow
   */
  omit?: Prisma.WhyNowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WhyNowInclude<ExtArgs> | null
  /**
   * Filter, which WhyNow to fetch.
   */
  where?: Prisma.WhyNowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WhyNows to fetch.
   */
  orderBy?: Prisma.WhyNowOrderByWithRelationInput | Prisma.WhyNowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WhyNows.
   */
  cursor?: Prisma.WhyNowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WhyNows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WhyNows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WhyNows.
   */
  distinct?: Prisma.WhyNowScalarFieldEnum | Prisma.WhyNowScalarFieldEnum[]
}

/**
 * WhyNow findMany
 */
export type WhyNowFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WhyNow
   */
  select?: Prisma.WhyNowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WhyNow
   */
  omit?: Prisma.WhyNowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WhyNowInclude<ExtArgs> | null
  /**
   * Filter, which WhyNows to fetch.
   */
  where?: Prisma.WhyNowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WhyNows to fetch.
   */
  orderBy?: Prisma.WhyNowOrderByWithRelationInput | Prisma.WhyNowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WhyNows.
   */
  cursor?: Prisma.WhyNowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WhyNows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WhyNows.
   */
  skip?: number
  distinct?: Prisma.WhyNowScalarFieldEnum | Prisma.WhyNowScalarFieldEnum[]
}

/**
 * WhyNow create
 */
export type WhyNowCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WhyNow
   */
  select?: Prisma.WhyNowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WhyNow
   */
  omit?: Prisma.WhyNowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WhyNowInclude<ExtArgs> | null
  /**
   * The data needed to create a WhyNow.
   */
  data: Prisma.XOR<Prisma.WhyNowCreateInput, Prisma.WhyNowUncheckedCreateInput>
}

/**
 * WhyNow createMany
 */
export type WhyNowCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WhyNows.
   */
  data: Prisma.WhyNowCreateManyInput | Prisma.WhyNowCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WhyNow createManyAndReturn
 */
export type WhyNowCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WhyNow
   */
  select?: Prisma.WhyNowSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WhyNow
   */
  omit?: Prisma.WhyNowOmit<ExtArgs> | null
  /**
   * The data used to create many WhyNows.
   */
  data: Prisma.WhyNowCreateManyInput | Prisma.WhyNowCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WhyNow update
 */
export type WhyNowUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WhyNow
   */
  select?: Prisma.WhyNowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WhyNow
   */
  omit?: Prisma.WhyNowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WhyNowInclude<ExtArgs> | null
  /**
   * The data needed to update a WhyNow.
   */
  data: Prisma.XOR<Prisma.WhyNowUpdateInput, Prisma.WhyNowUncheckedUpdateInput>
  /**
   * Choose, which WhyNow to update.
   */
  where: Prisma.WhyNowWhereUniqueInput
}

/**
 * WhyNow updateMany
 */
export type WhyNowUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WhyNows.
   */
  data: Prisma.XOR<Prisma.WhyNowUpdateManyMutationInput, Prisma.WhyNowUncheckedUpdateManyInput>
  /**
   * Filter which WhyNows to update
   */
  where?: Prisma.WhyNowWhereInput
  /**
   * Limit how many WhyNows to update.
   */
  limit?: number
}

/**
 * WhyNow updateManyAndReturn
 */
export type WhyNowUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WhyNow
   */
  select?: Prisma.WhyNowSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WhyNow
   */
  omit?: Prisma.WhyNowOmit<ExtArgs> | null
  /**
   * The data used to update WhyNows.
   */
  data: Prisma.XOR<Prisma.WhyNowUpdateManyMutationInput, Prisma.WhyNowUncheckedUpdateManyInput>
  /**
   * Filter which WhyNows to update
   */
  where?: Prisma.WhyNowWhereInput
  /**
   * Limit how many WhyNows to update.
   */
  limit?: number
}

/**
 * WhyNow upsert
 */
export type WhyNowUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WhyNow
   */
  select?: Prisma.WhyNowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WhyNow
   */
  omit?: Prisma.WhyNowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WhyNowInclude<ExtArgs> | null
  /**
   * The filter to search for the WhyNow to update in case it exists.
   */
  where: Prisma.WhyNowWhereUniqueInput
  /**
   * In case the WhyNow found by the `where` argument doesn't exist, create a new WhyNow with this data.
   */
  create: Prisma.XOR<Prisma.WhyNowCreateInput, Prisma.WhyNowUncheckedCreateInput>
  /**
   * In case the WhyNow was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WhyNowUpdateInput, Prisma.WhyNowUncheckedUpdateInput>
}

/**
 * WhyNow delete
 */
export type WhyNowDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WhyNow
   */
  select?: Prisma.WhyNowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WhyNow
   */
  omit?: Prisma.WhyNowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WhyNowInclude<ExtArgs> | null
  /**
   * Filter which WhyNow to delete.
   */
  where: Prisma.WhyNowWhereUniqueInput
}

/**
 * WhyNow deleteMany
 */
export type WhyNowDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WhyNows to delete
   */
  where?: Prisma.WhyNowWhereInput
  /**
   * Limit how many WhyNows to delete.
   */
  limit?: number
}

/**
 * WhyNow.dailyIdeas
 */
export type WhyNow$dailyIdeasArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DailyIdea
   */
  select?: Prisma.DailyIdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DailyIdea
   */
  omit?: Prisma.DailyIdeaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DailyIdeaInclude<ExtArgs> | null
  where?: Prisma.DailyIdeaWhereInput
  orderBy?: Prisma.DailyIdeaOrderByWithRelationInput | Prisma.DailyIdeaOrderByWithRelationInput[]
  cursor?: Prisma.DailyIdeaWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DailyIdeaScalarFieldEnum | Prisma.DailyIdeaScalarFieldEnum[]
}

/**
 * WhyNow without action
 */
export type WhyNowDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WhyNow
   */
  select?: Prisma.WhyNowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WhyNow
   */
  omit?: Prisma.WhyNowOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WhyNowInclude<ExtArgs> | null
}
