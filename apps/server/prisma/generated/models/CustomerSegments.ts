
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `CustomerSegments` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CustomerSegments
 * 
 */
export type CustomerSegmentsModel = runtime.Types.Result.DefaultSelection<Prisma.$CustomerSegmentsPayload>

export type AggregateCustomerSegments = {
  _count: CustomerSegmentsCountAggregateOutputType | null
  _min: CustomerSegmentsMinAggregateOutputType | null
  _max: CustomerSegmentsMaxAggregateOutputType | null
}

export type CustomerSegmentsMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  growthScale: $Enums.GrowthScale | null
  growthScaleJustification: string | null
  createdAt: Date | null
  updatedAt: Date | null
  marketOpportunityId: string | null
}

export type CustomerSegmentsMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  growthScale: $Enums.GrowthScale | null
  growthScaleJustification: string | null
  createdAt: Date | null
  updatedAt: Date | null
  marketOpportunityId: string | null
}

export type CustomerSegmentsCountAggregateOutputType = {
  id: number
  name: number
  description: number
  growthScale: number
  growthScaleJustification: number
  createdAt: number
  updatedAt: number
  marketOpportunityId: number
  _all: number
}


export type CustomerSegmentsMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  growthScale?: true
  growthScaleJustification?: true
  createdAt?: true
  updatedAt?: true
  marketOpportunityId?: true
}

export type CustomerSegmentsMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  growthScale?: true
  growthScaleJustification?: true
  createdAt?: true
  updatedAt?: true
  marketOpportunityId?: true
}

export type CustomerSegmentsCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  growthScale?: true
  growthScaleJustification?: true
  createdAt?: true
  updatedAt?: true
  marketOpportunityId?: true
  _all?: true
}

export type CustomerSegmentsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CustomerSegments to aggregate.
   */
  where?: Prisma.CustomerSegmentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CustomerSegments to fetch.
   */
  orderBy?: Prisma.CustomerSegmentsOrderByWithRelationInput | Prisma.CustomerSegmentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CustomerSegmentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CustomerSegments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CustomerSegments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CustomerSegments
  **/
  _count?: true | CustomerSegmentsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CustomerSegmentsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CustomerSegmentsMaxAggregateInputType
}

export type GetCustomerSegmentsAggregateType<T extends CustomerSegmentsAggregateArgs> = {
      [P in keyof T & keyof AggregateCustomerSegments]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCustomerSegments[P]>
    : Prisma.GetScalarType<T[P], AggregateCustomerSegments[P]>
}




export type CustomerSegmentsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CustomerSegmentsWhereInput
  orderBy?: Prisma.CustomerSegmentsOrderByWithAggregationInput | Prisma.CustomerSegmentsOrderByWithAggregationInput[]
  by: Prisma.CustomerSegmentsScalarFieldEnum[] | Prisma.CustomerSegmentsScalarFieldEnum
  having?: Prisma.CustomerSegmentsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CustomerSegmentsCountAggregateInputType | true
  _min?: CustomerSegmentsMinAggregateInputType
  _max?: CustomerSegmentsMaxAggregateInputType
}

export type CustomerSegmentsGroupByOutputType = {
  id: string
  name: string
  description: string
  growthScale: $Enums.GrowthScale
  growthScaleJustification: string
  createdAt: Date
  updatedAt: Date
  marketOpportunityId: string
  _count: CustomerSegmentsCountAggregateOutputType | null
  _min: CustomerSegmentsMinAggregateOutputType | null
  _max: CustomerSegmentsMaxAggregateOutputType | null
}

type GetCustomerSegmentsGroupByPayload<T extends CustomerSegmentsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CustomerSegmentsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CustomerSegmentsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CustomerSegmentsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CustomerSegmentsGroupByOutputType[P]>
      }
    >
  > 



export type CustomerSegmentsWhereInput = {
  AND?: Prisma.CustomerSegmentsWhereInput | Prisma.CustomerSegmentsWhereInput[]
  OR?: Prisma.CustomerSegmentsWhereInput[]
  NOT?: Prisma.CustomerSegmentsWhereInput | Prisma.CustomerSegmentsWhereInput[]
  id?: Prisma.StringFilter<"CustomerSegments"> | string
  name?: Prisma.StringFilter<"CustomerSegments"> | string
  description?: Prisma.StringFilter<"CustomerSegments"> | string
  growthScale?: Prisma.EnumGrowthScaleFilter<"CustomerSegments"> | $Enums.GrowthScale
  growthScaleJustification?: Prisma.StringFilter<"CustomerSegments"> | string
  createdAt?: Prisma.DateTimeFilter<"CustomerSegments"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CustomerSegments"> | Date | string
  marketOpportunityId?: Prisma.StringFilter<"CustomerSegments"> | string
  marketOpportunity?: Prisma.XOR<Prisma.MarketOpportunityScalarRelationFilter, Prisma.MarketOpportunityWhereInput>
}

export type CustomerSegmentsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  growthScale?: Prisma.SortOrder
  growthScaleJustification?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  marketOpportunityId?: Prisma.SortOrder
  marketOpportunity?: Prisma.MarketOpportunityOrderByWithRelationInput
}

export type CustomerSegmentsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CustomerSegmentsWhereInput | Prisma.CustomerSegmentsWhereInput[]
  OR?: Prisma.CustomerSegmentsWhereInput[]
  NOT?: Prisma.CustomerSegmentsWhereInput | Prisma.CustomerSegmentsWhereInput[]
  name?: Prisma.StringFilter<"CustomerSegments"> | string
  description?: Prisma.StringFilter<"CustomerSegments"> | string
  growthScale?: Prisma.EnumGrowthScaleFilter<"CustomerSegments"> | $Enums.GrowthScale
  growthScaleJustification?: Prisma.StringFilter<"CustomerSegments"> | string
  createdAt?: Prisma.DateTimeFilter<"CustomerSegments"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CustomerSegments"> | Date | string
  marketOpportunityId?: Prisma.StringFilter<"CustomerSegments"> | string
  marketOpportunity?: Prisma.XOR<Prisma.MarketOpportunityScalarRelationFilter, Prisma.MarketOpportunityWhereInput>
}, "id">

export type CustomerSegmentsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  growthScale?: Prisma.SortOrder
  growthScaleJustification?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  marketOpportunityId?: Prisma.SortOrder
  _count?: Prisma.CustomerSegmentsCountOrderByAggregateInput
  _max?: Prisma.CustomerSegmentsMaxOrderByAggregateInput
  _min?: Prisma.CustomerSegmentsMinOrderByAggregateInput
}

export type CustomerSegmentsScalarWhereWithAggregatesInput = {
  AND?: Prisma.CustomerSegmentsScalarWhereWithAggregatesInput | Prisma.CustomerSegmentsScalarWhereWithAggregatesInput[]
  OR?: Prisma.CustomerSegmentsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CustomerSegmentsScalarWhereWithAggregatesInput | Prisma.CustomerSegmentsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CustomerSegments"> | string
  name?: Prisma.StringWithAggregatesFilter<"CustomerSegments"> | string
  description?: Prisma.StringWithAggregatesFilter<"CustomerSegments"> | string
  growthScale?: Prisma.EnumGrowthScaleWithAggregatesFilter<"CustomerSegments"> | $Enums.GrowthScale
  growthScaleJustification?: Prisma.StringWithAggregatesFilter<"CustomerSegments"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"CustomerSegments"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"CustomerSegments"> | Date | string
  marketOpportunityId?: Prisma.StringWithAggregatesFilter<"CustomerSegments"> | string
}

export type CustomerSegmentsCreateInput = {
  id?: string
  name: string
  description: string
  growthScale: $Enums.GrowthScale
  growthScaleJustification: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketOpportunity: Prisma.MarketOpportunityCreateNestedOneWithoutCustomerSegmentsInput
}

export type CustomerSegmentsUncheckedCreateInput = {
  id?: string
  name: string
  description: string
  growthScale: $Enums.GrowthScale
  growthScaleJustification: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketOpportunityId: string
}

export type CustomerSegmentsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  growthScale?: Prisma.EnumGrowthScaleFieldUpdateOperationsInput | $Enums.GrowthScale
  growthScaleJustification?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketOpportunity?: Prisma.MarketOpportunityUpdateOneRequiredWithoutCustomerSegmentsNestedInput
}

export type CustomerSegmentsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  growthScale?: Prisma.EnumGrowthScaleFieldUpdateOperationsInput | $Enums.GrowthScale
  growthScaleJustification?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketOpportunityId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CustomerSegmentsCreateManyInput = {
  id?: string
  name: string
  description: string
  growthScale: $Enums.GrowthScale
  growthScaleJustification: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketOpportunityId: string
}

export type CustomerSegmentsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  growthScale?: Prisma.EnumGrowthScaleFieldUpdateOperationsInput | $Enums.GrowthScale
  growthScaleJustification?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CustomerSegmentsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  growthScale?: Prisma.EnumGrowthScaleFieldUpdateOperationsInput | $Enums.GrowthScale
  growthScaleJustification?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketOpportunityId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CustomerSegmentsListRelationFilter = {
  every?: Prisma.CustomerSegmentsWhereInput
  some?: Prisma.CustomerSegmentsWhereInput
  none?: Prisma.CustomerSegmentsWhereInput
}

export type CustomerSegmentsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CustomerSegmentsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  growthScale?: Prisma.SortOrder
  growthScaleJustification?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  marketOpportunityId?: Prisma.SortOrder
}

export type CustomerSegmentsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  growthScale?: Prisma.SortOrder
  growthScaleJustification?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  marketOpportunityId?: Prisma.SortOrder
}

export type CustomerSegmentsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  growthScale?: Prisma.SortOrder
  growthScaleJustification?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  marketOpportunityId?: Prisma.SortOrder
}

export type CustomerSegmentsCreateNestedManyWithoutMarketOpportunityInput = {
  create?: Prisma.XOR<Prisma.CustomerSegmentsCreateWithoutMarketOpportunityInput, Prisma.CustomerSegmentsUncheckedCreateWithoutMarketOpportunityInput> | Prisma.CustomerSegmentsCreateWithoutMarketOpportunityInput[] | Prisma.CustomerSegmentsUncheckedCreateWithoutMarketOpportunityInput[]
  connectOrCreate?: Prisma.CustomerSegmentsCreateOrConnectWithoutMarketOpportunityInput | Prisma.CustomerSegmentsCreateOrConnectWithoutMarketOpportunityInput[]
  createMany?: Prisma.CustomerSegmentsCreateManyMarketOpportunityInputEnvelope
  connect?: Prisma.CustomerSegmentsWhereUniqueInput | Prisma.CustomerSegmentsWhereUniqueInput[]
}

export type CustomerSegmentsUncheckedCreateNestedManyWithoutMarketOpportunityInput = {
  create?: Prisma.XOR<Prisma.CustomerSegmentsCreateWithoutMarketOpportunityInput, Prisma.CustomerSegmentsUncheckedCreateWithoutMarketOpportunityInput> | Prisma.CustomerSegmentsCreateWithoutMarketOpportunityInput[] | Prisma.CustomerSegmentsUncheckedCreateWithoutMarketOpportunityInput[]
  connectOrCreate?: Prisma.CustomerSegmentsCreateOrConnectWithoutMarketOpportunityInput | Prisma.CustomerSegmentsCreateOrConnectWithoutMarketOpportunityInput[]
  createMany?: Prisma.CustomerSegmentsCreateManyMarketOpportunityInputEnvelope
  connect?: Prisma.CustomerSegmentsWhereUniqueInput | Prisma.CustomerSegmentsWhereUniqueInput[]
}

export type CustomerSegmentsUpdateManyWithoutMarketOpportunityNestedInput = {
  create?: Prisma.XOR<Prisma.CustomerSegmentsCreateWithoutMarketOpportunityInput, Prisma.CustomerSegmentsUncheckedCreateWithoutMarketOpportunityInput> | Prisma.CustomerSegmentsCreateWithoutMarketOpportunityInput[] | Prisma.CustomerSegmentsUncheckedCreateWithoutMarketOpportunityInput[]
  connectOrCreate?: Prisma.CustomerSegmentsCreateOrConnectWithoutMarketOpportunityInput | Prisma.CustomerSegmentsCreateOrConnectWithoutMarketOpportunityInput[]
  upsert?: Prisma.CustomerSegmentsUpsertWithWhereUniqueWithoutMarketOpportunityInput | Prisma.CustomerSegmentsUpsertWithWhereUniqueWithoutMarketOpportunityInput[]
  createMany?: Prisma.CustomerSegmentsCreateManyMarketOpportunityInputEnvelope
  set?: Prisma.CustomerSegmentsWhereUniqueInput | Prisma.CustomerSegmentsWhereUniqueInput[]
  disconnect?: Prisma.CustomerSegmentsWhereUniqueInput | Prisma.CustomerSegmentsWhereUniqueInput[]
  delete?: Prisma.CustomerSegmentsWhereUniqueInput | Prisma.CustomerSegmentsWhereUniqueInput[]
  connect?: Prisma.CustomerSegmentsWhereUniqueInput | Prisma.CustomerSegmentsWhereUniqueInput[]
  update?: Prisma.CustomerSegmentsUpdateWithWhereUniqueWithoutMarketOpportunityInput | Prisma.CustomerSegmentsUpdateWithWhereUniqueWithoutMarketOpportunityInput[]
  updateMany?: Prisma.CustomerSegmentsUpdateManyWithWhereWithoutMarketOpportunityInput | Prisma.CustomerSegmentsUpdateManyWithWhereWithoutMarketOpportunityInput[]
  deleteMany?: Prisma.CustomerSegmentsScalarWhereInput | Prisma.CustomerSegmentsScalarWhereInput[]
}

export type CustomerSegmentsUncheckedUpdateManyWithoutMarketOpportunityNestedInput = {
  create?: Prisma.XOR<Prisma.CustomerSegmentsCreateWithoutMarketOpportunityInput, Prisma.CustomerSegmentsUncheckedCreateWithoutMarketOpportunityInput> | Prisma.CustomerSegmentsCreateWithoutMarketOpportunityInput[] | Prisma.CustomerSegmentsUncheckedCreateWithoutMarketOpportunityInput[]
  connectOrCreate?: Prisma.CustomerSegmentsCreateOrConnectWithoutMarketOpportunityInput | Prisma.CustomerSegmentsCreateOrConnectWithoutMarketOpportunityInput[]
  upsert?: Prisma.CustomerSegmentsUpsertWithWhereUniqueWithoutMarketOpportunityInput | Prisma.CustomerSegmentsUpsertWithWhereUniqueWithoutMarketOpportunityInput[]
  createMany?: Prisma.CustomerSegmentsCreateManyMarketOpportunityInputEnvelope
  set?: Prisma.CustomerSegmentsWhereUniqueInput | Prisma.CustomerSegmentsWhereUniqueInput[]
  disconnect?: Prisma.CustomerSegmentsWhereUniqueInput | Prisma.CustomerSegmentsWhereUniqueInput[]
  delete?: Prisma.CustomerSegmentsWhereUniqueInput | Prisma.CustomerSegmentsWhereUniqueInput[]
  connect?: Prisma.CustomerSegmentsWhereUniqueInput | Prisma.CustomerSegmentsWhereUniqueInput[]
  update?: Prisma.CustomerSegmentsUpdateWithWhereUniqueWithoutMarketOpportunityInput | Prisma.CustomerSegmentsUpdateWithWhereUniqueWithoutMarketOpportunityInput[]
  updateMany?: Prisma.CustomerSegmentsUpdateManyWithWhereWithoutMarketOpportunityInput | Prisma.CustomerSegmentsUpdateManyWithWhereWithoutMarketOpportunityInput[]
  deleteMany?: Prisma.CustomerSegmentsScalarWhereInput | Prisma.CustomerSegmentsScalarWhereInput[]
}

export type EnumGrowthScaleFieldUpdateOperationsInput = {
  set?: $Enums.GrowthScale
}

export type CustomerSegmentsCreateWithoutMarketOpportunityInput = {
  id?: string
  name: string
  description: string
  growthScale: $Enums.GrowthScale
  growthScaleJustification: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CustomerSegmentsUncheckedCreateWithoutMarketOpportunityInput = {
  id?: string
  name: string
  description: string
  growthScale: $Enums.GrowthScale
  growthScaleJustification: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CustomerSegmentsCreateOrConnectWithoutMarketOpportunityInput = {
  where: Prisma.CustomerSegmentsWhereUniqueInput
  create: Prisma.XOR<Prisma.CustomerSegmentsCreateWithoutMarketOpportunityInput, Prisma.CustomerSegmentsUncheckedCreateWithoutMarketOpportunityInput>
}

export type CustomerSegmentsCreateManyMarketOpportunityInputEnvelope = {
  data: Prisma.CustomerSegmentsCreateManyMarketOpportunityInput | Prisma.CustomerSegmentsCreateManyMarketOpportunityInput[]
  skipDuplicates?: boolean
}

export type CustomerSegmentsUpsertWithWhereUniqueWithoutMarketOpportunityInput = {
  where: Prisma.CustomerSegmentsWhereUniqueInput
  update: Prisma.XOR<Prisma.CustomerSegmentsUpdateWithoutMarketOpportunityInput, Prisma.CustomerSegmentsUncheckedUpdateWithoutMarketOpportunityInput>
  create: Prisma.XOR<Prisma.CustomerSegmentsCreateWithoutMarketOpportunityInput, Prisma.CustomerSegmentsUncheckedCreateWithoutMarketOpportunityInput>
}

export type CustomerSegmentsUpdateWithWhereUniqueWithoutMarketOpportunityInput = {
  where: Prisma.CustomerSegmentsWhereUniqueInput
  data: Prisma.XOR<Prisma.CustomerSegmentsUpdateWithoutMarketOpportunityInput, Prisma.CustomerSegmentsUncheckedUpdateWithoutMarketOpportunityInput>
}

export type CustomerSegmentsUpdateManyWithWhereWithoutMarketOpportunityInput = {
  where: Prisma.CustomerSegmentsScalarWhereInput
  data: Prisma.XOR<Prisma.CustomerSegmentsUpdateManyMutationInput, Prisma.CustomerSegmentsUncheckedUpdateManyWithoutMarketOpportunityInput>
}

export type CustomerSegmentsScalarWhereInput = {
  AND?: Prisma.CustomerSegmentsScalarWhereInput | Prisma.CustomerSegmentsScalarWhereInput[]
  OR?: Prisma.CustomerSegmentsScalarWhereInput[]
  NOT?: Prisma.CustomerSegmentsScalarWhereInput | Prisma.CustomerSegmentsScalarWhereInput[]
  id?: Prisma.StringFilter<"CustomerSegments"> | string
  name?: Prisma.StringFilter<"CustomerSegments"> | string
  description?: Prisma.StringFilter<"CustomerSegments"> | string
  growthScale?: Prisma.EnumGrowthScaleFilter<"CustomerSegments"> | $Enums.GrowthScale
  growthScaleJustification?: Prisma.StringFilter<"CustomerSegments"> | string
  createdAt?: Prisma.DateTimeFilter<"CustomerSegments"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CustomerSegments"> | Date | string
  marketOpportunityId?: Prisma.StringFilter<"CustomerSegments"> | string
}

export type CustomerSegmentsCreateManyMarketOpportunityInput = {
  id?: string
  name: string
  description: string
  growthScale: $Enums.GrowthScale
  growthScaleJustification: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CustomerSegmentsUpdateWithoutMarketOpportunityInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  growthScale?: Prisma.EnumGrowthScaleFieldUpdateOperationsInput | $Enums.GrowthScale
  growthScaleJustification?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CustomerSegmentsUncheckedUpdateWithoutMarketOpportunityInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  growthScale?: Prisma.EnumGrowthScaleFieldUpdateOperationsInput | $Enums.GrowthScale
  growthScaleJustification?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CustomerSegmentsUncheckedUpdateManyWithoutMarketOpportunityInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  growthScale?: Prisma.EnumGrowthScaleFieldUpdateOperationsInput | $Enums.GrowthScale
  growthScaleJustification?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CustomerSegmentsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  growthScale?: boolean
  growthScaleJustification?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  marketOpportunityId?: boolean
  marketOpportunity?: boolean | Prisma.MarketOpportunityDefaultArgs<ExtArgs>
}, ExtArgs["result"]["customerSegments"]>

export type CustomerSegmentsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  growthScale?: boolean
  growthScaleJustification?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  marketOpportunityId?: boolean
  marketOpportunity?: boolean | Prisma.MarketOpportunityDefaultArgs<ExtArgs>
}, ExtArgs["result"]["customerSegments"]>

export type CustomerSegmentsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  growthScale?: boolean
  growthScaleJustification?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  marketOpportunityId?: boolean
  marketOpportunity?: boolean | Prisma.MarketOpportunityDefaultArgs<ExtArgs>
}, ExtArgs["result"]["customerSegments"]>

export type CustomerSegmentsSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  growthScale?: boolean
  growthScaleJustification?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  marketOpportunityId?: boolean
}

export type CustomerSegmentsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "growthScale" | "growthScaleJustification" | "createdAt" | "updatedAt" | "marketOpportunityId", ExtArgs["result"]["customerSegments"]>
export type CustomerSegmentsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  marketOpportunity?: boolean | Prisma.MarketOpportunityDefaultArgs<ExtArgs>
}
export type CustomerSegmentsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  marketOpportunity?: boolean | Prisma.MarketOpportunityDefaultArgs<ExtArgs>
}
export type CustomerSegmentsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  marketOpportunity?: boolean | Prisma.MarketOpportunityDefaultArgs<ExtArgs>
}

export type $CustomerSegmentsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CustomerSegments"
  objects: {
    marketOpportunity: Prisma.$MarketOpportunityPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string
    growthScale: $Enums.GrowthScale
    growthScaleJustification: string
    createdAt: Date
    updatedAt: Date
    marketOpportunityId: string
  }, ExtArgs["result"]["customerSegments"]>
  composites: {}
}

export type CustomerSegmentsGetPayload<S extends boolean | null | undefined | CustomerSegmentsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CustomerSegmentsPayload, S>

export type CustomerSegmentsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CustomerSegmentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CustomerSegmentsCountAggregateInputType | true
  }

export interface CustomerSegmentsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerSegments'], meta: { name: 'CustomerSegments' } }
  /**
   * Find zero or one CustomerSegments that matches the filter.
   * @param {CustomerSegmentsFindUniqueArgs} args - Arguments to find a CustomerSegments
   * @example
   * // Get one CustomerSegments
   * const customerSegments = await prisma.customerSegments.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CustomerSegmentsFindUniqueArgs>(args: Prisma.SelectSubset<T, CustomerSegmentsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CustomerSegmentsClient<runtime.Types.Result.GetResult<Prisma.$CustomerSegmentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CustomerSegments that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CustomerSegmentsFindUniqueOrThrowArgs} args - Arguments to find a CustomerSegments
   * @example
   * // Get one CustomerSegments
   * const customerSegments = await prisma.customerSegments.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CustomerSegmentsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CustomerSegmentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CustomerSegmentsClient<runtime.Types.Result.GetResult<Prisma.$CustomerSegmentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CustomerSegments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerSegmentsFindFirstArgs} args - Arguments to find a CustomerSegments
   * @example
   * // Get one CustomerSegments
   * const customerSegments = await prisma.customerSegments.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CustomerSegmentsFindFirstArgs>(args?: Prisma.SelectSubset<T, CustomerSegmentsFindFirstArgs<ExtArgs>>): Prisma.Prisma__CustomerSegmentsClient<runtime.Types.Result.GetResult<Prisma.$CustomerSegmentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CustomerSegments that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerSegmentsFindFirstOrThrowArgs} args - Arguments to find a CustomerSegments
   * @example
   * // Get one CustomerSegments
   * const customerSegments = await prisma.customerSegments.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CustomerSegmentsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CustomerSegmentsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CustomerSegmentsClient<runtime.Types.Result.GetResult<Prisma.$CustomerSegmentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CustomerSegments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerSegmentsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CustomerSegments
   * const customerSegments = await prisma.customerSegments.findMany()
   * 
   * // Get first 10 CustomerSegments
   * const customerSegments = await prisma.customerSegments.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const customerSegmentsWithIdOnly = await prisma.customerSegments.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CustomerSegmentsFindManyArgs>(args?: Prisma.SelectSubset<T, CustomerSegmentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CustomerSegmentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CustomerSegments.
   * @param {CustomerSegmentsCreateArgs} args - Arguments to create a CustomerSegments.
   * @example
   * // Create one CustomerSegments
   * const CustomerSegments = await prisma.customerSegments.create({
   *   data: {
   *     // ... data to create a CustomerSegments
   *   }
   * })
   * 
   */
  create<T extends CustomerSegmentsCreateArgs>(args: Prisma.SelectSubset<T, CustomerSegmentsCreateArgs<ExtArgs>>): Prisma.Prisma__CustomerSegmentsClient<runtime.Types.Result.GetResult<Prisma.$CustomerSegmentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CustomerSegments.
   * @param {CustomerSegmentsCreateManyArgs} args - Arguments to create many CustomerSegments.
   * @example
   * // Create many CustomerSegments
   * const customerSegments = await prisma.customerSegments.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CustomerSegmentsCreateManyArgs>(args?: Prisma.SelectSubset<T, CustomerSegmentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CustomerSegments and returns the data saved in the database.
   * @param {CustomerSegmentsCreateManyAndReturnArgs} args - Arguments to create many CustomerSegments.
   * @example
   * // Create many CustomerSegments
   * const customerSegments = await prisma.customerSegments.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CustomerSegments and only return the `id`
   * const customerSegmentsWithIdOnly = await prisma.customerSegments.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CustomerSegmentsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CustomerSegmentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CustomerSegmentsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CustomerSegments.
   * @param {CustomerSegmentsDeleteArgs} args - Arguments to delete one CustomerSegments.
   * @example
   * // Delete one CustomerSegments
   * const CustomerSegments = await prisma.customerSegments.delete({
   *   where: {
   *     // ... filter to delete one CustomerSegments
   *   }
   * })
   * 
   */
  delete<T extends CustomerSegmentsDeleteArgs>(args: Prisma.SelectSubset<T, CustomerSegmentsDeleteArgs<ExtArgs>>): Prisma.Prisma__CustomerSegmentsClient<runtime.Types.Result.GetResult<Prisma.$CustomerSegmentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CustomerSegments.
   * @param {CustomerSegmentsUpdateArgs} args - Arguments to update one CustomerSegments.
   * @example
   * // Update one CustomerSegments
   * const customerSegments = await prisma.customerSegments.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CustomerSegmentsUpdateArgs>(args: Prisma.SelectSubset<T, CustomerSegmentsUpdateArgs<ExtArgs>>): Prisma.Prisma__CustomerSegmentsClient<runtime.Types.Result.GetResult<Prisma.$CustomerSegmentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CustomerSegments.
   * @param {CustomerSegmentsDeleteManyArgs} args - Arguments to filter CustomerSegments to delete.
   * @example
   * // Delete a few CustomerSegments
   * const { count } = await prisma.customerSegments.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CustomerSegmentsDeleteManyArgs>(args?: Prisma.SelectSubset<T, CustomerSegmentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CustomerSegments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerSegmentsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CustomerSegments
   * const customerSegments = await prisma.customerSegments.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CustomerSegmentsUpdateManyArgs>(args: Prisma.SelectSubset<T, CustomerSegmentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CustomerSegments and returns the data updated in the database.
   * @param {CustomerSegmentsUpdateManyAndReturnArgs} args - Arguments to update many CustomerSegments.
   * @example
   * // Update many CustomerSegments
   * const customerSegments = await prisma.customerSegments.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CustomerSegments and only return the `id`
   * const customerSegmentsWithIdOnly = await prisma.customerSegments.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CustomerSegmentsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CustomerSegmentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CustomerSegmentsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CustomerSegments.
   * @param {CustomerSegmentsUpsertArgs} args - Arguments to update or create a CustomerSegments.
   * @example
   * // Update or create a CustomerSegments
   * const customerSegments = await prisma.customerSegments.upsert({
   *   create: {
   *     // ... data to create a CustomerSegments
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CustomerSegments we want to update
   *   }
   * })
   */
  upsert<T extends CustomerSegmentsUpsertArgs>(args: Prisma.SelectSubset<T, CustomerSegmentsUpsertArgs<ExtArgs>>): Prisma.Prisma__CustomerSegmentsClient<runtime.Types.Result.GetResult<Prisma.$CustomerSegmentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CustomerSegments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerSegmentsCountArgs} args - Arguments to filter CustomerSegments to count.
   * @example
   * // Count the number of CustomerSegments
   * const count = await prisma.customerSegments.count({
   *   where: {
   *     // ... the filter for the CustomerSegments we want to count
   *   }
   * })
  **/
  count<T extends CustomerSegmentsCountArgs>(
    args?: Prisma.Subset<T, CustomerSegmentsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CustomerSegmentsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CustomerSegments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerSegmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CustomerSegmentsAggregateArgs>(args: Prisma.Subset<T, CustomerSegmentsAggregateArgs>): Prisma.PrismaPromise<GetCustomerSegmentsAggregateType<T>>

  /**
   * Group by CustomerSegments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerSegmentsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CustomerSegmentsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CustomerSegmentsGroupByArgs['orderBy'] }
      : { orderBy?: CustomerSegmentsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CustomerSegmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerSegmentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CustomerSegments model
 */
readonly fields: CustomerSegmentsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CustomerSegments.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CustomerSegmentsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  marketOpportunity<T extends Prisma.MarketOpportunityDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MarketOpportunityDefaultArgs<ExtArgs>>): Prisma.Prisma__MarketOpportunityClient<runtime.Types.Result.GetResult<Prisma.$MarketOpportunityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CustomerSegments model
 */
export interface CustomerSegmentsFieldRefs {
  readonly id: Prisma.FieldRef<"CustomerSegments", 'String'>
  readonly name: Prisma.FieldRef<"CustomerSegments", 'String'>
  readonly description: Prisma.FieldRef<"CustomerSegments", 'String'>
  readonly growthScale: Prisma.FieldRef<"CustomerSegments", 'GrowthScale'>
  readonly growthScaleJustification: Prisma.FieldRef<"CustomerSegments", 'String'>
  readonly createdAt: Prisma.FieldRef<"CustomerSegments", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"CustomerSegments", 'DateTime'>
  readonly marketOpportunityId: Prisma.FieldRef<"CustomerSegments", 'String'>
}
    

// Custom InputTypes
/**
 * CustomerSegments findUnique
 */
export type CustomerSegmentsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerSegments
   */
  select?: Prisma.CustomerSegmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerSegments
   */
  omit?: Prisma.CustomerSegmentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerSegmentsInclude<ExtArgs> | null
  /**
   * Filter, which CustomerSegments to fetch.
   */
  where: Prisma.CustomerSegmentsWhereUniqueInput
}

/**
 * CustomerSegments findUniqueOrThrow
 */
export type CustomerSegmentsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerSegments
   */
  select?: Prisma.CustomerSegmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerSegments
   */
  omit?: Prisma.CustomerSegmentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerSegmentsInclude<ExtArgs> | null
  /**
   * Filter, which CustomerSegments to fetch.
   */
  where: Prisma.CustomerSegmentsWhereUniqueInput
}

/**
 * CustomerSegments findFirst
 */
export type CustomerSegmentsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerSegments
   */
  select?: Prisma.CustomerSegmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerSegments
   */
  omit?: Prisma.CustomerSegmentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerSegmentsInclude<ExtArgs> | null
  /**
   * Filter, which CustomerSegments to fetch.
   */
  where?: Prisma.CustomerSegmentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CustomerSegments to fetch.
   */
  orderBy?: Prisma.CustomerSegmentsOrderByWithRelationInput | Prisma.CustomerSegmentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CustomerSegments.
   */
  cursor?: Prisma.CustomerSegmentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CustomerSegments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CustomerSegments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CustomerSegments.
   */
  distinct?: Prisma.CustomerSegmentsScalarFieldEnum | Prisma.CustomerSegmentsScalarFieldEnum[]
}

/**
 * CustomerSegments findFirstOrThrow
 */
export type CustomerSegmentsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerSegments
   */
  select?: Prisma.CustomerSegmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerSegments
   */
  omit?: Prisma.CustomerSegmentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerSegmentsInclude<ExtArgs> | null
  /**
   * Filter, which CustomerSegments to fetch.
   */
  where?: Prisma.CustomerSegmentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CustomerSegments to fetch.
   */
  orderBy?: Prisma.CustomerSegmentsOrderByWithRelationInput | Prisma.CustomerSegmentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CustomerSegments.
   */
  cursor?: Prisma.CustomerSegmentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CustomerSegments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CustomerSegments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CustomerSegments.
   */
  distinct?: Prisma.CustomerSegmentsScalarFieldEnum | Prisma.CustomerSegmentsScalarFieldEnum[]
}

/**
 * CustomerSegments findMany
 */
export type CustomerSegmentsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerSegments
   */
  select?: Prisma.CustomerSegmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerSegments
   */
  omit?: Prisma.CustomerSegmentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerSegmentsInclude<ExtArgs> | null
  /**
   * Filter, which CustomerSegments to fetch.
   */
  where?: Prisma.CustomerSegmentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CustomerSegments to fetch.
   */
  orderBy?: Prisma.CustomerSegmentsOrderByWithRelationInput | Prisma.CustomerSegmentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CustomerSegments.
   */
  cursor?: Prisma.CustomerSegmentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CustomerSegments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CustomerSegments.
   */
  skip?: number
  distinct?: Prisma.CustomerSegmentsScalarFieldEnum | Prisma.CustomerSegmentsScalarFieldEnum[]
}

/**
 * CustomerSegments create
 */
export type CustomerSegmentsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerSegments
   */
  select?: Prisma.CustomerSegmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerSegments
   */
  omit?: Prisma.CustomerSegmentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerSegmentsInclude<ExtArgs> | null
  /**
   * The data needed to create a CustomerSegments.
   */
  data: Prisma.XOR<Prisma.CustomerSegmentsCreateInput, Prisma.CustomerSegmentsUncheckedCreateInput>
}

/**
 * CustomerSegments createMany
 */
export type CustomerSegmentsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CustomerSegments.
   */
  data: Prisma.CustomerSegmentsCreateManyInput | Prisma.CustomerSegmentsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CustomerSegments createManyAndReturn
 */
export type CustomerSegmentsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerSegments
   */
  select?: Prisma.CustomerSegmentsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerSegments
   */
  omit?: Prisma.CustomerSegmentsOmit<ExtArgs> | null
  /**
   * The data used to create many CustomerSegments.
   */
  data: Prisma.CustomerSegmentsCreateManyInput | Prisma.CustomerSegmentsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerSegmentsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CustomerSegments update
 */
export type CustomerSegmentsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerSegments
   */
  select?: Prisma.CustomerSegmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerSegments
   */
  omit?: Prisma.CustomerSegmentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerSegmentsInclude<ExtArgs> | null
  /**
   * The data needed to update a CustomerSegments.
   */
  data: Prisma.XOR<Prisma.CustomerSegmentsUpdateInput, Prisma.CustomerSegmentsUncheckedUpdateInput>
  /**
   * Choose, which CustomerSegments to update.
   */
  where: Prisma.CustomerSegmentsWhereUniqueInput
}

/**
 * CustomerSegments updateMany
 */
export type CustomerSegmentsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CustomerSegments.
   */
  data: Prisma.XOR<Prisma.CustomerSegmentsUpdateManyMutationInput, Prisma.CustomerSegmentsUncheckedUpdateManyInput>
  /**
   * Filter which CustomerSegments to update
   */
  where?: Prisma.CustomerSegmentsWhereInput
  /**
   * Limit how many CustomerSegments to update.
   */
  limit?: number
}

/**
 * CustomerSegments updateManyAndReturn
 */
export type CustomerSegmentsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerSegments
   */
  select?: Prisma.CustomerSegmentsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerSegments
   */
  omit?: Prisma.CustomerSegmentsOmit<ExtArgs> | null
  /**
   * The data used to update CustomerSegments.
   */
  data: Prisma.XOR<Prisma.CustomerSegmentsUpdateManyMutationInput, Prisma.CustomerSegmentsUncheckedUpdateManyInput>
  /**
   * Filter which CustomerSegments to update
   */
  where?: Prisma.CustomerSegmentsWhereInput
  /**
   * Limit how many CustomerSegments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerSegmentsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CustomerSegments upsert
 */
export type CustomerSegmentsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerSegments
   */
  select?: Prisma.CustomerSegmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerSegments
   */
  omit?: Prisma.CustomerSegmentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerSegmentsInclude<ExtArgs> | null
  /**
   * The filter to search for the CustomerSegments to update in case it exists.
   */
  where: Prisma.CustomerSegmentsWhereUniqueInput
  /**
   * In case the CustomerSegments found by the `where` argument doesn't exist, create a new CustomerSegments with this data.
   */
  create: Prisma.XOR<Prisma.CustomerSegmentsCreateInput, Prisma.CustomerSegmentsUncheckedCreateInput>
  /**
   * In case the CustomerSegments was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CustomerSegmentsUpdateInput, Prisma.CustomerSegmentsUncheckedUpdateInput>
}

/**
 * CustomerSegments delete
 */
export type CustomerSegmentsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerSegments
   */
  select?: Prisma.CustomerSegmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerSegments
   */
  omit?: Prisma.CustomerSegmentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerSegmentsInclude<ExtArgs> | null
  /**
   * Filter which CustomerSegments to delete.
   */
  where: Prisma.CustomerSegmentsWhereUniqueInput
}

/**
 * CustomerSegments deleteMany
 */
export type CustomerSegmentsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CustomerSegments to delete
   */
  where?: Prisma.CustomerSegmentsWhereInput
  /**
   * Limit how many CustomerSegments to delete.
   */
  limit?: number
}

/**
 * CustomerSegments without action
 */
export type CustomerSegmentsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerSegments
   */
  select?: Prisma.CustomerSegmentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerSegments
   */
  omit?: Prisma.CustomerSegmentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerSegmentsInclude<ExtArgs> | null
}
