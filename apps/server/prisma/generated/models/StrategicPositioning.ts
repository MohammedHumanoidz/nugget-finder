
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `StrategicPositioning` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model StrategicPositioning
 * 
 */
export type StrategicPositioningModel = runtime.Types.Result.DefaultSelection<Prisma.$StrategicPositioningPayload>

export type AggregateStrategicPositioning = {
  _count: StrategicPositioningCountAggregateOutputType | null
  _min: StrategicPositioningMinAggregateOutputType | null
  _max: StrategicPositioningMaxAggregateOutputType | null
}

export type StrategicPositioningMinAggregateOutputType = {
  id: string | null
  name: string | null
  targetSegment: string | null
  valueProposition: string | null
  createdAt: Date | null
  updatedAt: Date | null
  dailyIdeaId: string | null
}

export type StrategicPositioningMaxAggregateOutputType = {
  id: string | null
  name: string | null
  targetSegment: string | null
  valueProposition: string | null
  createdAt: Date | null
  updatedAt: Date | null
  dailyIdeaId: string | null
}

export type StrategicPositioningCountAggregateOutputType = {
  id: number
  name: number
  targetSegment: number
  valueProposition: number
  keyDifferentiators: number
  createdAt: number
  updatedAt: number
  dailyIdeaId: number
  _all: number
}


export type StrategicPositioningMinAggregateInputType = {
  id?: true
  name?: true
  targetSegment?: true
  valueProposition?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
}

export type StrategicPositioningMaxAggregateInputType = {
  id?: true
  name?: true
  targetSegment?: true
  valueProposition?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
}

export type StrategicPositioningCountAggregateInputType = {
  id?: true
  name?: true
  targetSegment?: true
  valueProposition?: true
  keyDifferentiators?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
  _all?: true
}

export type StrategicPositioningAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StrategicPositioning to aggregate.
   */
  where?: Prisma.StrategicPositioningWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StrategicPositionings to fetch.
   */
  orderBy?: Prisma.StrategicPositioningOrderByWithRelationInput | Prisma.StrategicPositioningOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StrategicPositioningWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StrategicPositionings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StrategicPositionings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned StrategicPositionings
  **/
  _count?: true | StrategicPositioningCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StrategicPositioningMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StrategicPositioningMaxAggregateInputType
}

export type GetStrategicPositioningAggregateType<T extends StrategicPositioningAggregateArgs> = {
      [P in keyof T & keyof AggregateStrategicPositioning]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStrategicPositioning[P]>
    : Prisma.GetScalarType<T[P], AggregateStrategicPositioning[P]>
}




export type StrategicPositioningGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StrategicPositioningWhereInput
  orderBy?: Prisma.StrategicPositioningOrderByWithAggregationInput | Prisma.StrategicPositioningOrderByWithAggregationInput[]
  by: Prisma.StrategicPositioningScalarFieldEnum[] | Prisma.StrategicPositioningScalarFieldEnum
  having?: Prisma.StrategicPositioningScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StrategicPositioningCountAggregateInputType | true
  _min?: StrategicPositioningMinAggregateInputType
  _max?: StrategicPositioningMaxAggregateInputType
}

export type StrategicPositioningGroupByOutputType = {
  id: string
  name: string
  targetSegment: string
  valueProposition: string
  keyDifferentiators: string[]
  createdAt: Date
  updatedAt: Date
  dailyIdeaId: string
  _count: StrategicPositioningCountAggregateOutputType | null
  _min: StrategicPositioningMinAggregateOutputType | null
  _max: StrategicPositioningMaxAggregateOutputType | null
}

type GetStrategicPositioningGroupByPayload<T extends StrategicPositioningGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StrategicPositioningGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StrategicPositioningGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StrategicPositioningGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StrategicPositioningGroupByOutputType[P]>
      }
    >
  > 



export type StrategicPositioningWhereInput = {
  AND?: Prisma.StrategicPositioningWhereInput | Prisma.StrategicPositioningWhereInput[]
  OR?: Prisma.StrategicPositioningWhereInput[]
  NOT?: Prisma.StrategicPositioningWhereInput | Prisma.StrategicPositioningWhereInput[]
  id?: Prisma.StringFilter<"StrategicPositioning"> | string
  name?: Prisma.StringFilter<"StrategicPositioning"> | string
  targetSegment?: Prisma.StringFilter<"StrategicPositioning"> | string
  valueProposition?: Prisma.StringFilter<"StrategicPositioning"> | string
  keyDifferentiators?: Prisma.StringNullableListFilter<"StrategicPositioning">
  createdAt?: Prisma.DateTimeFilter<"StrategicPositioning"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"StrategicPositioning"> | Date | string
  dailyIdeaId?: Prisma.StringFilter<"StrategicPositioning"> | string
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaScalarRelationFilter, Prisma.DailyIdeaWhereInput>
}

export type StrategicPositioningOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  targetSegment?: Prisma.SortOrder
  valueProposition?: Prisma.SortOrder
  keyDifferentiators?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
  dailyIdea?: Prisma.DailyIdeaOrderByWithRelationInput
}

export type StrategicPositioningWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  dailyIdeaId?: string
  AND?: Prisma.StrategicPositioningWhereInput | Prisma.StrategicPositioningWhereInput[]
  OR?: Prisma.StrategicPositioningWhereInput[]
  NOT?: Prisma.StrategicPositioningWhereInput | Prisma.StrategicPositioningWhereInput[]
  name?: Prisma.StringFilter<"StrategicPositioning"> | string
  targetSegment?: Prisma.StringFilter<"StrategicPositioning"> | string
  valueProposition?: Prisma.StringFilter<"StrategicPositioning"> | string
  keyDifferentiators?: Prisma.StringNullableListFilter<"StrategicPositioning">
  createdAt?: Prisma.DateTimeFilter<"StrategicPositioning"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"StrategicPositioning"> | Date | string
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaScalarRelationFilter, Prisma.DailyIdeaWhereInput>
}, "id" | "dailyIdeaId">

export type StrategicPositioningOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  targetSegment?: Prisma.SortOrder
  valueProposition?: Prisma.SortOrder
  keyDifferentiators?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
  _count?: Prisma.StrategicPositioningCountOrderByAggregateInput
  _max?: Prisma.StrategicPositioningMaxOrderByAggregateInput
  _min?: Prisma.StrategicPositioningMinOrderByAggregateInput
}

export type StrategicPositioningScalarWhereWithAggregatesInput = {
  AND?: Prisma.StrategicPositioningScalarWhereWithAggregatesInput | Prisma.StrategicPositioningScalarWhereWithAggregatesInput[]
  OR?: Prisma.StrategicPositioningScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StrategicPositioningScalarWhereWithAggregatesInput | Prisma.StrategicPositioningScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"StrategicPositioning"> | string
  name?: Prisma.StringWithAggregatesFilter<"StrategicPositioning"> | string
  targetSegment?: Prisma.StringWithAggregatesFilter<"StrategicPositioning"> | string
  valueProposition?: Prisma.StringWithAggregatesFilter<"StrategicPositioning"> | string
  keyDifferentiators?: Prisma.StringNullableListFilter<"StrategicPositioning">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"StrategicPositioning"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"StrategicPositioning"> | Date | string
  dailyIdeaId?: Prisma.StringWithAggregatesFilter<"StrategicPositioning"> | string
}

export type StrategicPositioningCreateInput = {
  id?: string
  name: string
  targetSegment: string
  valueProposition: string
  keyDifferentiators?: Prisma.StrategicPositioningCreatekeyDifferentiatorsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdea: Prisma.DailyIdeaCreateNestedOneWithoutStrategicPositioningInput
}

export type StrategicPositioningUncheckedCreateInput = {
  id?: string
  name: string
  targetSegment: string
  valueProposition: string
  keyDifferentiators?: Prisma.StrategicPositioningCreatekeyDifferentiatorsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdeaId: string
}

export type StrategicPositioningUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  targetSegment?: Prisma.StringFieldUpdateOperationsInput | string
  valueProposition?: Prisma.StringFieldUpdateOperationsInput | string
  keyDifferentiators?: Prisma.StrategicPositioningUpdatekeyDifferentiatorsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdea?: Prisma.DailyIdeaUpdateOneRequiredWithoutStrategicPositioningNestedInput
}

export type StrategicPositioningUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  targetSegment?: Prisma.StringFieldUpdateOperationsInput | string
  valueProposition?: Prisma.StringFieldUpdateOperationsInput | string
  keyDifferentiators?: Prisma.StrategicPositioningUpdatekeyDifferentiatorsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdeaId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StrategicPositioningCreateManyInput = {
  id?: string
  name: string
  targetSegment: string
  valueProposition: string
  keyDifferentiators?: Prisma.StrategicPositioningCreatekeyDifferentiatorsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdeaId: string
}

export type StrategicPositioningUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  targetSegment?: Prisma.StringFieldUpdateOperationsInput | string
  valueProposition?: Prisma.StringFieldUpdateOperationsInput | string
  keyDifferentiators?: Prisma.StrategicPositioningUpdatekeyDifferentiatorsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StrategicPositioningUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  targetSegment?: Prisma.StringFieldUpdateOperationsInput | string
  valueProposition?: Prisma.StringFieldUpdateOperationsInput | string
  keyDifferentiators?: Prisma.StrategicPositioningUpdatekeyDifferentiatorsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdeaId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StrategicPositioningCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  targetSegment?: Prisma.SortOrder
  valueProposition?: Prisma.SortOrder
  keyDifferentiators?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type StrategicPositioningMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  targetSegment?: Prisma.SortOrder
  valueProposition?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type StrategicPositioningMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  targetSegment?: Prisma.SortOrder
  valueProposition?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type StrategicPositioningNullableScalarRelationFilter = {
  is?: Prisma.StrategicPositioningWhereInput | null
  isNot?: Prisma.StrategicPositioningWhereInput | null
}

export type StrategicPositioningCreatekeyDifferentiatorsInput = {
  set: string[]
}

export type StrategicPositioningUpdatekeyDifferentiatorsInput = {
  set?: string[]
  push?: string | string[]
}

export type StrategicPositioningCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.StrategicPositioningCreateWithoutDailyIdeaInput, Prisma.StrategicPositioningUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.StrategicPositioningCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.StrategicPositioningWhereUniqueInput
}

export type StrategicPositioningUncheckedCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.StrategicPositioningCreateWithoutDailyIdeaInput, Prisma.StrategicPositioningUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.StrategicPositioningCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.StrategicPositioningWhereUniqueInput
}

export type StrategicPositioningUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.StrategicPositioningCreateWithoutDailyIdeaInput, Prisma.StrategicPositioningUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.StrategicPositioningCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.StrategicPositioningUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.StrategicPositioningWhereInput | boolean
  delete?: Prisma.StrategicPositioningWhereInput | boolean
  connect?: Prisma.StrategicPositioningWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.StrategicPositioningUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.StrategicPositioningUpdateWithoutDailyIdeaInput>, Prisma.StrategicPositioningUncheckedUpdateWithoutDailyIdeaInput>
}

export type StrategicPositioningUncheckedUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.StrategicPositioningCreateWithoutDailyIdeaInput, Prisma.StrategicPositioningUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.StrategicPositioningCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.StrategicPositioningUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.StrategicPositioningWhereInput | boolean
  delete?: Prisma.StrategicPositioningWhereInput | boolean
  connect?: Prisma.StrategicPositioningWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.StrategicPositioningUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.StrategicPositioningUpdateWithoutDailyIdeaInput>, Prisma.StrategicPositioningUncheckedUpdateWithoutDailyIdeaInput>
}

export type StrategicPositioningCreateWithoutDailyIdeaInput = {
  id?: string
  name: string
  targetSegment: string
  valueProposition: string
  keyDifferentiators?: Prisma.StrategicPositioningCreatekeyDifferentiatorsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type StrategicPositioningUncheckedCreateWithoutDailyIdeaInput = {
  id?: string
  name: string
  targetSegment: string
  valueProposition: string
  keyDifferentiators?: Prisma.StrategicPositioningCreatekeyDifferentiatorsInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type StrategicPositioningCreateOrConnectWithoutDailyIdeaInput = {
  where: Prisma.StrategicPositioningWhereUniqueInput
  create: Prisma.XOR<Prisma.StrategicPositioningCreateWithoutDailyIdeaInput, Prisma.StrategicPositioningUncheckedCreateWithoutDailyIdeaInput>
}

export type StrategicPositioningUpsertWithoutDailyIdeaInput = {
  update: Prisma.XOR<Prisma.StrategicPositioningUpdateWithoutDailyIdeaInput, Prisma.StrategicPositioningUncheckedUpdateWithoutDailyIdeaInput>
  create: Prisma.XOR<Prisma.StrategicPositioningCreateWithoutDailyIdeaInput, Prisma.StrategicPositioningUncheckedCreateWithoutDailyIdeaInput>
  where?: Prisma.StrategicPositioningWhereInput
}

export type StrategicPositioningUpdateToOneWithWhereWithoutDailyIdeaInput = {
  where?: Prisma.StrategicPositioningWhereInput
  data: Prisma.XOR<Prisma.StrategicPositioningUpdateWithoutDailyIdeaInput, Prisma.StrategicPositioningUncheckedUpdateWithoutDailyIdeaInput>
}

export type StrategicPositioningUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  targetSegment?: Prisma.StringFieldUpdateOperationsInput | string
  valueProposition?: Prisma.StringFieldUpdateOperationsInput | string
  keyDifferentiators?: Prisma.StrategicPositioningUpdatekeyDifferentiatorsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StrategicPositioningUncheckedUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  targetSegment?: Prisma.StringFieldUpdateOperationsInput | string
  valueProposition?: Prisma.StringFieldUpdateOperationsInput | string
  keyDifferentiators?: Prisma.StrategicPositioningUpdatekeyDifferentiatorsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type StrategicPositioningSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  targetSegment?: boolean
  valueProposition?: boolean
  keyDifferentiators?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["strategicPositioning"]>

export type StrategicPositioningSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  targetSegment?: boolean
  valueProposition?: boolean
  keyDifferentiators?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["strategicPositioning"]>

export type StrategicPositioningSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  targetSegment?: boolean
  valueProposition?: boolean
  keyDifferentiators?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["strategicPositioning"]>

export type StrategicPositioningSelectScalar = {
  id?: boolean
  name?: boolean
  targetSegment?: boolean
  valueProposition?: boolean
  keyDifferentiators?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
}

export type StrategicPositioningOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "targetSegment" | "valueProposition" | "keyDifferentiators" | "createdAt" | "updatedAt" | "dailyIdeaId", ExtArgs["result"]["strategicPositioning"]>
export type StrategicPositioningInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}
export type StrategicPositioningIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}
export type StrategicPositioningIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}

export type $StrategicPositioningPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "StrategicPositioning"
  objects: {
    dailyIdea: Prisma.$DailyIdeaPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    targetSegment: string
    valueProposition: string
    keyDifferentiators: string[]
    createdAt: Date
    updatedAt: Date
    dailyIdeaId: string
  }, ExtArgs["result"]["strategicPositioning"]>
  composites: {}
}

export type StrategicPositioningGetPayload<S extends boolean | null | undefined | StrategicPositioningDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StrategicPositioningPayload, S>

export type StrategicPositioningCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StrategicPositioningFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StrategicPositioningCountAggregateInputType | true
  }

export interface StrategicPositioningDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StrategicPositioning'], meta: { name: 'StrategicPositioning' } }
  /**
   * Find zero or one StrategicPositioning that matches the filter.
   * @param {StrategicPositioningFindUniqueArgs} args - Arguments to find a StrategicPositioning
   * @example
   * // Get one StrategicPositioning
   * const strategicPositioning = await prisma.strategicPositioning.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StrategicPositioningFindUniqueArgs>(args: Prisma.SelectSubset<T, StrategicPositioningFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StrategicPositioningClient<runtime.Types.Result.GetResult<Prisma.$StrategicPositioningPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one StrategicPositioning that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StrategicPositioningFindUniqueOrThrowArgs} args - Arguments to find a StrategicPositioning
   * @example
   * // Get one StrategicPositioning
   * const strategicPositioning = await prisma.strategicPositioning.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StrategicPositioningFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StrategicPositioningFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StrategicPositioningClient<runtime.Types.Result.GetResult<Prisma.$StrategicPositioningPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StrategicPositioning that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StrategicPositioningFindFirstArgs} args - Arguments to find a StrategicPositioning
   * @example
   * // Get one StrategicPositioning
   * const strategicPositioning = await prisma.strategicPositioning.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StrategicPositioningFindFirstArgs>(args?: Prisma.SelectSubset<T, StrategicPositioningFindFirstArgs<ExtArgs>>): Prisma.Prisma__StrategicPositioningClient<runtime.Types.Result.GetResult<Prisma.$StrategicPositioningPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StrategicPositioning that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StrategicPositioningFindFirstOrThrowArgs} args - Arguments to find a StrategicPositioning
   * @example
   * // Get one StrategicPositioning
   * const strategicPositioning = await prisma.strategicPositioning.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StrategicPositioningFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StrategicPositioningFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StrategicPositioningClient<runtime.Types.Result.GetResult<Prisma.$StrategicPositioningPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StrategicPositionings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StrategicPositioningFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StrategicPositionings
   * const strategicPositionings = await prisma.strategicPositioning.findMany()
   * 
   * // Get first 10 StrategicPositionings
   * const strategicPositionings = await prisma.strategicPositioning.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const strategicPositioningWithIdOnly = await prisma.strategicPositioning.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends StrategicPositioningFindManyArgs>(args?: Prisma.SelectSubset<T, StrategicPositioningFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StrategicPositioningPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a StrategicPositioning.
   * @param {StrategicPositioningCreateArgs} args - Arguments to create a StrategicPositioning.
   * @example
   * // Create one StrategicPositioning
   * const StrategicPositioning = await prisma.strategicPositioning.create({
   *   data: {
   *     // ... data to create a StrategicPositioning
   *   }
   * })
   * 
   */
  create<T extends StrategicPositioningCreateArgs>(args: Prisma.SelectSubset<T, StrategicPositioningCreateArgs<ExtArgs>>): Prisma.Prisma__StrategicPositioningClient<runtime.Types.Result.GetResult<Prisma.$StrategicPositioningPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many StrategicPositionings.
   * @param {StrategicPositioningCreateManyArgs} args - Arguments to create many StrategicPositionings.
   * @example
   * // Create many StrategicPositionings
   * const strategicPositioning = await prisma.strategicPositioning.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StrategicPositioningCreateManyArgs>(args?: Prisma.SelectSubset<T, StrategicPositioningCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many StrategicPositionings and returns the data saved in the database.
   * @param {StrategicPositioningCreateManyAndReturnArgs} args - Arguments to create many StrategicPositionings.
   * @example
   * // Create many StrategicPositionings
   * const strategicPositioning = await prisma.strategicPositioning.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many StrategicPositionings and only return the `id`
   * const strategicPositioningWithIdOnly = await prisma.strategicPositioning.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends StrategicPositioningCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, StrategicPositioningCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StrategicPositioningPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a StrategicPositioning.
   * @param {StrategicPositioningDeleteArgs} args - Arguments to delete one StrategicPositioning.
   * @example
   * // Delete one StrategicPositioning
   * const StrategicPositioning = await prisma.strategicPositioning.delete({
   *   where: {
   *     // ... filter to delete one StrategicPositioning
   *   }
   * })
   * 
   */
  delete<T extends StrategicPositioningDeleteArgs>(args: Prisma.SelectSubset<T, StrategicPositioningDeleteArgs<ExtArgs>>): Prisma.Prisma__StrategicPositioningClient<runtime.Types.Result.GetResult<Prisma.$StrategicPositioningPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one StrategicPositioning.
   * @param {StrategicPositioningUpdateArgs} args - Arguments to update one StrategicPositioning.
   * @example
   * // Update one StrategicPositioning
   * const strategicPositioning = await prisma.strategicPositioning.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StrategicPositioningUpdateArgs>(args: Prisma.SelectSubset<T, StrategicPositioningUpdateArgs<ExtArgs>>): Prisma.Prisma__StrategicPositioningClient<runtime.Types.Result.GetResult<Prisma.$StrategicPositioningPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more StrategicPositionings.
   * @param {StrategicPositioningDeleteManyArgs} args - Arguments to filter StrategicPositionings to delete.
   * @example
   * // Delete a few StrategicPositionings
   * const { count } = await prisma.strategicPositioning.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StrategicPositioningDeleteManyArgs>(args?: Prisma.SelectSubset<T, StrategicPositioningDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StrategicPositionings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StrategicPositioningUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StrategicPositionings
   * const strategicPositioning = await prisma.strategicPositioning.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StrategicPositioningUpdateManyArgs>(args: Prisma.SelectSubset<T, StrategicPositioningUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StrategicPositionings and returns the data updated in the database.
   * @param {StrategicPositioningUpdateManyAndReturnArgs} args - Arguments to update many StrategicPositionings.
   * @example
   * // Update many StrategicPositionings
   * const strategicPositioning = await prisma.strategicPositioning.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more StrategicPositionings and only return the `id`
   * const strategicPositioningWithIdOnly = await prisma.strategicPositioning.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends StrategicPositioningUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, StrategicPositioningUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StrategicPositioningPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one StrategicPositioning.
   * @param {StrategicPositioningUpsertArgs} args - Arguments to update or create a StrategicPositioning.
   * @example
   * // Update or create a StrategicPositioning
   * const strategicPositioning = await prisma.strategicPositioning.upsert({
   *   create: {
   *     // ... data to create a StrategicPositioning
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StrategicPositioning we want to update
   *   }
   * })
   */
  upsert<T extends StrategicPositioningUpsertArgs>(args: Prisma.SelectSubset<T, StrategicPositioningUpsertArgs<ExtArgs>>): Prisma.Prisma__StrategicPositioningClient<runtime.Types.Result.GetResult<Prisma.$StrategicPositioningPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of StrategicPositionings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StrategicPositioningCountArgs} args - Arguments to filter StrategicPositionings to count.
   * @example
   * // Count the number of StrategicPositionings
   * const count = await prisma.strategicPositioning.count({
   *   where: {
   *     // ... the filter for the StrategicPositionings we want to count
   *   }
   * })
  **/
  count<T extends StrategicPositioningCountArgs>(
    args?: Prisma.Subset<T, StrategicPositioningCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StrategicPositioningCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a StrategicPositioning.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StrategicPositioningAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StrategicPositioningAggregateArgs>(args: Prisma.Subset<T, StrategicPositioningAggregateArgs>): Prisma.PrismaPromise<GetStrategicPositioningAggregateType<T>>

  /**
   * Group by StrategicPositioning.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StrategicPositioningGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StrategicPositioningGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StrategicPositioningGroupByArgs['orderBy'] }
      : { orderBy?: StrategicPositioningGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StrategicPositioningGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStrategicPositioningGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the StrategicPositioning model
 */
readonly fields: StrategicPositioningFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StrategicPositioning.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StrategicPositioningClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  dailyIdea<T extends Prisma.DailyIdeaDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdeaDefaultArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the StrategicPositioning model
 */
export interface StrategicPositioningFieldRefs {
  readonly id: Prisma.FieldRef<"StrategicPositioning", 'String'>
  readonly name: Prisma.FieldRef<"StrategicPositioning", 'String'>
  readonly targetSegment: Prisma.FieldRef<"StrategicPositioning", 'String'>
  readonly valueProposition: Prisma.FieldRef<"StrategicPositioning", 'String'>
  readonly keyDifferentiators: Prisma.FieldRef<"StrategicPositioning", 'String[]'>
  readonly createdAt: Prisma.FieldRef<"StrategicPositioning", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"StrategicPositioning", 'DateTime'>
  readonly dailyIdeaId: Prisma.FieldRef<"StrategicPositioning", 'String'>
}
    

// Custom InputTypes
/**
 * StrategicPositioning findUnique
 */
export type StrategicPositioningFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StrategicPositioning
   */
  select?: Prisma.StrategicPositioningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StrategicPositioning
   */
  omit?: Prisma.StrategicPositioningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StrategicPositioningInclude<ExtArgs> | null
  /**
   * Filter, which StrategicPositioning to fetch.
   */
  where: Prisma.StrategicPositioningWhereUniqueInput
}

/**
 * StrategicPositioning findUniqueOrThrow
 */
export type StrategicPositioningFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StrategicPositioning
   */
  select?: Prisma.StrategicPositioningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StrategicPositioning
   */
  omit?: Prisma.StrategicPositioningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StrategicPositioningInclude<ExtArgs> | null
  /**
   * Filter, which StrategicPositioning to fetch.
   */
  where: Prisma.StrategicPositioningWhereUniqueInput
}

/**
 * StrategicPositioning findFirst
 */
export type StrategicPositioningFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StrategicPositioning
   */
  select?: Prisma.StrategicPositioningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StrategicPositioning
   */
  omit?: Prisma.StrategicPositioningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StrategicPositioningInclude<ExtArgs> | null
  /**
   * Filter, which StrategicPositioning to fetch.
   */
  where?: Prisma.StrategicPositioningWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StrategicPositionings to fetch.
   */
  orderBy?: Prisma.StrategicPositioningOrderByWithRelationInput | Prisma.StrategicPositioningOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StrategicPositionings.
   */
  cursor?: Prisma.StrategicPositioningWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StrategicPositionings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StrategicPositionings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StrategicPositionings.
   */
  distinct?: Prisma.StrategicPositioningScalarFieldEnum | Prisma.StrategicPositioningScalarFieldEnum[]
}

/**
 * StrategicPositioning findFirstOrThrow
 */
export type StrategicPositioningFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StrategicPositioning
   */
  select?: Prisma.StrategicPositioningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StrategicPositioning
   */
  omit?: Prisma.StrategicPositioningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StrategicPositioningInclude<ExtArgs> | null
  /**
   * Filter, which StrategicPositioning to fetch.
   */
  where?: Prisma.StrategicPositioningWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StrategicPositionings to fetch.
   */
  orderBy?: Prisma.StrategicPositioningOrderByWithRelationInput | Prisma.StrategicPositioningOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StrategicPositionings.
   */
  cursor?: Prisma.StrategicPositioningWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StrategicPositionings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StrategicPositionings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StrategicPositionings.
   */
  distinct?: Prisma.StrategicPositioningScalarFieldEnum | Prisma.StrategicPositioningScalarFieldEnum[]
}

/**
 * StrategicPositioning findMany
 */
export type StrategicPositioningFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StrategicPositioning
   */
  select?: Prisma.StrategicPositioningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StrategicPositioning
   */
  omit?: Prisma.StrategicPositioningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StrategicPositioningInclude<ExtArgs> | null
  /**
   * Filter, which StrategicPositionings to fetch.
   */
  where?: Prisma.StrategicPositioningWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StrategicPositionings to fetch.
   */
  orderBy?: Prisma.StrategicPositioningOrderByWithRelationInput | Prisma.StrategicPositioningOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing StrategicPositionings.
   */
  cursor?: Prisma.StrategicPositioningWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StrategicPositionings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StrategicPositionings.
   */
  skip?: number
  distinct?: Prisma.StrategicPositioningScalarFieldEnum | Prisma.StrategicPositioningScalarFieldEnum[]
}

/**
 * StrategicPositioning create
 */
export type StrategicPositioningCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StrategicPositioning
   */
  select?: Prisma.StrategicPositioningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StrategicPositioning
   */
  omit?: Prisma.StrategicPositioningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StrategicPositioningInclude<ExtArgs> | null
  /**
   * The data needed to create a StrategicPositioning.
   */
  data: Prisma.XOR<Prisma.StrategicPositioningCreateInput, Prisma.StrategicPositioningUncheckedCreateInput>
}

/**
 * StrategicPositioning createMany
 */
export type StrategicPositioningCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many StrategicPositionings.
   */
  data: Prisma.StrategicPositioningCreateManyInput | Prisma.StrategicPositioningCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StrategicPositioning createManyAndReturn
 */
export type StrategicPositioningCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StrategicPositioning
   */
  select?: Prisma.StrategicPositioningSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StrategicPositioning
   */
  omit?: Prisma.StrategicPositioningOmit<ExtArgs> | null
  /**
   * The data used to create many StrategicPositionings.
   */
  data: Prisma.StrategicPositioningCreateManyInput | Prisma.StrategicPositioningCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StrategicPositioningIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * StrategicPositioning update
 */
export type StrategicPositioningUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StrategicPositioning
   */
  select?: Prisma.StrategicPositioningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StrategicPositioning
   */
  omit?: Prisma.StrategicPositioningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StrategicPositioningInclude<ExtArgs> | null
  /**
   * The data needed to update a StrategicPositioning.
   */
  data: Prisma.XOR<Prisma.StrategicPositioningUpdateInput, Prisma.StrategicPositioningUncheckedUpdateInput>
  /**
   * Choose, which StrategicPositioning to update.
   */
  where: Prisma.StrategicPositioningWhereUniqueInput
}

/**
 * StrategicPositioning updateMany
 */
export type StrategicPositioningUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update StrategicPositionings.
   */
  data: Prisma.XOR<Prisma.StrategicPositioningUpdateManyMutationInput, Prisma.StrategicPositioningUncheckedUpdateManyInput>
  /**
   * Filter which StrategicPositionings to update
   */
  where?: Prisma.StrategicPositioningWhereInput
  /**
   * Limit how many StrategicPositionings to update.
   */
  limit?: number
}

/**
 * StrategicPositioning updateManyAndReturn
 */
export type StrategicPositioningUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StrategicPositioning
   */
  select?: Prisma.StrategicPositioningSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StrategicPositioning
   */
  omit?: Prisma.StrategicPositioningOmit<ExtArgs> | null
  /**
   * The data used to update StrategicPositionings.
   */
  data: Prisma.XOR<Prisma.StrategicPositioningUpdateManyMutationInput, Prisma.StrategicPositioningUncheckedUpdateManyInput>
  /**
   * Filter which StrategicPositionings to update
   */
  where?: Prisma.StrategicPositioningWhereInput
  /**
   * Limit how many StrategicPositionings to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StrategicPositioningIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * StrategicPositioning upsert
 */
export type StrategicPositioningUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StrategicPositioning
   */
  select?: Prisma.StrategicPositioningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StrategicPositioning
   */
  omit?: Prisma.StrategicPositioningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StrategicPositioningInclude<ExtArgs> | null
  /**
   * The filter to search for the StrategicPositioning to update in case it exists.
   */
  where: Prisma.StrategicPositioningWhereUniqueInput
  /**
   * In case the StrategicPositioning found by the `where` argument doesn't exist, create a new StrategicPositioning with this data.
   */
  create: Prisma.XOR<Prisma.StrategicPositioningCreateInput, Prisma.StrategicPositioningUncheckedCreateInput>
  /**
   * In case the StrategicPositioning was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StrategicPositioningUpdateInput, Prisma.StrategicPositioningUncheckedUpdateInput>
}

/**
 * StrategicPositioning delete
 */
export type StrategicPositioningDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StrategicPositioning
   */
  select?: Prisma.StrategicPositioningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StrategicPositioning
   */
  omit?: Prisma.StrategicPositioningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StrategicPositioningInclude<ExtArgs> | null
  /**
   * Filter which StrategicPositioning to delete.
   */
  where: Prisma.StrategicPositioningWhereUniqueInput
}

/**
 * StrategicPositioning deleteMany
 */
export type StrategicPositioningDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StrategicPositionings to delete
   */
  where?: Prisma.StrategicPositioningWhereInput
  /**
   * Limit how many StrategicPositionings to delete.
   */
  limit?: number
}

/**
 * StrategicPositioning without action
 */
export type StrategicPositioningDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StrategicPositioning
   */
  select?: Prisma.StrategicPositioningSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StrategicPositioning
   */
  omit?: Prisma.StrategicPositioningOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StrategicPositioningInclude<ExtArgs> | null
}
