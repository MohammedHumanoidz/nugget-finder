
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ExecutionPlan` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ExecutionPlan
 * 
 */
export type ExecutionPlanModel = runtime.Types.Result.DefaultSelection<Prisma.$ExecutionPlanPayload>

export type AggregateExecutionPlan = {
  _count: ExecutionPlanCountAggregateOutputType | null
  _min: ExecutionPlanMinAggregateOutputType | null
  _max: ExecutionPlanMaxAggregateOutputType | null
}

export type ExecutionPlanMinAggregateOutputType = {
  id: string | null
  mvpDescription: string | null
  resourceRequirements: string | null
  technicalRoadmap: string | null
  goToMarketStrategy: string | null
  createdAt: Date | null
  updatedAt: Date | null
  dailyIdeaId: string | null
}

export type ExecutionPlanMaxAggregateOutputType = {
  id: string | null
  mvpDescription: string | null
  resourceRequirements: string | null
  technicalRoadmap: string | null
  goToMarketStrategy: string | null
  createdAt: Date | null
  updatedAt: Date | null
  dailyIdeaId: string | null
}

export type ExecutionPlanCountAggregateOutputType = {
  id: number
  mvpDescription: number
  keyMilestones: number
  resourceRequirements: number
  teamRequirements: number
  riskFactors: number
  technicalRoadmap: number
  goToMarketStrategy: number
  createdAt: number
  updatedAt: number
  dailyIdeaId: number
  _all: number
}


export type ExecutionPlanMinAggregateInputType = {
  id?: true
  mvpDescription?: true
  resourceRequirements?: true
  technicalRoadmap?: true
  goToMarketStrategy?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
}

export type ExecutionPlanMaxAggregateInputType = {
  id?: true
  mvpDescription?: true
  resourceRequirements?: true
  technicalRoadmap?: true
  goToMarketStrategy?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
}

export type ExecutionPlanCountAggregateInputType = {
  id?: true
  mvpDescription?: true
  keyMilestones?: true
  resourceRequirements?: true
  teamRequirements?: true
  riskFactors?: true
  technicalRoadmap?: true
  goToMarketStrategy?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
  _all?: true
}

export type ExecutionPlanAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExecutionPlan to aggregate.
   */
  where?: Prisma.ExecutionPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExecutionPlans to fetch.
   */
  orderBy?: Prisma.ExecutionPlanOrderByWithRelationInput | Prisma.ExecutionPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExecutionPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExecutionPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExecutionPlans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ExecutionPlans
  **/
  _count?: true | ExecutionPlanCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExecutionPlanMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExecutionPlanMaxAggregateInputType
}

export type GetExecutionPlanAggregateType<T extends ExecutionPlanAggregateArgs> = {
      [P in keyof T & keyof AggregateExecutionPlan]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExecutionPlan[P]>
    : Prisma.GetScalarType<T[P], AggregateExecutionPlan[P]>
}




export type ExecutionPlanGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExecutionPlanWhereInput
  orderBy?: Prisma.ExecutionPlanOrderByWithAggregationInput | Prisma.ExecutionPlanOrderByWithAggregationInput[]
  by: Prisma.ExecutionPlanScalarFieldEnum[] | Prisma.ExecutionPlanScalarFieldEnum
  having?: Prisma.ExecutionPlanScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExecutionPlanCountAggregateInputType | true
  _min?: ExecutionPlanMinAggregateInputType
  _max?: ExecutionPlanMaxAggregateInputType
}

export type ExecutionPlanGroupByOutputType = {
  id: string
  mvpDescription: string
  keyMilestones: runtime.JsonValue
  resourceRequirements: string
  teamRequirements: string[]
  riskFactors: string[]
  technicalRoadmap: string
  goToMarketStrategy: string
  createdAt: Date
  updatedAt: Date
  dailyIdeaId: string
  _count: ExecutionPlanCountAggregateOutputType | null
  _min: ExecutionPlanMinAggregateOutputType | null
  _max: ExecutionPlanMaxAggregateOutputType | null
}

type GetExecutionPlanGroupByPayload<T extends ExecutionPlanGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExecutionPlanGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExecutionPlanGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExecutionPlanGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExecutionPlanGroupByOutputType[P]>
      }
    >
  > 



export type ExecutionPlanWhereInput = {
  AND?: Prisma.ExecutionPlanWhereInput | Prisma.ExecutionPlanWhereInput[]
  OR?: Prisma.ExecutionPlanWhereInput[]
  NOT?: Prisma.ExecutionPlanWhereInput | Prisma.ExecutionPlanWhereInput[]
  id?: Prisma.StringFilter<"ExecutionPlan"> | string
  mvpDescription?: Prisma.StringFilter<"ExecutionPlan"> | string
  keyMilestones?: Prisma.JsonFilter<"ExecutionPlan">
  resourceRequirements?: Prisma.StringFilter<"ExecutionPlan"> | string
  teamRequirements?: Prisma.StringNullableListFilter<"ExecutionPlan">
  riskFactors?: Prisma.StringNullableListFilter<"ExecutionPlan">
  technicalRoadmap?: Prisma.StringFilter<"ExecutionPlan"> | string
  goToMarketStrategy?: Prisma.StringFilter<"ExecutionPlan"> | string
  createdAt?: Prisma.DateTimeFilter<"ExecutionPlan"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ExecutionPlan"> | Date | string
  dailyIdeaId?: Prisma.StringFilter<"ExecutionPlan"> | string
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaScalarRelationFilter, Prisma.DailyIdeaWhereInput>
}

export type ExecutionPlanOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  mvpDescription?: Prisma.SortOrder
  keyMilestones?: Prisma.SortOrder
  resourceRequirements?: Prisma.SortOrder
  teamRequirements?: Prisma.SortOrder
  riskFactors?: Prisma.SortOrder
  technicalRoadmap?: Prisma.SortOrder
  goToMarketStrategy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
  dailyIdea?: Prisma.DailyIdeaOrderByWithRelationInput
}

export type ExecutionPlanWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  dailyIdeaId?: string
  AND?: Prisma.ExecutionPlanWhereInput | Prisma.ExecutionPlanWhereInput[]
  OR?: Prisma.ExecutionPlanWhereInput[]
  NOT?: Prisma.ExecutionPlanWhereInput | Prisma.ExecutionPlanWhereInput[]
  mvpDescription?: Prisma.StringFilter<"ExecutionPlan"> | string
  keyMilestones?: Prisma.JsonFilter<"ExecutionPlan">
  resourceRequirements?: Prisma.StringFilter<"ExecutionPlan"> | string
  teamRequirements?: Prisma.StringNullableListFilter<"ExecutionPlan">
  riskFactors?: Prisma.StringNullableListFilter<"ExecutionPlan">
  technicalRoadmap?: Prisma.StringFilter<"ExecutionPlan"> | string
  goToMarketStrategy?: Prisma.StringFilter<"ExecutionPlan"> | string
  createdAt?: Prisma.DateTimeFilter<"ExecutionPlan"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ExecutionPlan"> | Date | string
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaScalarRelationFilter, Prisma.DailyIdeaWhereInput>
}, "id" | "dailyIdeaId">

export type ExecutionPlanOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  mvpDescription?: Prisma.SortOrder
  keyMilestones?: Prisma.SortOrder
  resourceRequirements?: Prisma.SortOrder
  teamRequirements?: Prisma.SortOrder
  riskFactors?: Prisma.SortOrder
  technicalRoadmap?: Prisma.SortOrder
  goToMarketStrategy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
  _count?: Prisma.ExecutionPlanCountOrderByAggregateInput
  _max?: Prisma.ExecutionPlanMaxOrderByAggregateInput
  _min?: Prisma.ExecutionPlanMinOrderByAggregateInput
}

export type ExecutionPlanScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExecutionPlanScalarWhereWithAggregatesInput | Prisma.ExecutionPlanScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExecutionPlanScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExecutionPlanScalarWhereWithAggregatesInput | Prisma.ExecutionPlanScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ExecutionPlan"> | string
  mvpDescription?: Prisma.StringWithAggregatesFilter<"ExecutionPlan"> | string
  keyMilestones?: Prisma.JsonWithAggregatesFilter<"ExecutionPlan">
  resourceRequirements?: Prisma.StringWithAggregatesFilter<"ExecutionPlan"> | string
  teamRequirements?: Prisma.StringNullableListFilter<"ExecutionPlan">
  riskFactors?: Prisma.StringNullableListFilter<"ExecutionPlan">
  technicalRoadmap?: Prisma.StringWithAggregatesFilter<"ExecutionPlan"> | string
  goToMarketStrategy?: Prisma.StringWithAggregatesFilter<"ExecutionPlan"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ExecutionPlan"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ExecutionPlan"> | Date | string
  dailyIdeaId?: Prisma.StringWithAggregatesFilter<"ExecutionPlan"> | string
}

export type ExecutionPlanCreateInput = {
  id?: string
  mvpDescription: string
  keyMilestones: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resourceRequirements: string
  teamRequirements?: Prisma.ExecutionPlanCreateteamRequirementsInput | string[]
  riskFactors?: Prisma.ExecutionPlanCreateriskFactorsInput | string[]
  technicalRoadmap: string
  goToMarketStrategy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdea: Prisma.DailyIdeaCreateNestedOneWithoutExecutionPlanInput
}

export type ExecutionPlanUncheckedCreateInput = {
  id?: string
  mvpDescription: string
  keyMilestones: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resourceRequirements: string
  teamRequirements?: Prisma.ExecutionPlanCreateteamRequirementsInput | string[]
  riskFactors?: Prisma.ExecutionPlanCreateriskFactorsInput | string[]
  technicalRoadmap: string
  goToMarketStrategy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdeaId: string
}

export type ExecutionPlanUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mvpDescription?: Prisma.StringFieldUpdateOperationsInput | string
  keyMilestones?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resourceRequirements?: Prisma.StringFieldUpdateOperationsInput | string
  teamRequirements?: Prisma.ExecutionPlanUpdateteamRequirementsInput | string[]
  riskFactors?: Prisma.ExecutionPlanUpdateriskFactorsInput | string[]
  technicalRoadmap?: Prisma.StringFieldUpdateOperationsInput | string
  goToMarketStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdea?: Prisma.DailyIdeaUpdateOneRequiredWithoutExecutionPlanNestedInput
}

export type ExecutionPlanUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mvpDescription?: Prisma.StringFieldUpdateOperationsInput | string
  keyMilestones?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resourceRequirements?: Prisma.StringFieldUpdateOperationsInput | string
  teamRequirements?: Prisma.ExecutionPlanUpdateteamRequirementsInput | string[]
  riskFactors?: Prisma.ExecutionPlanUpdateriskFactorsInput | string[]
  technicalRoadmap?: Prisma.StringFieldUpdateOperationsInput | string
  goToMarketStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdeaId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ExecutionPlanCreateManyInput = {
  id?: string
  mvpDescription: string
  keyMilestones: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resourceRequirements: string
  teamRequirements?: Prisma.ExecutionPlanCreateteamRequirementsInput | string[]
  riskFactors?: Prisma.ExecutionPlanCreateriskFactorsInput | string[]
  technicalRoadmap: string
  goToMarketStrategy: string
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdeaId: string
}

export type ExecutionPlanUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mvpDescription?: Prisma.StringFieldUpdateOperationsInput | string
  keyMilestones?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resourceRequirements?: Prisma.StringFieldUpdateOperationsInput | string
  teamRequirements?: Prisma.ExecutionPlanUpdateteamRequirementsInput | string[]
  riskFactors?: Prisma.ExecutionPlanUpdateriskFactorsInput | string[]
  technicalRoadmap?: Prisma.StringFieldUpdateOperationsInput | string
  goToMarketStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExecutionPlanUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mvpDescription?: Prisma.StringFieldUpdateOperationsInput | string
  keyMilestones?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resourceRequirements?: Prisma.StringFieldUpdateOperationsInput | string
  teamRequirements?: Prisma.ExecutionPlanUpdateteamRequirementsInput | string[]
  riskFactors?: Prisma.ExecutionPlanUpdateriskFactorsInput | string[]
  technicalRoadmap?: Prisma.StringFieldUpdateOperationsInput | string
  goToMarketStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdeaId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ExecutionPlanCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mvpDescription?: Prisma.SortOrder
  keyMilestones?: Prisma.SortOrder
  resourceRequirements?: Prisma.SortOrder
  teamRequirements?: Prisma.SortOrder
  riskFactors?: Prisma.SortOrder
  technicalRoadmap?: Prisma.SortOrder
  goToMarketStrategy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type ExecutionPlanMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mvpDescription?: Prisma.SortOrder
  resourceRequirements?: Prisma.SortOrder
  technicalRoadmap?: Prisma.SortOrder
  goToMarketStrategy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type ExecutionPlanMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mvpDescription?: Prisma.SortOrder
  resourceRequirements?: Prisma.SortOrder
  technicalRoadmap?: Prisma.SortOrder
  goToMarketStrategy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type ExecutionPlanNullableScalarRelationFilter = {
  is?: Prisma.ExecutionPlanWhereInput | null
  isNot?: Prisma.ExecutionPlanWhereInput | null
}

export type ExecutionPlanCreateteamRequirementsInput = {
  set: string[]
}

export type ExecutionPlanCreateriskFactorsInput = {
  set: string[]
}

export type ExecutionPlanUpdateteamRequirementsInput = {
  set?: string[]
  push?: string | string[]
}

export type ExecutionPlanUpdateriskFactorsInput = {
  set?: string[]
  push?: string | string[]
}

export type ExecutionPlanCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.ExecutionPlanCreateWithoutDailyIdeaInput, Prisma.ExecutionPlanUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.ExecutionPlanCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.ExecutionPlanWhereUniqueInput
}

export type ExecutionPlanUncheckedCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.ExecutionPlanCreateWithoutDailyIdeaInput, Prisma.ExecutionPlanUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.ExecutionPlanCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.ExecutionPlanWhereUniqueInput
}

export type ExecutionPlanUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.ExecutionPlanCreateWithoutDailyIdeaInput, Prisma.ExecutionPlanUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.ExecutionPlanCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.ExecutionPlanUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.ExecutionPlanWhereInput | boolean
  delete?: Prisma.ExecutionPlanWhereInput | boolean
  connect?: Prisma.ExecutionPlanWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ExecutionPlanUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.ExecutionPlanUpdateWithoutDailyIdeaInput>, Prisma.ExecutionPlanUncheckedUpdateWithoutDailyIdeaInput>
}

export type ExecutionPlanUncheckedUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.ExecutionPlanCreateWithoutDailyIdeaInput, Prisma.ExecutionPlanUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.ExecutionPlanCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.ExecutionPlanUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.ExecutionPlanWhereInput | boolean
  delete?: Prisma.ExecutionPlanWhereInput | boolean
  connect?: Prisma.ExecutionPlanWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ExecutionPlanUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.ExecutionPlanUpdateWithoutDailyIdeaInput>, Prisma.ExecutionPlanUncheckedUpdateWithoutDailyIdeaInput>
}

export type ExecutionPlanCreateWithoutDailyIdeaInput = {
  id?: string
  mvpDescription: string
  keyMilestones: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resourceRequirements: string
  teamRequirements?: Prisma.ExecutionPlanCreateteamRequirementsInput | string[]
  riskFactors?: Prisma.ExecutionPlanCreateriskFactorsInput | string[]
  technicalRoadmap: string
  goToMarketStrategy: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExecutionPlanUncheckedCreateWithoutDailyIdeaInput = {
  id?: string
  mvpDescription: string
  keyMilestones: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resourceRequirements: string
  teamRequirements?: Prisma.ExecutionPlanCreateteamRequirementsInput | string[]
  riskFactors?: Prisma.ExecutionPlanCreateriskFactorsInput | string[]
  technicalRoadmap: string
  goToMarketStrategy: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ExecutionPlanCreateOrConnectWithoutDailyIdeaInput = {
  where: Prisma.ExecutionPlanWhereUniqueInput
  create: Prisma.XOR<Prisma.ExecutionPlanCreateWithoutDailyIdeaInput, Prisma.ExecutionPlanUncheckedCreateWithoutDailyIdeaInput>
}

export type ExecutionPlanUpsertWithoutDailyIdeaInput = {
  update: Prisma.XOR<Prisma.ExecutionPlanUpdateWithoutDailyIdeaInput, Prisma.ExecutionPlanUncheckedUpdateWithoutDailyIdeaInput>
  create: Prisma.XOR<Prisma.ExecutionPlanCreateWithoutDailyIdeaInput, Prisma.ExecutionPlanUncheckedCreateWithoutDailyIdeaInput>
  where?: Prisma.ExecutionPlanWhereInput
}

export type ExecutionPlanUpdateToOneWithWhereWithoutDailyIdeaInput = {
  where?: Prisma.ExecutionPlanWhereInput
  data: Prisma.XOR<Prisma.ExecutionPlanUpdateWithoutDailyIdeaInput, Prisma.ExecutionPlanUncheckedUpdateWithoutDailyIdeaInput>
}

export type ExecutionPlanUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mvpDescription?: Prisma.StringFieldUpdateOperationsInput | string
  keyMilestones?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resourceRequirements?: Prisma.StringFieldUpdateOperationsInput | string
  teamRequirements?: Prisma.ExecutionPlanUpdateteamRequirementsInput | string[]
  riskFactors?: Prisma.ExecutionPlanUpdateriskFactorsInput | string[]
  technicalRoadmap?: Prisma.StringFieldUpdateOperationsInput | string
  goToMarketStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExecutionPlanUncheckedUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mvpDescription?: Prisma.StringFieldUpdateOperationsInput | string
  keyMilestones?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resourceRequirements?: Prisma.StringFieldUpdateOperationsInput | string
  teamRequirements?: Prisma.ExecutionPlanUpdateteamRequirementsInput | string[]
  riskFactors?: Prisma.ExecutionPlanUpdateriskFactorsInput | string[]
  technicalRoadmap?: Prisma.StringFieldUpdateOperationsInput | string
  goToMarketStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ExecutionPlanSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mvpDescription?: boolean
  keyMilestones?: boolean
  resourceRequirements?: boolean
  teamRequirements?: boolean
  riskFactors?: boolean
  technicalRoadmap?: boolean
  goToMarketStrategy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["executionPlan"]>

export type ExecutionPlanSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mvpDescription?: boolean
  keyMilestones?: boolean
  resourceRequirements?: boolean
  teamRequirements?: boolean
  riskFactors?: boolean
  technicalRoadmap?: boolean
  goToMarketStrategy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["executionPlan"]>

export type ExecutionPlanSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mvpDescription?: boolean
  keyMilestones?: boolean
  resourceRequirements?: boolean
  teamRequirements?: boolean
  riskFactors?: boolean
  technicalRoadmap?: boolean
  goToMarketStrategy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["executionPlan"]>

export type ExecutionPlanSelectScalar = {
  id?: boolean
  mvpDescription?: boolean
  keyMilestones?: boolean
  resourceRequirements?: boolean
  teamRequirements?: boolean
  riskFactors?: boolean
  technicalRoadmap?: boolean
  goToMarketStrategy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
}

export type ExecutionPlanOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "mvpDescription" | "keyMilestones" | "resourceRequirements" | "teamRequirements" | "riskFactors" | "technicalRoadmap" | "goToMarketStrategy" | "createdAt" | "updatedAt" | "dailyIdeaId", ExtArgs["result"]["executionPlan"]>
export type ExecutionPlanInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}
export type ExecutionPlanIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}
export type ExecutionPlanIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}

export type $ExecutionPlanPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ExecutionPlan"
  objects: {
    dailyIdea: Prisma.$DailyIdeaPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    mvpDescription: string
    keyMilestones: runtime.JsonValue
    resourceRequirements: string
    teamRequirements: string[]
    riskFactors: string[]
    technicalRoadmap: string
    goToMarketStrategy: string
    createdAt: Date
    updatedAt: Date
    dailyIdeaId: string
  }, ExtArgs["result"]["executionPlan"]>
  composites: {}
}

export type ExecutionPlanGetPayload<S extends boolean | null | undefined | ExecutionPlanDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExecutionPlanPayload, S>

export type ExecutionPlanCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExecutionPlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExecutionPlanCountAggregateInputType | true
  }

export interface ExecutionPlanDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExecutionPlan'], meta: { name: 'ExecutionPlan' } }
  /**
   * Find zero or one ExecutionPlan that matches the filter.
   * @param {ExecutionPlanFindUniqueArgs} args - Arguments to find a ExecutionPlan
   * @example
   * // Get one ExecutionPlan
   * const executionPlan = await prisma.executionPlan.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExecutionPlanFindUniqueArgs>(args: Prisma.SelectSubset<T, ExecutionPlanFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExecutionPlanClient<runtime.Types.Result.GetResult<Prisma.$ExecutionPlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ExecutionPlan that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExecutionPlanFindUniqueOrThrowArgs} args - Arguments to find a ExecutionPlan
   * @example
   * // Get one ExecutionPlan
   * const executionPlan = await prisma.executionPlan.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExecutionPlanFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExecutionPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExecutionPlanClient<runtime.Types.Result.GetResult<Prisma.$ExecutionPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExecutionPlan that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExecutionPlanFindFirstArgs} args - Arguments to find a ExecutionPlan
   * @example
   * // Get one ExecutionPlan
   * const executionPlan = await prisma.executionPlan.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExecutionPlanFindFirstArgs>(args?: Prisma.SelectSubset<T, ExecutionPlanFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExecutionPlanClient<runtime.Types.Result.GetResult<Prisma.$ExecutionPlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ExecutionPlan that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExecutionPlanFindFirstOrThrowArgs} args - Arguments to find a ExecutionPlan
   * @example
   * // Get one ExecutionPlan
   * const executionPlan = await prisma.executionPlan.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExecutionPlanFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExecutionPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExecutionPlanClient<runtime.Types.Result.GetResult<Prisma.$ExecutionPlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ExecutionPlans that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExecutionPlanFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ExecutionPlans
   * const executionPlans = await prisma.executionPlan.findMany()
   * 
   * // Get first 10 ExecutionPlans
   * const executionPlans = await prisma.executionPlan.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const executionPlanWithIdOnly = await prisma.executionPlan.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ExecutionPlanFindManyArgs>(args?: Prisma.SelectSubset<T, ExecutionPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExecutionPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ExecutionPlan.
   * @param {ExecutionPlanCreateArgs} args - Arguments to create a ExecutionPlan.
   * @example
   * // Create one ExecutionPlan
   * const ExecutionPlan = await prisma.executionPlan.create({
   *   data: {
   *     // ... data to create a ExecutionPlan
   *   }
   * })
   * 
   */
  create<T extends ExecutionPlanCreateArgs>(args: Prisma.SelectSubset<T, ExecutionPlanCreateArgs<ExtArgs>>): Prisma.Prisma__ExecutionPlanClient<runtime.Types.Result.GetResult<Prisma.$ExecutionPlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ExecutionPlans.
   * @param {ExecutionPlanCreateManyArgs} args - Arguments to create many ExecutionPlans.
   * @example
   * // Create many ExecutionPlans
   * const executionPlan = await prisma.executionPlan.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExecutionPlanCreateManyArgs>(args?: Prisma.SelectSubset<T, ExecutionPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ExecutionPlans and returns the data saved in the database.
   * @param {ExecutionPlanCreateManyAndReturnArgs} args - Arguments to create many ExecutionPlans.
   * @example
   * // Create many ExecutionPlans
   * const executionPlan = await prisma.executionPlan.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ExecutionPlans and only return the `id`
   * const executionPlanWithIdOnly = await prisma.executionPlan.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ExecutionPlanCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ExecutionPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExecutionPlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ExecutionPlan.
   * @param {ExecutionPlanDeleteArgs} args - Arguments to delete one ExecutionPlan.
   * @example
   * // Delete one ExecutionPlan
   * const ExecutionPlan = await prisma.executionPlan.delete({
   *   where: {
   *     // ... filter to delete one ExecutionPlan
   *   }
   * })
   * 
   */
  delete<T extends ExecutionPlanDeleteArgs>(args: Prisma.SelectSubset<T, ExecutionPlanDeleteArgs<ExtArgs>>): Prisma.Prisma__ExecutionPlanClient<runtime.Types.Result.GetResult<Prisma.$ExecutionPlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ExecutionPlan.
   * @param {ExecutionPlanUpdateArgs} args - Arguments to update one ExecutionPlan.
   * @example
   * // Update one ExecutionPlan
   * const executionPlan = await prisma.executionPlan.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExecutionPlanUpdateArgs>(args: Prisma.SelectSubset<T, ExecutionPlanUpdateArgs<ExtArgs>>): Prisma.Prisma__ExecutionPlanClient<runtime.Types.Result.GetResult<Prisma.$ExecutionPlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ExecutionPlans.
   * @param {ExecutionPlanDeleteManyArgs} args - Arguments to filter ExecutionPlans to delete.
   * @example
   * // Delete a few ExecutionPlans
   * const { count } = await prisma.executionPlan.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExecutionPlanDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExecutionPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExecutionPlans.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExecutionPlanUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ExecutionPlans
   * const executionPlan = await prisma.executionPlan.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExecutionPlanUpdateManyArgs>(args: Prisma.SelectSubset<T, ExecutionPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ExecutionPlans and returns the data updated in the database.
   * @param {ExecutionPlanUpdateManyAndReturnArgs} args - Arguments to update many ExecutionPlans.
   * @example
   * // Update many ExecutionPlans
   * const executionPlan = await prisma.executionPlan.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ExecutionPlans and only return the `id`
   * const executionPlanWithIdOnly = await prisma.executionPlan.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ExecutionPlanUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ExecutionPlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExecutionPlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ExecutionPlan.
   * @param {ExecutionPlanUpsertArgs} args - Arguments to update or create a ExecutionPlan.
   * @example
   * // Update or create a ExecutionPlan
   * const executionPlan = await prisma.executionPlan.upsert({
   *   create: {
   *     // ... data to create a ExecutionPlan
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ExecutionPlan we want to update
   *   }
   * })
   */
  upsert<T extends ExecutionPlanUpsertArgs>(args: Prisma.SelectSubset<T, ExecutionPlanUpsertArgs<ExtArgs>>): Prisma.Prisma__ExecutionPlanClient<runtime.Types.Result.GetResult<Prisma.$ExecutionPlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ExecutionPlans.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExecutionPlanCountArgs} args - Arguments to filter ExecutionPlans to count.
   * @example
   * // Count the number of ExecutionPlans
   * const count = await prisma.executionPlan.count({
   *   where: {
   *     // ... the filter for the ExecutionPlans we want to count
   *   }
   * })
  **/
  count<T extends ExecutionPlanCountArgs>(
    args?: Prisma.Subset<T, ExecutionPlanCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExecutionPlanCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ExecutionPlan.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExecutionPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExecutionPlanAggregateArgs>(args: Prisma.Subset<T, ExecutionPlanAggregateArgs>): Prisma.PrismaPromise<GetExecutionPlanAggregateType<T>>

  /**
   * Group by ExecutionPlan.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExecutionPlanGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExecutionPlanGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExecutionPlanGroupByArgs['orderBy'] }
      : { orderBy?: ExecutionPlanGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExecutionPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExecutionPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ExecutionPlan model
 */
readonly fields: ExecutionPlanFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ExecutionPlan.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExecutionPlanClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  dailyIdea<T extends Prisma.DailyIdeaDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdeaDefaultArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ExecutionPlan model
 */
export interface ExecutionPlanFieldRefs {
  readonly id: Prisma.FieldRef<"ExecutionPlan", 'String'>
  readonly mvpDescription: Prisma.FieldRef<"ExecutionPlan", 'String'>
  readonly keyMilestones: Prisma.FieldRef<"ExecutionPlan", 'Json'>
  readonly resourceRequirements: Prisma.FieldRef<"ExecutionPlan", 'String'>
  readonly teamRequirements: Prisma.FieldRef<"ExecutionPlan", 'String[]'>
  readonly riskFactors: Prisma.FieldRef<"ExecutionPlan", 'String[]'>
  readonly technicalRoadmap: Prisma.FieldRef<"ExecutionPlan", 'String'>
  readonly goToMarketStrategy: Prisma.FieldRef<"ExecutionPlan", 'String'>
  readonly createdAt: Prisma.FieldRef<"ExecutionPlan", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ExecutionPlan", 'DateTime'>
  readonly dailyIdeaId: Prisma.FieldRef<"ExecutionPlan", 'String'>
}
    

// Custom InputTypes
/**
 * ExecutionPlan findUnique
 */
export type ExecutionPlanFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExecutionPlan
   */
  select?: Prisma.ExecutionPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExecutionPlan
   */
  omit?: Prisma.ExecutionPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExecutionPlanInclude<ExtArgs> | null
  /**
   * Filter, which ExecutionPlan to fetch.
   */
  where: Prisma.ExecutionPlanWhereUniqueInput
}

/**
 * ExecutionPlan findUniqueOrThrow
 */
export type ExecutionPlanFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExecutionPlan
   */
  select?: Prisma.ExecutionPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExecutionPlan
   */
  omit?: Prisma.ExecutionPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExecutionPlanInclude<ExtArgs> | null
  /**
   * Filter, which ExecutionPlan to fetch.
   */
  where: Prisma.ExecutionPlanWhereUniqueInput
}

/**
 * ExecutionPlan findFirst
 */
export type ExecutionPlanFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExecutionPlan
   */
  select?: Prisma.ExecutionPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExecutionPlan
   */
  omit?: Prisma.ExecutionPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExecutionPlanInclude<ExtArgs> | null
  /**
   * Filter, which ExecutionPlan to fetch.
   */
  where?: Prisma.ExecutionPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExecutionPlans to fetch.
   */
  orderBy?: Prisma.ExecutionPlanOrderByWithRelationInput | Prisma.ExecutionPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExecutionPlans.
   */
  cursor?: Prisma.ExecutionPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExecutionPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExecutionPlans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExecutionPlans.
   */
  distinct?: Prisma.ExecutionPlanScalarFieldEnum | Prisma.ExecutionPlanScalarFieldEnum[]
}

/**
 * ExecutionPlan findFirstOrThrow
 */
export type ExecutionPlanFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExecutionPlan
   */
  select?: Prisma.ExecutionPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExecutionPlan
   */
  omit?: Prisma.ExecutionPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExecutionPlanInclude<ExtArgs> | null
  /**
   * Filter, which ExecutionPlan to fetch.
   */
  where?: Prisma.ExecutionPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExecutionPlans to fetch.
   */
  orderBy?: Prisma.ExecutionPlanOrderByWithRelationInput | Prisma.ExecutionPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ExecutionPlans.
   */
  cursor?: Prisma.ExecutionPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExecutionPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExecutionPlans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ExecutionPlans.
   */
  distinct?: Prisma.ExecutionPlanScalarFieldEnum | Prisma.ExecutionPlanScalarFieldEnum[]
}

/**
 * ExecutionPlan findMany
 */
export type ExecutionPlanFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExecutionPlan
   */
  select?: Prisma.ExecutionPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExecutionPlan
   */
  omit?: Prisma.ExecutionPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExecutionPlanInclude<ExtArgs> | null
  /**
   * Filter, which ExecutionPlans to fetch.
   */
  where?: Prisma.ExecutionPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ExecutionPlans to fetch.
   */
  orderBy?: Prisma.ExecutionPlanOrderByWithRelationInput | Prisma.ExecutionPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ExecutionPlans.
   */
  cursor?: Prisma.ExecutionPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ExecutionPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ExecutionPlans.
   */
  skip?: number
  distinct?: Prisma.ExecutionPlanScalarFieldEnum | Prisma.ExecutionPlanScalarFieldEnum[]
}

/**
 * ExecutionPlan create
 */
export type ExecutionPlanCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExecutionPlan
   */
  select?: Prisma.ExecutionPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExecutionPlan
   */
  omit?: Prisma.ExecutionPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExecutionPlanInclude<ExtArgs> | null
  /**
   * The data needed to create a ExecutionPlan.
   */
  data: Prisma.XOR<Prisma.ExecutionPlanCreateInput, Prisma.ExecutionPlanUncheckedCreateInput>
}

/**
 * ExecutionPlan createMany
 */
export type ExecutionPlanCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ExecutionPlans.
   */
  data: Prisma.ExecutionPlanCreateManyInput | Prisma.ExecutionPlanCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ExecutionPlan createManyAndReturn
 */
export type ExecutionPlanCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExecutionPlan
   */
  select?: Prisma.ExecutionPlanSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExecutionPlan
   */
  omit?: Prisma.ExecutionPlanOmit<ExtArgs> | null
  /**
   * The data used to create many ExecutionPlans.
   */
  data: Prisma.ExecutionPlanCreateManyInput | Prisma.ExecutionPlanCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExecutionPlanIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ExecutionPlan update
 */
export type ExecutionPlanUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExecutionPlan
   */
  select?: Prisma.ExecutionPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExecutionPlan
   */
  omit?: Prisma.ExecutionPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExecutionPlanInclude<ExtArgs> | null
  /**
   * The data needed to update a ExecutionPlan.
   */
  data: Prisma.XOR<Prisma.ExecutionPlanUpdateInput, Prisma.ExecutionPlanUncheckedUpdateInput>
  /**
   * Choose, which ExecutionPlan to update.
   */
  where: Prisma.ExecutionPlanWhereUniqueInput
}

/**
 * ExecutionPlan updateMany
 */
export type ExecutionPlanUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ExecutionPlans.
   */
  data: Prisma.XOR<Prisma.ExecutionPlanUpdateManyMutationInput, Prisma.ExecutionPlanUncheckedUpdateManyInput>
  /**
   * Filter which ExecutionPlans to update
   */
  where?: Prisma.ExecutionPlanWhereInput
  /**
   * Limit how many ExecutionPlans to update.
   */
  limit?: number
}

/**
 * ExecutionPlan updateManyAndReturn
 */
export type ExecutionPlanUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExecutionPlan
   */
  select?: Prisma.ExecutionPlanSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ExecutionPlan
   */
  omit?: Prisma.ExecutionPlanOmit<ExtArgs> | null
  /**
   * The data used to update ExecutionPlans.
   */
  data: Prisma.XOR<Prisma.ExecutionPlanUpdateManyMutationInput, Prisma.ExecutionPlanUncheckedUpdateManyInput>
  /**
   * Filter which ExecutionPlans to update
   */
  where?: Prisma.ExecutionPlanWhereInput
  /**
   * Limit how many ExecutionPlans to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExecutionPlanIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ExecutionPlan upsert
 */
export type ExecutionPlanUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExecutionPlan
   */
  select?: Prisma.ExecutionPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExecutionPlan
   */
  omit?: Prisma.ExecutionPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExecutionPlanInclude<ExtArgs> | null
  /**
   * The filter to search for the ExecutionPlan to update in case it exists.
   */
  where: Prisma.ExecutionPlanWhereUniqueInput
  /**
   * In case the ExecutionPlan found by the `where` argument doesn't exist, create a new ExecutionPlan with this data.
   */
  create: Prisma.XOR<Prisma.ExecutionPlanCreateInput, Prisma.ExecutionPlanUncheckedCreateInput>
  /**
   * In case the ExecutionPlan was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExecutionPlanUpdateInput, Prisma.ExecutionPlanUncheckedUpdateInput>
}

/**
 * ExecutionPlan delete
 */
export type ExecutionPlanDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExecutionPlan
   */
  select?: Prisma.ExecutionPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExecutionPlan
   */
  omit?: Prisma.ExecutionPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExecutionPlanInclude<ExtArgs> | null
  /**
   * Filter which ExecutionPlan to delete.
   */
  where: Prisma.ExecutionPlanWhereUniqueInput
}

/**
 * ExecutionPlan deleteMany
 */
export type ExecutionPlanDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ExecutionPlans to delete
   */
  where?: Prisma.ExecutionPlanWhereInput
  /**
   * Limit how many ExecutionPlans to delete.
   */
  limit?: number
}

/**
 * ExecutionPlan without action
 */
export type ExecutionPlanDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ExecutionPlan
   */
  select?: Prisma.ExecutionPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ExecutionPlan
   */
  omit?: Prisma.ExecutionPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExecutionPlanInclude<ExtArgs> | null
}
