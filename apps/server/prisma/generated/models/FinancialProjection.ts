
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FinancialProjection` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FinancialProjection
 * 
 */
export type FinancialProjectionModel = runtime.Types.Result.DefaultSelection<Prisma.$FinancialProjectionPayload>

export type AggregateFinancialProjection = {
  _count: FinancialProjectionCountAggregateOutputType | null
  _avg: FinancialProjectionAvgAggregateOutputType | null
  _sum: FinancialProjectionSumAggregateOutputType | null
  _min: FinancialProjectionMinAggregateOutputType | null
  _max: FinancialProjectionMaxAggregateOutputType | null
}

export type FinancialProjectionAvgAggregateOutputType = {
  year: number | null
  revenue: number | null
  costs: number | null
  netMargin: number | null
  revenueGrowth: number | null
}

export type FinancialProjectionSumAggregateOutputType = {
  year: number | null
  revenue: number | null
  costs: number | null
  netMargin: number | null
  revenueGrowth: number | null
}

export type FinancialProjectionMinAggregateOutputType = {
  id: string | null
  year: number | null
  revenue: number | null
  costs: number | null
  netMargin: number | null
  revenueGrowth: number | null
  monetizationStrategyId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FinancialProjectionMaxAggregateOutputType = {
  id: string | null
  year: number | null
  revenue: number | null
  costs: number | null
  netMargin: number | null
  revenueGrowth: number | null
  monetizationStrategyId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FinancialProjectionCountAggregateOutputType = {
  id: number
  year: number
  revenue: number
  costs: number
  netMargin: number
  revenueGrowth: number
  monetizationStrategyId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type FinancialProjectionAvgAggregateInputType = {
  year?: true
  revenue?: true
  costs?: true
  netMargin?: true
  revenueGrowth?: true
}

export type FinancialProjectionSumAggregateInputType = {
  year?: true
  revenue?: true
  costs?: true
  netMargin?: true
  revenueGrowth?: true
}

export type FinancialProjectionMinAggregateInputType = {
  id?: true
  year?: true
  revenue?: true
  costs?: true
  netMargin?: true
  revenueGrowth?: true
  monetizationStrategyId?: true
  createdAt?: true
  updatedAt?: true
}

export type FinancialProjectionMaxAggregateInputType = {
  id?: true
  year?: true
  revenue?: true
  costs?: true
  netMargin?: true
  revenueGrowth?: true
  monetizationStrategyId?: true
  createdAt?: true
  updatedAt?: true
}

export type FinancialProjectionCountAggregateInputType = {
  id?: true
  year?: true
  revenue?: true
  costs?: true
  netMargin?: true
  revenueGrowth?: true
  monetizationStrategyId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type FinancialProjectionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FinancialProjection to aggregate.
   */
  where?: Prisma.FinancialProjectionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FinancialProjections to fetch.
   */
  orderBy?: Prisma.FinancialProjectionOrderByWithRelationInput | Prisma.FinancialProjectionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FinancialProjectionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FinancialProjections from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FinancialProjections.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FinancialProjections
  **/
  _count?: true | FinancialProjectionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FinancialProjectionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FinancialProjectionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FinancialProjectionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FinancialProjectionMaxAggregateInputType
}

export type GetFinancialProjectionAggregateType<T extends FinancialProjectionAggregateArgs> = {
      [P in keyof T & keyof AggregateFinancialProjection]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFinancialProjection[P]>
    : Prisma.GetScalarType<T[P], AggregateFinancialProjection[P]>
}




export type FinancialProjectionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FinancialProjectionWhereInput
  orderBy?: Prisma.FinancialProjectionOrderByWithAggregationInput | Prisma.FinancialProjectionOrderByWithAggregationInput[]
  by: Prisma.FinancialProjectionScalarFieldEnum[] | Prisma.FinancialProjectionScalarFieldEnum
  having?: Prisma.FinancialProjectionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FinancialProjectionCountAggregateInputType | true
  _avg?: FinancialProjectionAvgAggregateInputType
  _sum?: FinancialProjectionSumAggregateInputType
  _min?: FinancialProjectionMinAggregateInputType
  _max?: FinancialProjectionMaxAggregateInputType
}

export type FinancialProjectionGroupByOutputType = {
  id: string
  year: number
  revenue: number
  costs: number
  netMargin: number
  revenueGrowth: number
  monetizationStrategyId: string
  createdAt: Date
  updatedAt: Date
  _count: FinancialProjectionCountAggregateOutputType | null
  _avg: FinancialProjectionAvgAggregateOutputType | null
  _sum: FinancialProjectionSumAggregateOutputType | null
  _min: FinancialProjectionMinAggregateOutputType | null
  _max: FinancialProjectionMaxAggregateOutputType | null
}

type GetFinancialProjectionGroupByPayload<T extends FinancialProjectionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FinancialProjectionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FinancialProjectionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FinancialProjectionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FinancialProjectionGroupByOutputType[P]>
      }
    >
  > 



export type FinancialProjectionWhereInput = {
  AND?: Prisma.FinancialProjectionWhereInput | Prisma.FinancialProjectionWhereInput[]
  OR?: Prisma.FinancialProjectionWhereInput[]
  NOT?: Prisma.FinancialProjectionWhereInput | Prisma.FinancialProjectionWhereInput[]
  id?: Prisma.StringFilter<"FinancialProjection"> | string
  year?: Prisma.IntFilter<"FinancialProjection"> | number
  revenue?: Prisma.FloatFilter<"FinancialProjection"> | number
  costs?: Prisma.FloatFilter<"FinancialProjection"> | number
  netMargin?: Prisma.FloatFilter<"FinancialProjection"> | number
  revenueGrowth?: Prisma.FloatFilter<"FinancialProjection"> | number
  monetizationStrategyId?: Prisma.StringFilter<"FinancialProjection"> | string
  createdAt?: Prisma.DateTimeFilter<"FinancialProjection"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FinancialProjection"> | Date | string
  monetizationStrategy?: Prisma.XOR<Prisma.MonetizationStrategyScalarRelationFilter, Prisma.MonetizationStrategyWhereInput>
}

export type FinancialProjectionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
  revenue?: Prisma.SortOrder
  costs?: Prisma.SortOrder
  netMargin?: Prisma.SortOrder
  revenueGrowth?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  monetizationStrategy?: Prisma.MonetizationStrategyOrderByWithRelationInput
}

export type FinancialProjectionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FinancialProjectionWhereInput | Prisma.FinancialProjectionWhereInput[]
  OR?: Prisma.FinancialProjectionWhereInput[]
  NOT?: Prisma.FinancialProjectionWhereInput | Prisma.FinancialProjectionWhereInput[]
  year?: Prisma.IntFilter<"FinancialProjection"> | number
  revenue?: Prisma.FloatFilter<"FinancialProjection"> | number
  costs?: Prisma.FloatFilter<"FinancialProjection"> | number
  netMargin?: Prisma.FloatFilter<"FinancialProjection"> | number
  revenueGrowth?: Prisma.FloatFilter<"FinancialProjection"> | number
  monetizationStrategyId?: Prisma.StringFilter<"FinancialProjection"> | string
  createdAt?: Prisma.DateTimeFilter<"FinancialProjection"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FinancialProjection"> | Date | string
  monetizationStrategy?: Prisma.XOR<Prisma.MonetizationStrategyScalarRelationFilter, Prisma.MonetizationStrategyWhereInput>
}, "id">

export type FinancialProjectionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
  revenue?: Prisma.SortOrder
  costs?: Prisma.SortOrder
  netMargin?: Prisma.SortOrder
  revenueGrowth?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.FinancialProjectionCountOrderByAggregateInput
  _avg?: Prisma.FinancialProjectionAvgOrderByAggregateInput
  _max?: Prisma.FinancialProjectionMaxOrderByAggregateInput
  _min?: Prisma.FinancialProjectionMinOrderByAggregateInput
  _sum?: Prisma.FinancialProjectionSumOrderByAggregateInput
}

export type FinancialProjectionScalarWhereWithAggregatesInput = {
  AND?: Prisma.FinancialProjectionScalarWhereWithAggregatesInput | Prisma.FinancialProjectionScalarWhereWithAggregatesInput[]
  OR?: Prisma.FinancialProjectionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FinancialProjectionScalarWhereWithAggregatesInput | Prisma.FinancialProjectionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FinancialProjection"> | string
  year?: Prisma.IntWithAggregatesFilter<"FinancialProjection"> | number
  revenue?: Prisma.FloatWithAggregatesFilter<"FinancialProjection"> | number
  costs?: Prisma.FloatWithAggregatesFilter<"FinancialProjection"> | number
  netMargin?: Prisma.FloatWithAggregatesFilter<"FinancialProjection"> | number
  revenueGrowth?: Prisma.FloatWithAggregatesFilter<"FinancialProjection"> | number
  monetizationStrategyId?: Prisma.StringWithAggregatesFilter<"FinancialProjection"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"FinancialProjection"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"FinancialProjection"> | Date | string
}

export type FinancialProjectionCreateInput = {
  id?: string
  year: number
  revenue: number
  costs: number
  netMargin: number
  revenueGrowth: number
  createdAt?: Date | string
  updatedAt?: Date | string
  monetizationStrategy: Prisma.MonetizationStrategyCreateNestedOneWithoutFinancialProjectionsInput
}

export type FinancialProjectionUncheckedCreateInput = {
  id?: string
  year: number
  revenue: number
  costs: number
  netMargin: number
  revenueGrowth: number
  monetizationStrategyId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FinancialProjectionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  revenue?: Prisma.FloatFieldUpdateOperationsInput | number
  costs?: Prisma.FloatFieldUpdateOperationsInput | number
  netMargin?: Prisma.FloatFieldUpdateOperationsInput | number
  revenueGrowth?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  monetizationStrategy?: Prisma.MonetizationStrategyUpdateOneRequiredWithoutFinancialProjectionsNestedInput
}

export type FinancialProjectionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  revenue?: Prisma.FloatFieldUpdateOperationsInput | number
  costs?: Prisma.FloatFieldUpdateOperationsInput | number
  netMargin?: Prisma.FloatFieldUpdateOperationsInput | number
  revenueGrowth?: Prisma.FloatFieldUpdateOperationsInput | number
  monetizationStrategyId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FinancialProjectionCreateManyInput = {
  id?: string
  year: number
  revenue: number
  costs: number
  netMargin: number
  revenueGrowth: number
  monetizationStrategyId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FinancialProjectionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  revenue?: Prisma.FloatFieldUpdateOperationsInput | number
  costs?: Prisma.FloatFieldUpdateOperationsInput | number
  netMargin?: Prisma.FloatFieldUpdateOperationsInput | number
  revenueGrowth?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FinancialProjectionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  revenue?: Prisma.FloatFieldUpdateOperationsInput | number
  costs?: Prisma.FloatFieldUpdateOperationsInput | number
  netMargin?: Prisma.FloatFieldUpdateOperationsInput | number
  revenueGrowth?: Prisma.FloatFieldUpdateOperationsInput | number
  monetizationStrategyId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FinancialProjectionListRelationFilter = {
  every?: Prisma.FinancialProjectionWhereInput
  some?: Prisma.FinancialProjectionWhereInput
  none?: Prisma.FinancialProjectionWhereInput
}

export type FinancialProjectionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FinancialProjectionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
  revenue?: Prisma.SortOrder
  costs?: Prisma.SortOrder
  netMargin?: Prisma.SortOrder
  revenueGrowth?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FinancialProjectionAvgOrderByAggregateInput = {
  year?: Prisma.SortOrder
  revenue?: Prisma.SortOrder
  costs?: Prisma.SortOrder
  netMargin?: Prisma.SortOrder
  revenueGrowth?: Prisma.SortOrder
}

export type FinancialProjectionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
  revenue?: Prisma.SortOrder
  costs?: Prisma.SortOrder
  netMargin?: Prisma.SortOrder
  revenueGrowth?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FinancialProjectionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
  revenue?: Prisma.SortOrder
  costs?: Prisma.SortOrder
  netMargin?: Prisma.SortOrder
  revenueGrowth?: Prisma.SortOrder
  monetizationStrategyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FinancialProjectionSumOrderByAggregateInput = {
  year?: Prisma.SortOrder
  revenue?: Prisma.SortOrder
  costs?: Prisma.SortOrder
  netMargin?: Prisma.SortOrder
  revenueGrowth?: Prisma.SortOrder
}

export type FinancialProjectionCreateNestedManyWithoutMonetizationStrategyInput = {
  create?: Prisma.XOR<Prisma.FinancialProjectionCreateWithoutMonetizationStrategyInput, Prisma.FinancialProjectionUncheckedCreateWithoutMonetizationStrategyInput> | Prisma.FinancialProjectionCreateWithoutMonetizationStrategyInput[] | Prisma.FinancialProjectionUncheckedCreateWithoutMonetizationStrategyInput[]
  connectOrCreate?: Prisma.FinancialProjectionCreateOrConnectWithoutMonetizationStrategyInput | Prisma.FinancialProjectionCreateOrConnectWithoutMonetizationStrategyInput[]
  createMany?: Prisma.FinancialProjectionCreateManyMonetizationStrategyInputEnvelope
  connect?: Prisma.FinancialProjectionWhereUniqueInput | Prisma.FinancialProjectionWhereUniqueInput[]
}

export type FinancialProjectionUncheckedCreateNestedManyWithoutMonetizationStrategyInput = {
  create?: Prisma.XOR<Prisma.FinancialProjectionCreateWithoutMonetizationStrategyInput, Prisma.FinancialProjectionUncheckedCreateWithoutMonetizationStrategyInput> | Prisma.FinancialProjectionCreateWithoutMonetizationStrategyInput[] | Prisma.FinancialProjectionUncheckedCreateWithoutMonetizationStrategyInput[]
  connectOrCreate?: Prisma.FinancialProjectionCreateOrConnectWithoutMonetizationStrategyInput | Prisma.FinancialProjectionCreateOrConnectWithoutMonetizationStrategyInput[]
  createMany?: Prisma.FinancialProjectionCreateManyMonetizationStrategyInputEnvelope
  connect?: Prisma.FinancialProjectionWhereUniqueInput | Prisma.FinancialProjectionWhereUniqueInput[]
}

export type FinancialProjectionUpdateManyWithoutMonetizationStrategyNestedInput = {
  create?: Prisma.XOR<Prisma.FinancialProjectionCreateWithoutMonetizationStrategyInput, Prisma.FinancialProjectionUncheckedCreateWithoutMonetizationStrategyInput> | Prisma.FinancialProjectionCreateWithoutMonetizationStrategyInput[] | Prisma.FinancialProjectionUncheckedCreateWithoutMonetizationStrategyInput[]
  connectOrCreate?: Prisma.FinancialProjectionCreateOrConnectWithoutMonetizationStrategyInput | Prisma.FinancialProjectionCreateOrConnectWithoutMonetizationStrategyInput[]
  upsert?: Prisma.FinancialProjectionUpsertWithWhereUniqueWithoutMonetizationStrategyInput | Prisma.FinancialProjectionUpsertWithWhereUniqueWithoutMonetizationStrategyInput[]
  createMany?: Prisma.FinancialProjectionCreateManyMonetizationStrategyInputEnvelope
  set?: Prisma.FinancialProjectionWhereUniqueInput | Prisma.FinancialProjectionWhereUniqueInput[]
  disconnect?: Prisma.FinancialProjectionWhereUniqueInput | Prisma.FinancialProjectionWhereUniqueInput[]
  delete?: Prisma.FinancialProjectionWhereUniqueInput | Prisma.FinancialProjectionWhereUniqueInput[]
  connect?: Prisma.FinancialProjectionWhereUniqueInput | Prisma.FinancialProjectionWhereUniqueInput[]
  update?: Prisma.FinancialProjectionUpdateWithWhereUniqueWithoutMonetizationStrategyInput | Prisma.FinancialProjectionUpdateWithWhereUniqueWithoutMonetizationStrategyInput[]
  updateMany?: Prisma.FinancialProjectionUpdateManyWithWhereWithoutMonetizationStrategyInput | Prisma.FinancialProjectionUpdateManyWithWhereWithoutMonetizationStrategyInput[]
  deleteMany?: Prisma.FinancialProjectionScalarWhereInput | Prisma.FinancialProjectionScalarWhereInput[]
}

export type FinancialProjectionUncheckedUpdateManyWithoutMonetizationStrategyNestedInput = {
  create?: Prisma.XOR<Prisma.FinancialProjectionCreateWithoutMonetizationStrategyInput, Prisma.FinancialProjectionUncheckedCreateWithoutMonetizationStrategyInput> | Prisma.FinancialProjectionCreateWithoutMonetizationStrategyInput[] | Prisma.FinancialProjectionUncheckedCreateWithoutMonetizationStrategyInput[]
  connectOrCreate?: Prisma.FinancialProjectionCreateOrConnectWithoutMonetizationStrategyInput | Prisma.FinancialProjectionCreateOrConnectWithoutMonetizationStrategyInput[]
  upsert?: Prisma.FinancialProjectionUpsertWithWhereUniqueWithoutMonetizationStrategyInput | Prisma.FinancialProjectionUpsertWithWhereUniqueWithoutMonetizationStrategyInput[]
  createMany?: Prisma.FinancialProjectionCreateManyMonetizationStrategyInputEnvelope
  set?: Prisma.FinancialProjectionWhereUniqueInput | Prisma.FinancialProjectionWhereUniqueInput[]
  disconnect?: Prisma.FinancialProjectionWhereUniqueInput | Prisma.FinancialProjectionWhereUniqueInput[]
  delete?: Prisma.FinancialProjectionWhereUniqueInput | Prisma.FinancialProjectionWhereUniqueInput[]
  connect?: Prisma.FinancialProjectionWhereUniqueInput | Prisma.FinancialProjectionWhereUniqueInput[]
  update?: Prisma.FinancialProjectionUpdateWithWhereUniqueWithoutMonetizationStrategyInput | Prisma.FinancialProjectionUpdateWithWhereUniqueWithoutMonetizationStrategyInput[]
  updateMany?: Prisma.FinancialProjectionUpdateManyWithWhereWithoutMonetizationStrategyInput | Prisma.FinancialProjectionUpdateManyWithWhereWithoutMonetizationStrategyInput[]
  deleteMany?: Prisma.FinancialProjectionScalarWhereInput | Prisma.FinancialProjectionScalarWhereInput[]
}

export type FinancialProjectionCreateWithoutMonetizationStrategyInput = {
  id?: string
  year: number
  revenue: number
  costs: number
  netMargin: number
  revenueGrowth: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FinancialProjectionUncheckedCreateWithoutMonetizationStrategyInput = {
  id?: string
  year: number
  revenue: number
  costs: number
  netMargin: number
  revenueGrowth: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FinancialProjectionCreateOrConnectWithoutMonetizationStrategyInput = {
  where: Prisma.FinancialProjectionWhereUniqueInput
  create: Prisma.XOR<Prisma.FinancialProjectionCreateWithoutMonetizationStrategyInput, Prisma.FinancialProjectionUncheckedCreateWithoutMonetizationStrategyInput>
}

export type FinancialProjectionCreateManyMonetizationStrategyInputEnvelope = {
  data: Prisma.FinancialProjectionCreateManyMonetizationStrategyInput | Prisma.FinancialProjectionCreateManyMonetizationStrategyInput[]
  skipDuplicates?: boolean
}

export type FinancialProjectionUpsertWithWhereUniqueWithoutMonetizationStrategyInput = {
  where: Prisma.FinancialProjectionWhereUniqueInput
  update: Prisma.XOR<Prisma.FinancialProjectionUpdateWithoutMonetizationStrategyInput, Prisma.FinancialProjectionUncheckedUpdateWithoutMonetizationStrategyInput>
  create: Prisma.XOR<Prisma.FinancialProjectionCreateWithoutMonetizationStrategyInput, Prisma.FinancialProjectionUncheckedCreateWithoutMonetizationStrategyInput>
}

export type FinancialProjectionUpdateWithWhereUniqueWithoutMonetizationStrategyInput = {
  where: Prisma.FinancialProjectionWhereUniqueInput
  data: Prisma.XOR<Prisma.FinancialProjectionUpdateWithoutMonetizationStrategyInput, Prisma.FinancialProjectionUncheckedUpdateWithoutMonetizationStrategyInput>
}

export type FinancialProjectionUpdateManyWithWhereWithoutMonetizationStrategyInput = {
  where: Prisma.FinancialProjectionScalarWhereInput
  data: Prisma.XOR<Prisma.FinancialProjectionUpdateManyMutationInput, Prisma.FinancialProjectionUncheckedUpdateManyWithoutMonetizationStrategyInput>
}

export type FinancialProjectionScalarWhereInput = {
  AND?: Prisma.FinancialProjectionScalarWhereInput | Prisma.FinancialProjectionScalarWhereInput[]
  OR?: Prisma.FinancialProjectionScalarWhereInput[]
  NOT?: Prisma.FinancialProjectionScalarWhereInput | Prisma.FinancialProjectionScalarWhereInput[]
  id?: Prisma.StringFilter<"FinancialProjection"> | string
  year?: Prisma.IntFilter<"FinancialProjection"> | number
  revenue?: Prisma.FloatFilter<"FinancialProjection"> | number
  costs?: Prisma.FloatFilter<"FinancialProjection"> | number
  netMargin?: Prisma.FloatFilter<"FinancialProjection"> | number
  revenueGrowth?: Prisma.FloatFilter<"FinancialProjection"> | number
  monetizationStrategyId?: Prisma.StringFilter<"FinancialProjection"> | string
  createdAt?: Prisma.DateTimeFilter<"FinancialProjection"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FinancialProjection"> | Date | string
}

export type FinancialProjectionCreateManyMonetizationStrategyInput = {
  id?: string
  year: number
  revenue: number
  costs: number
  netMargin: number
  revenueGrowth: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FinancialProjectionUpdateWithoutMonetizationStrategyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  revenue?: Prisma.FloatFieldUpdateOperationsInput | number
  costs?: Prisma.FloatFieldUpdateOperationsInput | number
  netMargin?: Prisma.FloatFieldUpdateOperationsInput | number
  revenueGrowth?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FinancialProjectionUncheckedUpdateWithoutMonetizationStrategyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  revenue?: Prisma.FloatFieldUpdateOperationsInput | number
  costs?: Prisma.FloatFieldUpdateOperationsInput | number
  netMargin?: Prisma.FloatFieldUpdateOperationsInput | number
  revenueGrowth?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FinancialProjectionUncheckedUpdateManyWithoutMonetizationStrategyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.IntFieldUpdateOperationsInput | number
  revenue?: Prisma.FloatFieldUpdateOperationsInput | number
  costs?: Prisma.FloatFieldUpdateOperationsInput | number
  netMargin?: Prisma.FloatFieldUpdateOperationsInput | number
  revenueGrowth?: Prisma.FloatFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type FinancialProjectionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  year?: boolean
  revenue?: boolean
  costs?: boolean
  netMargin?: boolean
  revenueGrowth?: boolean
  monetizationStrategyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  monetizationStrategy?: boolean | Prisma.MonetizationStrategyDefaultArgs<ExtArgs>
}, ExtArgs["result"]["financialProjection"]>

export type FinancialProjectionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  year?: boolean
  revenue?: boolean
  costs?: boolean
  netMargin?: boolean
  revenueGrowth?: boolean
  monetizationStrategyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  monetizationStrategy?: boolean | Prisma.MonetizationStrategyDefaultArgs<ExtArgs>
}, ExtArgs["result"]["financialProjection"]>

export type FinancialProjectionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  year?: boolean
  revenue?: boolean
  costs?: boolean
  netMargin?: boolean
  revenueGrowth?: boolean
  monetizationStrategyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  monetizationStrategy?: boolean | Prisma.MonetizationStrategyDefaultArgs<ExtArgs>
}, ExtArgs["result"]["financialProjection"]>

export type FinancialProjectionSelectScalar = {
  id?: boolean
  year?: boolean
  revenue?: boolean
  costs?: boolean
  netMargin?: boolean
  revenueGrowth?: boolean
  monetizationStrategyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type FinancialProjectionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "year" | "revenue" | "costs" | "netMargin" | "revenueGrowth" | "monetizationStrategyId" | "createdAt" | "updatedAt", ExtArgs["result"]["financialProjection"]>
export type FinancialProjectionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  monetizationStrategy?: boolean | Prisma.MonetizationStrategyDefaultArgs<ExtArgs>
}
export type FinancialProjectionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  monetizationStrategy?: boolean | Prisma.MonetizationStrategyDefaultArgs<ExtArgs>
}
export type FinancialProjectionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  monetizationStrategy?: boolean | Prisma.MonetizationStrategyDefaultArgs<ExtArgs>
}

export type $FinancialProjectionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FinancialProjection"
  objects: {
    monetizationStrategy: Prisma.$MonetizationStrategyPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    year: number
    revenue: number
    costs: number
    netMargin: number
    revenueGrowth: number
    monetizationStrategyId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["financialProjection"]>
  composites: {}
}

export type FinancialProjectionGetPayload<S extends boolean | null | undefined | FinancialProjectionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FinancialProjectionPayload, S>

export type FinancialProjectionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FinancialProjectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FinancialProjectionCountAggregateInputType | true
  }

export interface FinancialProjectionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FinancialProjection'], meta: { name: 'FinancialProjection' } }
  /**
   * Find zero or one FinancialProjection that matches the filter.
   * @param {FinancialProjectionFindUniqueArgs} args - Arguments to find a FinancialProjection
   * @example
   * // Get one FinancialProjection
   * const financialProjection = await prisma.financialProjection.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FinancialProjectionFindUniqueArgs>(args: Prisma.SelectSubset<T, FinancialProjectionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FinancialProjectionClient<runtime.Types.Result.GetResult<Prisma.$FinancialProjectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FinancialProjection that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FinancialProjectionFindUniqueOrThrowArgs} args - Arguments to find a FinancialProjection
   * @example
   * // Get one FinancialProjection
   * const financialProjection = await prisma.financialProjection.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FinancialProjectionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FinancialProjectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FinancialProjectionClient<runtime.Types.Result.GetResult<Prisma.$FinancialProjectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FinancialProjection that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FinancialProjectionFindFirstArgs} args - Arguments to find a FinancialProjection
   * @example
   * // Get one FinancialProjection
   * const financialProjection = await prisma.financialProjection.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FinancialProjectionFindFirstArgs>(args?: Prisma.SelectSubset<T, FinancialProjectionFindFirstArgs<ExtArgs>>): Prisma.Prisma__FinancialProjectionClient<runtime.Types.Result.GetResult<Prisma.$FinancialProjectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FinancialProjection that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FinancialProjectionFindFirstOrThrowArgs} args - Arguments to find a FinancialProjection
   * @example
   * // Get one FinancialProjection
   * const financialProjection = await prisma.financialProjection.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FinancialProjectionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FinancialProjectionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FinancialProjectionClient<runtime.Types.Result.GetResult<Prisma.$FinancialProjectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FinancialProjections that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FinancialProjectionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FinancialProjections
   * const financialProjections = await prisma.financialProjection.findMany()
   * 
   * // Get first 10 FinancialProjections
   * const financialProjections = await prisma.financialProjection.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const financialProjectionWithIdOnly = await prisma.financialProjection.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FinancialProjectionFindManyArgs>(args?: Prisma.SelectSubset<T, FinancialProjectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FinancialProjectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FinancialProjection.
   * @param {FinancialProjectionCreateArgs} args - Arguments to create a FinancialProjection.
   * @example
   * // Create one FinancialProjection
   * const FinancialProjection = await prisma.financialProjection.create({
   *   data: {
   *     // ... data to create a FinancialProjection
   *   }
   * })
   * 
   */
  create<T extends FinancialProjectionCreateArgs>(args: Prisma.SelectSubset<T, FinancialProjectionCreateArgs<ExtArgs>>): Prisma.Prisma__FinancialProjectionClient<runtime.Types.Result.GetResult<Prisma.$FinancialProjectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FinancialProjections.
   * @param {FinancialProjectionCreateManyArgs} args - Arguments to create many FinancialProjections.
   * @example
   * // Create many FinancialProjections
   * const financialProjection = await prisma.financialProjection.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FinancialProjectionCreateManyArgs>(args?: Prisma.SelectSubset<T, FinancialProjectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FinancialProjections and returns the data saved in the database.
   * @param {FinancialProjectionCreateManyAndReturnArgs} args - Arguments to create many FinancialProjections.
   * @example
   * // Create many FinancialProjections
   * const financialProjection = await prisma.financialProjection.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FinancialProjections and only return the `id`
   * const financialProjectionWithIdOnly = await prisma.financialProjection.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FinancialProjectionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FinancialProjectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FinancialProjectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FinancialProjection.
   * @param {FinancialProjectionDeleteArgs} args - Arguments to delete one FinancialProjection.
   * @example
   * // Delete one FinancialProjection
   * const FinancialProjection = await prisma.financialProjection.delete({
   *   where: {
   *     // ... filter to delete one FinancialProjection
   *   }
   * })
   * 
   */
  delete<T extends FinancialProjectionDeleteArgs>(args: Prisma.SelectSubset<T, FinancialProjectionDeleteArgs<ExtArgs>>): Prisma.Prisma__FinancialProjectionClient<runtime.Types.Result.GetResult<Prisma.$FinancialProjectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FinancialProjection.
   * @param {FinancialProjectionUpdateArgs} args - Arguments to update one FinancialProjection.
   * @example
   * // Update one FinancialProjection
   * const financialProjection = await prisma.financialProjection.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FinancialProjectionUpdateArgs>(args: Prisma.SelectSubset<T, FinancialProjectionUpdateArgs<ExtArgs>>): Prisma.Prisma__FinancialProjectionClient<runtime.Types.Result.GetResult<Prisma.$FinancialProjectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FinancialProjections.
   * @param {FinancialProjectionDeleteManyArgs} args - Arguments to filter FinancialProjections to delete.
   * @example
   * // Delete a few FinancialProjections
   * const { count } = await prisma.financialProjection.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FinancialProjectionDeleteManyArgs>(args?: Prisma.SelectSubset<T, FinancialProjectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FinancialProjections.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FinancialProjectionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FinancialProjections
   * const financialProjection = await prisma.financialProjection.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FinancialProjectionUpdateManyArgs>(args: Prisma.SelectSubset<T, FinancialProjectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FinancialProjections and returns the data updated in the database.
   * @param {FinancialProjectionUpdateManyAndReturnArgs} args - Arguments to update many FinancialProjections.
   * @example
   * // Update many FinancialProjections
   * const financialProjection = await prisma.financialProjection.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FinancialProjections and only return the `id`
   * const financialProjectionWithIdOnly = await prisma.financialProjection.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FinancialProjectionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FinancialProjectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FinancialProjectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FinancialProjection.
   * @param {FinancialProjectionUpsertArgs} args - Arguments to update or create a FinancialProjection.
   * @example
   * // Update or create a FinancialProjection
   * const financialProjection = await prisma.financialProjection.upsert({
   *   create: {
   *     // ... data to create a FinancialProjection
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FinancialProjection we want to update
   *   }
   * })
   */
  upsert<T extends FinancialProjectionUpsertArgs>(args: Prisma.SelectSubset<T, FinancialProjectionUpsertArgs<ExtArgs>>): Prisma.Prisma__FinancialProjectionClient<runtime.Types.Result.GetResult<Prisma.$FinancialProjectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FinancialProjections.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FinancialProjectionCountArgs} args - Arguments to filter FinancialProjections to count.
   * @example
   * // Count the number of FinancialProjections
   * const count = await prisma.financialProjection.count({
   *   where: {
   *     // ... the filter for the FinancialProjections we want to count
   *   }
   * })
  **/
  count<T extends FinancialProjectionCountArgs>(
    args?: Prisma.Subset<T, FinancialProjectionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FinancialProjectionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FinancialProjection.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FinancialProjectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FinancialProjectionAggregateArgs>(args: Prisma.Subset<T, FinancialProjectionAggregateArgs>): Prisma.PrismaPromise<GetFinancialProjectionAggregateType<T>>

  /**
   * Group by FinancialProjection.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FinancialProjectionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FinancialProjectionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FinancialProjectionGroupByArgs['orderBy'] }
      : { orderBy?: FinancialProjectionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FinancialProjectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFinancialProjectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FinancialProjection model
 */
readonly fields: FinancialProjectionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FinancialProjection.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FinancialProjectionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  monetizationStrategy<T extends Prisma.MonetizationStrategyDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MonetizationStrategyDefaultArgs<ExtArgs>>): Prisma.Prisma__MonetizationStrategyClient<runtime.Types.Result.GetResult<Prisma.$MonetizationStrategyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FinancialProjection model
 */
export interface FinancialProjectionFieldRefs {
  readonly id: Prisma.FieldRef<"FinancialProjection", 'String'>
  readonly year: Prisma.FieldRef<"FinancialProjection", 'Int'>
  readonly revenue: Prisma.FieldRef<"FinancialProjection", 'Float'>
  readonly costs: Prisma.FieldRef<"FinancialProjection", 'Float'>
  readonly netMargin: Prisma.FieldRef<"FinancialProjection", 'Float'>
  readonly revenueGrowth: Prisma.FieldRef<"FinancialProjection", 'Float'>
  readonly monetizationStrategyId: Prisma.FieldRef<"FinancialProjection", 'String'>
  readonly createdAt: Prisma.FieldRef<"FinancialProjection", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"FinancialProjection", 'DateTime'>
}
    

// Custom InputTypes
/**
 * FinancialProjection findUnique
 */
export type FinancialProjectionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FinancialProjection
   */
  select?: Prisma.FinancialProjectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FinancialProjection
   */
  omit?: Prisma.FinancialProjectionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FinancialProjectionInclude<ExtArgs> | null
  /**
   * Filter, which FinancialProjection to fetch.
   */
  where: Prisma.FinancialProjectionWhereUniqueInput
}

/**
 * FinancialProjection findUniqueOrThrow
 */
export type FinancialProjectionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FinancialProjection
   */
  select?: Prisma.FinancialProjectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FinancialProjection
   */
  omit?: Prisma.FinancialProjectionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FinancialProjectionInclude<ExtArgs> | null
  /**
   * Filter, which FinancialProjection to fetch.
   */
  where: Prisma.FinancialProjectionWhereUniqueInput
}

/**
 * FinancialProjection findFirst
 */
export type FinancialProjectionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FinancialProjection
   */
  select?: Prisma.FinancialProjectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FinancialProjection
   */
  omit?: Prisma.FinancialProjectionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FinancialProjectionInclude<ExtArgs> | null
  /**
   * Filter, which FinancialProjection to fetch.
   */
  where?: Prisma.FinancialProjectionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FinancialProjections to fetch.
   */
  orderBy?: Prisma.FinancialProjectionOrderByWithRelationInput | Prisma.FinancialProjectionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FinancialProjections.
   */
  cursor?: Prisma.FinancialProjectionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FinancialProjections from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FinancialProjections.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FinancialProjections.
   */
  distinct?: Prisma.FinancialProjectionScalarFieldEnum | Prisma.FinancialProjectionScalarFieldEnum[]
}

/**
 * FinancialProjection findFirstOrThrow
 */
export type FinancialProjectionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FinancialProjection
   */
  select?: Prisma.FinancialProjectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FinancialProjection
   */
  omit?: Prisma.FinancialProjectionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FinancialProjectionInclude<ExtArgs> | null
  /**
   * Filter, which FinancialProjection to fetch.
   */
  where?: Prisma.FinancialProjectionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FinancialProjections to fetch.
   */
  orderBy?: Prisma.FinancialProjectionOrderByWithRelationInput | Prisma.FinancialProjectionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FinancialProjections.
   */
  cursor?: Prisma.FinancialProjectionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FinancialProjections from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FinancialProjections.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FinancialProjections.
   */
  distinct?: Prisma.FinancialProjectionScalarFieldEnum | Prisma.FinancialProjectionScalarFieldEnum[]
}

/**
 * FinancialProjection findMany
 */
export type FinancialProjectionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FinancialProjection
   */
  select?: Prisma.FinancialProjectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FinancialProjection
   */
  omit?: Prisma.FinancialProjectionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FinancialProjectionInclude<ExtArgs> | null
  /**
   * Filter, which FinancialProjections to fetch.
   */
  where?: Prisma.FinancialProjectionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FinancialProjections to fetch.
   */
  orderBy?: Prisma.FinancialProjectionOrderByWithRelationInput | Prisma.FinancialProjectionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FinancialProjections.
   */
  cursor?: Prisma.FinancialProjectionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FinancialProjections from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FinancialProjections.
   */
  skip?: number
  distinct?: Prisma.FinancialProjectionScalarFieldEnum | Prisma.FinancialProjectionScalarFieldEnum[]
}

/**
 * FinancialProjection create
 */
export type FinancialProjectionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FinancialProjection
   */
  select?: Prisma.FinancialProjectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FinancialProjection
   */
  omit?: Prisma.FinancialProjectionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FinancialProjectionInclude<ExtArgs> | null
  /**
   * The data needed to create a FinancialProjection.
   */
  data: Prisma.XOR<Prisma.FinancialProjectionCreateInput, Prisma.FinancialProjectionUncheckedCreateInput>
}

/**
 * FinancialProjection createMany
 */
export type FinancialProjectionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FinancialProjections.
   */
  data: Prisma.FinancialProjectionCreateManyInput | Prisma.FinancialProjectionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FinancialProjection createManyAndReturn
 */
export type FinancialProjectionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FinancialProjection
   */
  select?: Prisma.FinancialProjectionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FinancialProjection
   */
  omit?: Prisma.FinancialProjectionOmit<ExtArgs> | null
  /**
   * The data used to create many FinancialProjections.
   */
  data: Prisma.FinancialProjectionCreateManyInput | Prisma.FinancialProjectionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FinancialProjectionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FinancialProjection update
 */
export type FinancialProjectionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FinancialProjection
   */
  select?: Prisma.FinancialProjectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FinancialProjection
   */
  omit?: Prisma.FinancialProjectionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FinancialProjectionInclude<ExtArgs> | null
  /**
   * The data needed to update a FinancialProjection.
   */
  data: Prisma.XOR<Prisma.FinancialProjectionUpdateInput, Prisma.FinancialProjectionUncheckedUpdateInput>
  /**
   * Choose, which FinancialProjection to update.
   */
  where: Prisma.FinancialProjectionWhereUniqueInput
}

/**
 * FinancialProjection updateMany
 */
export type FinancialProjectionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FinancialProjections.
   */
  data: Prisma.XOR<Prisma.FinancialProjectionUpdateManyMutationInput, Prisma.FinancialProjectionUncheckedUpdateManyInput>
  /**
   * Filter which FinancialProjections to update
   */
  where?: Prisma.FinancialProjectionWhereInput
  /**
   * Limit how many FinancialProjections to update.
   */
  limit?: number
}

/**
 * FinancialProjection updateManyAndReturn
 */
export type FinancialProjectionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FinancialProjection
   */
  select?: Prisma.FinancialProjectionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FinancialProjection
   */
  omit?: Prisma.FinancialProjectionOmit<ExtArgs> | null
  /**
   * The data used to update FinancialProjections.
   */
  data: Prisma.XOR<Prisma.FinancialProjectionUpdateManyMutationInput, Prisma.FinancialProjectionUncheckedUpdateManyInput>
  /**
   * Filter which FinancialProjections to update
   */
  where?: Prisma.FinancialProjectionWhereInput
  /**
   * Limit how many FinancialProjections to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FinancialProjectionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FinancialProjection upsert
 */
export type FinancialProjectionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FinancialProjection
   */
  select?: Prisma.FinancialProjectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FinancialProjection
   */
  omit?: Prisma.FinancialProjectionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FinancialProjectionInclude<ExtArgs> | null
  /**
   * The filter to search for the FinancialProjection to update in case it exists.
   */
  where: Prisma.FinancialProjectionWhereUniqueInput
  /**
   * In case the FinancialProjection found by the `where` argument doesn't exist, create a new FinancialProjection with this data.
   */
  create: Prisma.XOR<Prisma.FinancialProjectionCreateInput, Prisma.FinancialProjectionUncheckedCreateInput>
  /**
   * In case the FinancialProjection was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FinancialProjectionUpdateInput, Prisma.FinancialProjectionUncheckedUpdateInput>
}

/**
 * FinancialProjection delete
 */
export type FinancialProjectionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FinancialProjection
   */
  select?: Prisma.FinancialProjectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FinancialProjection
   */
  omit?: Prisma.FinancialProjectionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FinancialProjectionInclude<ExtArgs> | null
  /**
   * Filter which FinancialProjection to delete.
   */
  where: Prisma.FinancialProjectionWhereUniqueInput
}

/**
 * FinancialProjection deleteMany
 */
export type FinancialProjectionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FinancialProjections to delete
   */
  where?: Prisma.FinancialProjectionWhereInput
  /**
   * Limit how many FinancialProjections to delete.
   */
  limit?: number
}

/**
 * FinancialProjection without action
 */
export type FinancialProjectionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FinancialProjection
   */
  select?: Prisma.FinancialProjectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FinancialProjection
   */
  omit?: Prisma.FinancialProjectionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FinancialProjectionInclude<ExtArgs> | null
}
