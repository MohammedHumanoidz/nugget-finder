
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MarketGap` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MarketGap
 * 
 */
export type MarketGapModel = runtime.Types.Result.DefaultSelection<Prisma.$MarketGapPayload>

export type AggregateMarketGap = {
  _count: MarketGapCountAggregateOutputType | null
  _min: MarketGapMinAggregateOutputType | null
  _max: MarketGapMaxAggregateOutputType | null
}

export type MarketGapMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  impact: string | null
  target: string | null
  opportunity: string | null
  createdAt: Date | null
  updatedAt: Date | null
  dailyIdeaId: string | null
}

export type MarketGapMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  impact: string | null
  target: string | null
  opportunity: string | null
  createdAt: Date | null
  updatedAt: Date | null
  dailyIdeaId: string | null
}

export type MarketGapCountAggregateOutputType = {
  id: number
  title: number
  description: number
  impact: number
  target: number
  opportunity: number
  createdAt: number
  updatedAt: number
  dailyIdeaId: number
  _all: number
}


export type MarketGapMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  impact?: true
  target?: true
  opportunity?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
}

export type MarketGapMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  impact?: true
  target?: true
  opportunity?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
}

export type MarketGapCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  impact?: true
  target?: true
  opportunity?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
  _all?: true
}

export type MarketGapAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MarketGap to aggregate.
   */
  where?: Prisma.MarketGapWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MarketGaps to fetch.
   */
  orderBy?: Prisma.MarketGapOrderByWithRelationInput | Prisma.MarketGapOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MarketGapWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MarketGaps from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MarketGaps.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MarketGaps
  **/
  _count?: true | MarketGapCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MarketGapMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MarketGapMaxAggregateInputType
}

export type GetMarketGapAggregateType<T extends MarketGapAggregateArgs> = {
      [P in keyof T & keyof AggregateMarketGap]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMarketGap[P]>
    : Prisma.GetScalarType<T[P], AggregateMarketGap[P]>
}




export type MarketGapGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MarketGapWhereInput
  orderBy?: Prisma.MarketGapOrderByWithAggregationInput | Prisma.MarketGapOrderByWithAggregationInput[]
  by: Prisma.MarketGapScalarFieldEnum[] | Prisma.MarketGapScalarFieldEnum
  having?: Prisma.MarketGapScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MarketGapCountAggregateInputType | true
  _min?: MarketGapMinAggregateInputType
  _max?: MarketGapMaxAggregateInputType
}

export type MarketGapGroupByOutputType = {
  id: string
  title: string
  description: string
  impact: string
  target: string
  opportunity: string
  createdAt: Date
  updatedAt: Date
  dailyIdeaId: string
  _count: MarketGapCountAggregateOutputType | null
  _min: MarketGapMinAggregateOutputType | null
  _max: MarketGapMaxAggregateOutputType | null
}

type GetMarketGapGroupByPayload<T extends MarketGapGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MarketGapGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MarketGapGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MarketGapGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MarketGapGroupByOutputType[P]>
      }
    >
  > 



export type MarketGapWhereInput = {
  AND?: Prisma.MarketGapWhereInput | Prisma.MarketGapWhereInput[]
  OR?: Prisma.MarketGapWhereInput[]
  NOT?: Prisma.MarketGapWhereInput | Prisma.MarketGapWhereInput[]
  id?: Prisma.StringFilter<"MarketGap"> | string
  title?: Prisma.StringFilter<"MarketGap"> | string
  description?: Prisma.StringFilter<"MarketGap"> | string
  impact?: Prisma.StringFilter<"MarketGap"> | string
  target?: Prisma.StringFilter<"MarketGap"> | string
  opportunity?: Prisma.StringFilter<"MarketGap"> | string
  createdAt?: Prisma.DateTimeFilter<"MarketGap"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MarketGap"> | Date | string
  dailyIdeaId?: Prisma.StringFilter<"MarketGap"> | string
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaScalarRelationFilter, Prisma.DailyIdeaWhereInput>
}

export type MarketGapOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  impact?: Prisma.SortOrder
  target?: Prisma.SortOrder
  opportunity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
  dailyIdea?: Prisma.DailyIdeaOrderByWithRelationInput
}

export type MarketGapWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  dailyIdeaId?: string
  AND?: Prisma.MarketGapWhereInput | Prisma.MarketGapWhereInput[]
  OR?: Prisma.MarketGapWhereInput[]
  NOT?: Prisma.MarketGapWhereInput | Prisma.MarketGapWhereInput[]
  title?: Prisma.StringFilter<"MarketGap"> | string
  description?: Prisma.StringFilter<"MarketGap"> | string
  impact?: Prisma.StringFilter<"MarketGap"> | string
  target?: Prisma.StringFilter<"MarketGap"> | string
  opportunity?: Prisma.StringFilter<"MarketGap"> | string
  createdAt?: Prisma.DateTimeFilter<"MarketGap"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MarketGap"> | Date | string
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaScalarRelationFilter, Prisma.DailyIdeaWhereInput>
}, "id" | "dailyIdeaId">

export type MarketGapOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  impact?: Prisma.SortOrder
  target?: Prisma.SortOrder
  opportunity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
  _count?: Prisma.MarketGapCountOrderByAggregateInput
  _max?: Prisma.MarketGapMaxOrderByAggregateInput
  _min?: Prisma.MarketGapMinOrderByAggregateInput
}

export type MarketGapScalarWhereWithAggregatesInput = {
  AND?: Prisma.MarketGapScalarWhereWithAggregatesInput | Prisma.MarketGapScalarWhereWithAggregatesInput[]
  OR?: Prisma.MarketGapScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MarketGapScalarWhereWithAggregatesInput | Prisma.MarketGapScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MarketGap"> | string
  title?: Prisma.StringWithAggregatesFilter<"MarketGap"> | string
  description?: Prisma.StringWithAggregatesFilter<"MarketGap"> | string
  impact?: Prisma.StringWithAggregatesFilter<"MarketGap"> | string
  target?: Prisma.StringWithAggregatesFilter<"MarketGap"> | string
  opportunity?: Prisma.StringWithAggregatesFilter<"MarketGap"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MarketGap"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MarketGap"> | Date | string
  dailyIdeaId?: Prisma.StringWithAggregatesFilter<"MarketGap"> | string
}

export type MarketGapCreateInput = {
  id?: string
  title: string
  description: string
  impact: string
  target: string
  opportunity: string
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdea: Prisma.DailyIdeaCreateNestedOneWithoutMarketGapInput
}

export type MarketGapUncheckedCreateInput = {
  id?: string
  title: string
  description: string
  impact: string
  target: string
  opportunity: string
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdeaId: string
}

export type MarketGapUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  impact?: Prisma.StringFieldUpdateOperationsInput | string
  target?: Prisma.StringFieldUpdateOperationsInput | string
  opportunity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdea?: Prisma.DailyIdeaUpdateOneRequiredWithoutMarketGapNestedInput
}

export type MarketGapUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  impact?: Prisma.StringFieldUpdateOperationsInput | string
  target?: Prisma.StringFieldUpdateOperationsInput | string
  opportunity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdeaId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MarketGapCreateManyInput = {
  id?: string
  title: string
  description: string
  impact: string
  target: string
  opportunity: string
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdeaId: string
}

export type MarketGapUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  impact?: Prisma.StringFieldUpdateOperationsInput | string
  target?: Prisma.StringFieldUpdateOperationsInput | string
  opportunity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MarketGapUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  impact?: Prisma.StringFieldUpdateOperationsInput | string
  target?: Prisma.StringFieldUpdateOperationsInput | string
  opportunity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdeaId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MarketGapCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  impact?: Prisma.SortOrder
  target?: Prisma.SortOrder
  opportunity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type MarketGapMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  impact?: Prisma.SortOrder
  target?: Prisma.SortOrder
  opportunity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type MarketGapMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  impact?: Prisma.SortOrder
  target?: Prisma.SortOrder
  opportunity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type MarketGapNullableScalarRelationFilter = {
  is?: Prisma.MarketGapWhereInput | null
  isNot?: Prisma.MarketGapWhereInput | null
}

export type MarketGapCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.MarketGapCreateWithoutDailyIdeaInput, Prisma.MarketGapUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.MarketGapCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.MarketGapWhereUniqueInput
}

export type MarketGapUncheckedCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.MarketGapCreateWithoutDailyIdeaInput, Prisma.MarketGapUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.MarketGapCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.MarketGapWhereUniqueInput
}

export type MarketGapUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.MarketGapCreateWithoutDailyIdeaInput, Prisma.MarketGapUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.MarketGapCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.MarketGapUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.MarketGapWhereInput | boolean
  delete?: Prisma.MarketGapWhereInput | boolean
  connect?: Prisma.MarketGapWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MarketGapUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.MarketGapUpdateWithoutDailyIdeaInput>, Prisma.MarketGapUncheckedUpdateWithoutDailyIdeaInput>
}

export type MarketGapUncheckedUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.MarketGapCreateWithoutDailyIdeaInput, Prisma.MarketGapUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.MarketGapCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.MarketGapUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.MarketGapWhereInput | boolean
  delete?: Prisma.MarketGapWhereInput | boolean
  connect?: Prisma.MarketGapWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MarketGapUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.MarketGapUpdateWithoutDailyIdeaInput>, Prisma.MarketGapUncheckedUpdateWithoutDailyIdeaInput>
}

export type MarketGapCreateWithoutDailyIdeaInput = {
  id?: string
  title: string
  description: string
  impact: string
  target: string
  opportunity: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MarketGapUncheckedCreateWithoutDailyIdeaInput = {
  id?: string
  title: string
  description: string
  impact: string
  target: string
  opportunity: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MarketGapCreateOrConnectWithoutDailyIdeaInput = {
  where: Prisma.MarketGapWhereUniqueInput
  create: Prisma.XOR<Prisma.MarketGapCreateWithoutDailyIdeaInput, Prisma.MarketGapUncheckedCreateWithoutDailyIdeaInput>
}

export type MarketGapUpsertWithoutDailyIdeaInput = {
  update: Prisma.XOR<Prisma.MarketGapUpdateWithoutDailyIdeaInput, Prisma.MarketGapUncheckedUpdateWithoutDailyIdeaInput>
  create: Prisma.XOR<Prisma.MarketGapCreateWithoutDailyIdeaInput, Prisma.MarketGapUncheckedCreateWithoutDailyIdeaInput>
  where?: Prisma.MarketGapWhereInput
}

export type MarketGapUpdateToOneWithWhereWithoutDailyIdeaInput = {
  where?: Prisma.MarketGapWhereInput
  data: Prisma.XOR<Prisma.MarketGapUpdateWithoutDailyIdeaInput, Prisma.MarketGapUncheckedUpdateWithoutDailyIdeaInput>
}

export type MarketGapUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  impact?: Prisma.StringFieldUpdateOperationsInput | string
  target?: Prisma.StringFieldUpdateOperationsInput | string
  opportunity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MarketGapUncheckedUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  impact?: Prisma.StringFieldUpdateOperationsInput | string
  target?: Prisma.StringFieldUpdateOperationsInput | string
  opportunity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MarketGapSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  impact?: boolean
  target?: boolean
  opportunity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["marketGap"]>

export type MarketGapSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  impact?: boolean
  target?: boolean
  opportunity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["marketGap"]>

export type MarketGapSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  impact?: boolean
  target?: boolean
  opportunity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["marketGap"]>

export type MarketGapSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  impact?: boolean
  target?: boolean
  opportunity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
}

export type MarketGapOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "impact" | "target" | "opportunity" | "createdAt" | "updatedAt" | "dailyIdeaId", ExtArgs["result"]["marketGap"]>
export type MarketGapInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}
export type MarketGapIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}
export type MarketGapIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}

export type $MarketGapPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MarketGap"
  objects: {
    dailyIdea: Prisma.$DailyIdeaPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    description: string
    impact: string
    target: string
    opportunity: string
    createdAt: Date
    updatedAt: Date
    dailyIdeaId: string
  }, ExtArgs["result"]["marketGap"]>
  composites: {}
}

export type MarketGapGetPayload<S extends boolean | null | undefined | MarketGapDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MarketGapPayload, S>

export type MarketGapCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MarketGapFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MarketGapCountAggregateInputType | true
  }

export interface MarketGapDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MarketGap'], meta: { name: 'MarketGap' } }
  /**
   * Find zero or one MarketGap that matches the filter.
   * @param {MarketGapFindUniqueArgs} args - Arguments to find a MarketGap
   * @example
   * // Get one MarketGap
   * const marketGap = await prisma.marketGap.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MarketGapFindUniqueArgs>(args: Prisma.SelectSubset<T, MarketGapFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MarketGapClient<runtime.Types.Result.GetResult<Prisma.$MarketGapPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MarketGap that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MarketGapFindUniqueOrThrowArgs} args - Arguments to find a MarketGap
   * @example
   * // Get one MarketGap
   * const marketGap = await prisma.marketGap.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MarketGapFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MarketGapFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MarketGapClient<runtime.Types.Result.GetResult<Prisma.$MarketGapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MarketGap that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketGapFindFirstArgs} args - Arguments to find a MarketGap
   * @example
   * // Get one MarketGap
   * const marketGap = await prisma.marketGap.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MarketGapFindFirstArgs>(args?: Prisma.SelectSubset<T, MarketGapFindFirstArgs<ExtArgs>>): Prisma.Prisma__MarketGapClient<runtime.Types.Result.GetResult<Prisma.$MarketGapPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MarketGap that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketGapFindFirstOrThrowArgs} args - Arguments to find a MarketGap
   * @example
   * // Get one MarketGap
   * const marketGap = await prisma.marketGap.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MarketGapFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MarketGapFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MarketGapClient<runtime.Types.Result.GetResult<Prisma.$MarketGapPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MarketGaps that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketGapFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MarketGaps
   * const marketGaps = await prisma.marketGap.findMany()
   * 
   * // Get first 10 MarketGaps
   * const marketGaps = await prisma.marketGap.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const marketGapWithIdOnly = await prisma.marketGap.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MarketGapFindManyArgs>(args?: Prisma.SelectSubset<T, MarketGapFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MarketGapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MarketGap.
   * @param {MarketGapCreateArgs} args - Arguments to create a MarketGap.
   * @example
   * // Create one MarketGap
   * const MarketGap = await prisma.marketGap.create({
   *   data: {
   *     // ... data to create a MarketGap
   *   }
   * })
   * 
   */
  create<T extends MarketGapCreateArgs>(args: Prisma.SelectSubset<T, MarketGapCreateArgs<ExtArgs>>): Prisma.Prisma__MarketGapClient<runtime.Types.Result.GetResult<Prisma.$MarketGapPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MarketGaps.
   * @param {MarketGapCreateManyArgs} args - Arguments to create many MarketGaps.
   * @example
   * // Create many MarketGaps
   * const marketGap = await prisma.marketGap.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MarketGapCreateManyArgs>(args?: Prisma.SelectSubset<T, MarketGapCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MarketGaps and returns the data saved in the database.
   * @param {MarketGapCreateManyAndReturnArgs} args - Arguments to create many MarketGaps.
   * @example
   * // Create many MarketGaps
   * const marketGap = await prisma.marketGap.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MarketGaps and only return the `id`
   * const marketGapWithIdOnly = await prisma.marketGap.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MarketGapCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MarketGapCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MarketGapPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MarketGap.
   * @param {MarketGapDeleteArgs} args - Arguments to delete one MarketGap.
   * @example
   * // Delete one MarketGap
   * const MarketGap = await prisma.marketGap.delete({
   *   where: {
   *     // ... filter to delete one MarketGap
   *   }
   * })
   * 
   */
  delete<T extends MarketGapDeleteArgs>(args: Prisma.SelectSubset<T, MarketGapDeleteArgs<ExtArgs>>): Prisma.Prisma__MarketGapClient<runtime.Types.Result.GetResult<Prisma.$MarketGapPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MarketGap.
   * @param {MarketGapUpdateArgs} args - Arguments to update one MarketGap.
   * @example
   * // Update one MarketGap
   * const marketGap = await prisma.marketGap.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MarketGapUpdateArgs>(args: Prisma.SelectSubset<T, MarketGapUpdateArgs<ExtArgs>>): Prisma.Prisma__MarketGapClient<runtime.Types.Result.GetResult<Prisma.$MarketGapPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MarketGaps.
   * @param {MarketGapDeleteManyArgs} args - Arguments to filter MarketGaps to delete.
   * @example
   * // Delete a few MarketGaps
   * const { count } = await prisma.marketGap.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MarketGapDeleteManyArgs>(args?: Prisma.SelectSubset<T, MarketGapDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MarketGaps.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketGapUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MarketGaps
   * const marketGap = await prisma.marketGap.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MarketGapUpdateManyArgs>(args: Prisma.SelectSubset<T, MarketGapUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MarketGaps and returns the data updated in the database.
   * @param {MarketGapUpdateManyAndReturnArgs} args - Arguments to update many MarketGaps.
   * @example
   * // Update many MarketGaps
   * const marketGap = await prisma.marketGap.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MarketGaps and only return the `id`
   * const marketGapWithIdOnly = await prisma.marketGap.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MarketGapUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MarketGapUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MarketGapPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MarketGap.
   * @param {MarketGapUpsertArgs} args - Arguments to update or create a MarketGap.
   * @example
   * // Update or create a MarketGap
   * const marketGap = await prisma.marketGap.upsert({
   *   create: {
   *     // ... data to create a MarketGap
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MarketGap we want to update
   *   }
   * })
   */
  upsert<T extends MarketGapUpsertArgs>(args: Prisma.SelectSubset<T, MarketGapUpsertArgs<ExtArgs>>): Prisma.Prisma__MarketGapClient<runtime.Types.Result.GetResult<Prisma.$MarketGapPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MarketGaps.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketGapCountArgs} args - Arguments to filter MarketGaps to count.
   * @example
   * // Count the number of MarketGaps
   * const count = await prisma.marketGap.count({
   *   where: {
   *     // ... the filter for the MarketGaps we want to count
   *   }
   * })
  **/
  count<T extends MarketGapCountArgs>(
    args?: Prisma.Subset<T, MarketGapCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MarketGapCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MarketGap.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketGapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MarketGapAggregateArgs>(args: Prisma.Subset<T, MarketGapAggregateArgs>): Prisma.PrismaPromise<GetMarketGapAggregateType<T>>

  /**
   * Group by MarketGap.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketGapGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MarketGapGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MarketGapGroupByArgs['orderBy'] }
      : { orderBy?: MarketGapGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MarketGapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarketGapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MarketGap model
 */
readonly fields: MarketGapFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MarketGap.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MarketGapClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  dailyIdea<T extends Prisma.DailyIdeaDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdeaDefaultArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MarketGap model
 */
export interface MarketGapFieldRefs {
  readonly id: Prisma.FieldRef<"MarketGap", 'String'>
  readonly title: Prisma.FieldRef<"MarketGap", 'String'>
  readonly description: Prisma.FieldRef<"MarketGap", 'String'>
  readonly impact: Prisma.FieldRef<"MarketGap", 'String'>
  readonly target: Prisma.FieldRef<"MarketGap", 'String'>
  readonly opportunity: Prisma.FieldRef<"MarketGap", 'String'>
  readonly createdAt: Prisma.FieldRef<"MarketGap", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MarketGap", 'DateTime'>
  readonly dailyIdeaId: Prisma.FieldRef<"MarketGap", 'String'>
}
    

// Custom InputTypes
/**
 * MarketGap findUnique
 */
export type MarketGapFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketGap
   */
  select?: Prisma.MarketGapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketGap
   */
  omit?: Prisma.MarketGapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketGapInclude<ExtArgs> | null
  /**
   * Filter, which MarketGap to fetch.
   */
  where: Prisma.MarketGapWhereUniqueInput
}

/**
 * MarketGap findUniqueOrThrow
 */
export type MarketGapFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketGap
   */
  select?: Prisma.MarketGapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketGap
   */
  omit?: Prisma.MarketGapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketGapInclude<ExtArgs> | null
  /**
   * Filter, which MarketGap to fetch.
   */
  where: Prisma.MarketGapWhereUniqueInput
}

/**
 * MarketGap findFirst
 */
export type MarketGapFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketGap
   */
  select?: Prisma.MarketGapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketGap
   */
  omit?: Prisma.MarketGapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketGapInclude<ExtArgs> | null
  /**
   * Filter, which MarketGap to fetch.
   */
  where?: Prisma.MarketGapWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MarketGaps to fetch.
   */
  orderBy?: Prisma.MarketGapOrderByWithRelationInput | Prisma.MarketGapOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MarketGaps.
   */
  cursor?: Prisma.MarketGapWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MarketGaps from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MarketGaps.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MarketGaps.
   */
  distinct?: Prisma.MarketGapScalarFieldEnum | Prisma.MarketGapScalarFieldEnum[]
}

/**
 * MarketGap findFirstOrThrow
 */
export type MarketGapFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketGap
   */
  select?: Prisma.MarketGapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketGap
   */
  omit?: Prisma.MarketGapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketGapInclude<ExtArgs> | null
  /**
   * Filter, which MarketGap to fetch.
   */
  where?: Prisma.MarketGapWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MarketGaps to fetch.
   */
  orderBy?: Prisma.MarketGapOrderByWithRelationInput | Prisma.MarketGapOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MarketGaps.
   */
  cursor?: Prisma.MarketGapWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MarketGaps from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MarketGaps.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MarketGaps.
   */
  distinct?: Prisma.MarketGapScalarFieldEnum | Prisma.MarketGapScalarFieldEnum[]
}

/**
 * MarketGap findMany
 */
export type MarketGapFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketGap
   */
  select?: Prisma.MarketGapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketGap
   */
  omit?: Prisma.MarketGapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketGapInclude<ExtArgs> | null
  /**
   * Filter, which MarketGaps to fetch.
   */
  where?: Prisma.MarketGapWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MarketGaps to fetch.
   */
  orderBy?: Prisma.MarketGapOrderByWithRelationInput | Prisma.MarketGapOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MarketGaps.
   */
  cursor?: Prisma.MarketGapWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MarketGaps from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MarketGaps.
   */
  skip?: number
  distinct?: Prisma.MarketGapScalarFieldEnum | Prisma.MarketGapScalarFieldEnum[]
}

/**
 * MarketGap create
 */
export type MarketGapCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketGap
   */
  select?: Prisma.MarketGapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketGap
   */
  omit?: Prisma.MarketGapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketGapInclude<ExtArgs> | null
  /**
   * The data needed to create a MarketGap.
   */
  data: Prisma.XOR<Prisma.MarketGapCreateInput, Prisma.MarketGapUncheckedCreateInput>
}

/**
 * MarketGap createMany
 */
export type MarketGapCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MarketGaps.
   */
  data: Prisma.MarketGapCreateManyInput | Prisma.MarketGapCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MarketGap createManyAndReturn
 */
export type MarketGapCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketGap
   */
  select?: Prisma.MarketGapSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MarketGap
   */
  omit?: Prisma.MarketGapOmit<ExtArgs> | null
  /**
   * The data used to create many MarketGaps.
   */
  data: Prisma.MarketGapCreateManyInput | Prisma.MarketGapCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketGapIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MarketGap update
 */
export type MarketGapUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketGap
   */
  select?: Prisma.MarketGapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketGap
   */
  omit?: Prisma.MarketGapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketGapInclude<ExtArgs> | null
  /**
   * The data needed to update a MarketGap.
   */
  data: Prisma.XOR<Prisma.MarketGapUpdateInput, Prisma.MarketGapUncheckedUpdateInput>
  /**
   * Choose, which MarketGap to update.
   */
  where: Prisma.MarketGapWhereUniqueInput
}

/**
 * MarketGap updateMany
 */
export type MarketGapUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MarketGaps.
   */
  data: Prisma.XOR<Prisma.MarketGapUpdateManyMutationInput, Prisma.MarketGapUncheckedUpdateManyInput>
  /**
   * Filter which MarketGaps to update
   */
  where?: Prisma.MarketGapWhereInput
  /**
   * Limit how many MarketGaps to update.
   */
  limit?: number
}

/**
 * MarketGap updateManyAndReturn
 */
export type MarketGapUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketGap
   */
  select?: Prisma.MarketGapSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MarketGap
   */
  omit?: Prisma.MarketGapOmit<ExtArgs> | null
  /**
   * The data used to update MarketGaps.
   */
  data: Prisma.XOR<Prisma.MarketGapUpdateManyMutationInput, Prisma.MarketGapUncheckedUpdateManyInput>
  /**
   * Filter which MarketGaps to update
   */
  where?: Prisma.MarketGapWhereInput
  /**
   * Limit how many MarketGaps to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketGapIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MarketGap upsert
 */
export type MarketGapUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketGap
   */
  select?: Prisma.MarketGapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketGap
   */
  omit?: Prisma.MarketGapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketGapInclude<ExtArgs> | null
  /**
   * The filter to search for the MarketGap to update in case it exists.
   */
  where: Prisma.MarketGapWhereUniqueInput
  /**
   * In case the MarketGap found by the `where` argument doesn't exist, create a new MarketGap with this data.
   */
  create: Prisma.XOR<Prisma.MarketGapCreateInput, Prisma.MarketGapUncheckedCreateInput>
  /**
   * In case the MarketGap was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MarketGapUpdateInput, Prisma.MarketGapUncheckedUpdateInput>
}

/**
 * MarketGap delete
 */
export type MarketGapDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketGap
   */
  select?: Prisma.MarketGapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketGap
   */
  omit?: Prisma.MarketGapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketGapInclude<ExtArgs> | null
  /**
   * Filter which MarketGap to delete.
   */
  where: Prisma.MarketGapWhereUniqueInput
}

/**
 * MarketGap deleteMany
 */
export type MarketGapDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MarketGaps to delete
   */
  where?: Prisma.MarketGapWhereInput
  /**
   * Limit how many MarketGaps to delete.
   */
  limit?: number
}

/**
 * MarketGap without action
 */
export type MarketGapDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketGap
   */
  select?: Prisma.MarketGapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketGap
   */
  omit?: Prisma.MarketGapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketGapInclude<ExtArgs> | null
}
