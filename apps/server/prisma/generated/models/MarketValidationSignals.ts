
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MarketValidationSignals` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MarketValidationSignals
 * 
 */
export type MarketValidationSignalsModel = runtime.Types.Result.DefaultSelection<Prisma.$MarketValidationSignalsPayload>

export type AggregateMarketValidationSignals = {
  _count: MarketValidationSignalsCountAggregateOutputType | null
  _min: MarketValidationSignalsMinAggregateOutputType | null
  _max: MarketValidationSignalsMaxAggregateOutputType | null
}

export type MarketValidationSignalsMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  marketOpportunityId: string | null
}

export type MarketValidationSignalsMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  marketOpportunityId: string | null
}

export type MarketValidationSignalsCountAggregateOutputType = {
  id: number
  name: number
  description: number
  createdAt: number
  updatedAt: number
  marketOpportunityId: number
  _all: number
}


export type MarketValidationSignalsMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  marketOpportunityId?: true
}

export type MarketValidationSignalsMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  marketOpportunityId?: true
}

export type MarketValidationSignalsCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  marketOpportunityId?: true
  _all?: true
}

export type MarketValidationSignalsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MarketValidationSignals to aggregate.
   */
  where?: Prisma.MarketValidationSignalsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MarketValidationSignals to fetch.
   */
  orderBy?: Prisma.MarketValidationSignalsOrderByWithRelationInput | Prisma.MarketValidationSignalsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MarketValidationSignalsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MarketValidationSignals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MarketValidationSignals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MarketValidationSignals
  **/
  _count?: true | MarketValidationSignalsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MarketValidationSignalsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MarketValidationSignalsMaxAggregateInputType
}

export type GetMarketValidationSignalsAggregateType<T extends MarketValidationSignalsAggregateArgs> = {
      [P in keyof T & keyof AggregateMarketValidationSignals]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMarketValidationSignals[P]>
    : Prisma.GetScalarType<T[P], AggregateMarketValidationSignals[P]>
}




export type MarketValidationSignalsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MarketValidationSignalsWhereInput
  orderBy?: Prisma.MarketValidationSignalsOrderByWithAggregationInput | Prisma.MarketValidationSignalsOrderByWithAggregationInput[]
  by: Prisma.MarketValidationSignalsScalarFieldEnum[] | Prisma.MarketValidationSignalsScalarFieldEnum
  having?: Prisma.MarketValidationSignalsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MarketValidationSignalsCountAggregateInputType | true
  _min?: MarketValidationSignalsMinAggregateInputType
  _max?: MarketValidationSignalsMaxAggregateInputType
}

export type MarketValidationSignalsGroupByOutputType = {
  id: string
  name: string
  description: string
  createdAt: Date
  updatedAt: Date
  marketOpportunityId: string
  _count: MarketValidationSignalsCountAggregateOutputType | null
  _min: MarketValidationSignalsMinAggregateOutputType | null
  _max: MarketValidationSignalsMaxAggregateOutputType | null
}

type GetMarketValidationSignalsGroupByPayload<T extends MarketValidationSignalsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MarketValidationSignalsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MarketValidationSignalsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MarketValidationSignalsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MarketValidationSignalsGroupByOutputType[P]>
      }
    >
  > 



export type MarketValidationSignalsWhereInput = {
  AND?: Prisma.MarketValidationSignalsWhereInput | Prisma.MarketValidationSignalsWhereInput[]
  OR?: Prisma.MarketValidationSignalsWhereInput[]
  NOT?: Prisma.MarketValidationSignalsWhereInput | Prisma.MarketValidationSignalsWhereInput[]
  id?: Prisma.StringFilter<"MarketValidationSignals"> | string
  name?: Prisma.StringFilter<"MarketValidationSignals"> | string
  description?: Prisma.StringFilter<"MarketValidationSignals"> | string
  createdAt?: Prisma.DateTimeFilter<"MarketValidationSignals"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MarketValidationSignals"> | Date | string
  marketOpportunityId?: Prisma.StringFilter<"MarketValidationSignals"> | string
  marketOpportunity?: Prisma.XOR<Prisma.MarketOpportunityScalarRelationFilter, Prisma.MarketOpportunityWhereInput>
}

export type MarketValidationSignalsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  marketOpportunityId?: Prisma.SortOrder
  marketOpportunity?: Prisma.MarketOpportunityOrderByWithRelationInput
}

export type MarketValidationSignalsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MarketValidationSignalsWhereInput | Prisma.MarketValidationSignalsWhereInput[]
  OR?: Prisma.MarketValidationSignalsWhereInput[]
  NOT?: Prisma.MarketValidationSignalsWhereInput | Prisma.MarketValidationSignalsWhereInput[]
  name?: Prisma.StringFilter<"MarketValidationSignals"> | string
  description?: Prisma.StringFilter<"MarketValidationSignals"> | string
  createdAt?: Prisma.DateTimeFilter<"MarketValidationSignals"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MarketValidationSignals"> | Date | string
  marketOpportunityId?: Prisma.StringFilter<"MarketValidationSignals"> | string
  marketOpportunity?: Prisma.XOR<Prisma.MarketOpportunityScalarRelationFilter, Prisma.MarketOpportunityWhereInput>
}, "id">

export type MarketValidationSignalsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  marketOpportunityId?: Prisma.SortOrder
  _count?: Prisma.MarketValidationSignalsCountOrderByAggregateInput
  _max?: Prisma.MarketValidationSignalsMaxOrderByAggregateInput
  _min?: Prisma.MarketValidationSignalsMinOrderByAggregateInput
}

export type MarketValidationSignalsScalarWhereWithAggregatesInput = {
  AND?: Prisma.MarketValidationSignalsScalarWhereWithAggregatesInput | Prisma.MarketValidationSignalsScalarWhereWithAggregatesInput[]
  OR?: Prisma.MarketValidationSignalsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MarketValidationSignalsScalarWhereWithAggregatesInput | Prisma.MarketValidationSignalsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MarketValidationSignals"> | string
  name?: Prisma.StringWithAggregatesFilter<"MarketValidationSignals"> | string
  description?: Prisma.StringWithAggregatesFilter<"MarketValidationSignals"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MarketValidationSignals"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MarketValidationSignals"> | Date | string
  marketOpportunityId?: Prisma.StringWithAggregatesFilter<"MarketValidationSignals"> | string
}

export type MarketValidationSignalsCreateInput = {
  id?: string
  name: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketOpportunity: Prisma.MarketOpportunityCreateNestedOneWithoutMarketValidationSignalsInput
}

export type MarketValidationSignalsUncheckedCreateInput = {
  id?: string
  name: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketOpportunityId: string
}

export type MarketValidationSignalsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketOpportunity?: Prisma.MarketOpportunityUpdateOneRequiredWithoutMarketValidationSignalsNestedInput
}

export type MarketValidationSignalsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketOpportunityId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MarketValidationSignalsCreateManyInput = {
  id?: string
  name: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  marketOpportunityId: string
}

export type MarketValidationSignalsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MarketValidationSignalsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  marketOpportunityId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MarketValidationSignalsListRelationFilter = {
  every?: Prisma.MarketValidationSignalsWhereInput
  some?: Prisma.MarketValidationSignalsWhereInput
  none?: Prisma.MarketValidationSignalsWhereInput
}

export type MarketValidationSignalsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MarketValidationSignalsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  marketOpportunityId?: Prisma.SortOrder
}

export type MarketValidationSignalsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  marketOpportunityId?: Prisma.SortOrder
}

export type MarketValidationSignalsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  marketOpportunityId?: Prisma.SortOrder
}

export type MarketValidationSignalsCreateNestedManyWithoutMarketOpportunityInput = {
  create?: Prisma.XOR<Prisma.MarketValidationSignalsCreateWithoutMarketOpportunityInput, Prisma.MarketValidationSignalsUncheckedCreateWithoutMarketOpportunityInput> | Prisma.MarketValidationSignalsCreateWithoutMarketOpportunityInput[] | Prisma.MarketValidationSignalsUncheckedCreateWithoutMarketOpportunityInput[]
  connectOrCreate?: Prisma.MarketValidationSignalsCreateOrConnectWithoutMarketOpportunityInput | Prisma.MarketValidationSignalsCreateOrConnectWithoutMarketOpportunityInput[]
  createMany?: Prisma.MarketValidationSignalsCreateManyMarketOpportunityInputEnvelope
  connect?: Prisma.MarketValidationSignalsWhereUniqueInput | Prisma.MarketValidationSignalsWhereUniqueInput[]
}

export type MarketValidationSignalsUncheckedCreateNestedManyWithoutMarketOpportunityInput = {
  create?: Prisma.XOR<Prisma.MarketValidationSignalsCreateWithoutMarketOpportunityInput, Prisma.MarketValidationSignalsUncheckedCreateWithoutMarketOpportunityInput> | Prisma.MarketValidationSignalsCreateWithoutMarketOpportunityInput[] | Prisma.MarketValidationSignalsUncheckedCreateWithoutMarketOpportunityInput[]
  connectOrCreate?: Prisma.MarketValidationSignalsCreateOrConnectWithoutMarketOpportunityInput | Prisma.MarketValidationSignalsCreateOrConnectWithoutMarketOpportunityInput[]
  createMany?: Prisma.MarketValidationSignalsCreateManyMarketOpportunityInputEnvelope
  connect?: Prisma.MarketValidationSignalsWhereUniqueInput | Prisma.MarketValidationSignalsWhereUniqueInput[]
}

export type MarketValidationSignalsUpdateManyWithoutMarketOpportunityNestedInput = {
  create?: Prisma.XOR<Prisma.MarketValidationSignalsCreateWithoutMarketOpportunityInput, Prisma.MarketValidationSignalsUncheckedCreateWithoutMarketOpportunityInput> | Prisma.MarketValidationSignalsCreateWithoutMarketOpportunityInput[] | Prisma.MarketValidationSignalsUncheckedCreateWithoutMarketOpportunityInput[]
  connectOrCreate?: Prisma.MarketValidationSignalsCreateOrConnectWithoutMarketOpportunityInput | Prisma.MarketValidationSignalsCreateOrConnectWithoutMarketOpportunityInput[]
  upsert?: Prisma.MarketValidationSignalsUpsertWithWhereUniqueWithoutMarketOpportunityInput | Prisma.MarketValidationSignalsUpsertWithWhereUniqueWithoutMarketOpportunityInput[]
  createMany?: Prisma.MarketValidationSignalsCreateManyMarketOpportunityInputEnvelope
  set?: Prisma.MarketValidationSignalsWhereUniqueInput | Prisma.MarketValidationSignalsWhereUniqueInput[]
  disconnect?: Prisma.MarketValidationSignalsWhereUniqueInput | Prisma.MarketValidationSignalsWhereUniqueInput[]
  delete?: Prisma.MarketValidationSignalsWhereUniqueInput | Prisma.MarketValidationSignalsWhereUniqueInput[]
  connect?: Prisma.MarketValidationSignalsWhereUniqueInput | Prisma.MarketValidationSignalsWhereUniqueInput[]
  update?: Prisma.MarketValidationSignalsUpdateWithWhereUniqueWithoutMarketOpportunityInput | Prisma.MarketValidationSignalsUpdateWithWhereUniqueWithoutMarketOpportunityInput[]
  updateMany?: Prisma.MarketValidationSignalsUpdateManyWithWhereWithoutMarketOpportunityInput | Prisma.MarketValidationSignalsUpdateManyWithWhereWithoutMarketOpportunityInput[]
  deleteMany?: Prisma.MarketValidationSignalsScalarWhereInput | Prisma.MarketValidationSignalsScalarWhereInput[]
}

export type MarketValidationSignalsUncheckedUpdateManyWithoutMarketOpportunityNestedInput = {
  create?: Prisma.XOR<Prisma.MarketValidationSignalsCreateWithoutMarketOpportunityInput, Prisma.MarketValidationSignalsUncheckedCreateWithoutMarketOpportunityInput> | Prisma.MarketValidationSignalsCreateWithoutMarketOpportunityInput[] | Prisma.MarketValidationSignalsUncheckedCreateWithoutMarketOpportunityInput[]
  connectOrCreate?: Prisma.MarketValidationSignalsCreateOrConnectWithoutMarketOpportunityInput | Prisma.MarketValidationSignalsCreateOrConnectWithoutMarketOpportunityInput[]
  upsert?: Prisma.MarketValidationSignalsUpsertWithWhereUniqueWithoutMarketOpportunityInput | Prisma.MarketValidationSignalsUpsertWithWhereUniqueWithoutMarketOpportunityInput[]
  createMany?: Prisma.MarketValidationSignalsCreateManyMarketOpportunityInputEnvelope
  set?: Prisma.MarketValidationSignalsWhereUniqueInput | Prisma.MarketValidationSignalsWhereUniqueInput[]
  disconnect?: Prisma.MarketValidationSignalsWhereUniqueInput | Prisma.MarketValidationSignalsWhereUniqueInput[]
  delete?: Prisma.MarketValidationSignalsWhereUniqueInput | Prisma.MarketValidationSignalsWhereUniqueInput[]
  connect?: Prisma.MarketValidationSignalsWhereUniqueInput | Prisma.MarketValidationSignalsWhereUniqueInput[]
  update?: Prisma.MarketValidationSignalsUpdateWithWhereUniqueWithoutMarketOpportunityInput | Prisma.MarketValidationSignalsUpdateWithWhereUniqueWithoutMarketOpportunityInput[]
  updateMany?: Prisma.MarketValidationSignalsUpdateManyWithWhereWithoutMarketOpportunityInput | Prisma.MarketValidationSignalsUpdateManyWithWhereWithoutMarketOpportunityInput[]
  deleteMany?: Prisma.MarketValidationSignalsScalarWhereInput | Prisma.MarketValidationSignalsScalarWhereInput[]
}

export type MarketValidationSignalsCreateWithoutMarketOpportunityInput = {
  id?: string
  name: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MarketValidationSignalsUncheckedCreateWithoutMarketOpportunityInput = {
  id?: string
  name: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MarketValidationSignalsCreateOrConnectWithoutMarketOpportunityInput = {
  where: Prisma.MarketValidationSignalsWhereUniqueInput
  create: Prisma.XOR<Prisma.MarketValidationSignalsCreateWithoutMarketOpportunityInput, Prisma.MarketValidationSignalsUncheckedCreateWithoutMarketOpportunityInput>
}

export type MarketValidationSignalsCreateManyMarketOpportunityInputEnvelope = {
  data: Prisma.MarketValidationSignalsCreateManyMarketOpportunityInput | Prisma.MarketValidationSignalsCreateManyMarketOpportunityInput[]
  skipDuplicates?: boolean
}

export type MarketValidationSignalsUpsertWithWhereUniqueWithoutMarketOpportunityInput = {
  where: Prisma.MarketValidationSignalsWhereUniqueInput
  update: Prisma.XOR<Prisma.MarketValidationSignalsUpdateWithoutMarketOpportunityInput, Prisma.MarketValidationSignalsUncheckedUpdateWithoutMarketOpportunityInput>
  create: Prisma.XOR<Prisma.MarketValidationSignalsCreateWithoutMarketOpportunityInput, Prisma.MarketValidationSignalsUncheckedCreateWithoutMarketOpportunityInput>
}

export type MarketValidationSignalsUpdateWithWhereUniqueWithoutMarketOpportunityInput = {
  where: Prisma.MarketValidationSignalsWhereUniqueInput
  data: Prisma.XOR<Prisma.MarketValidationSignalsUpdateWithoutMarketOpportunityInput, Prisma.MarketValidationSignalsUncheckedUpdateWithoutMarketOpportunityInput>
}

export type MarketValidationSignalsUpdateManyWithWhereWithoutMarketOpportunityInput = {
  where: Prisma.MarketValidationSignalsScalarWhereInput
  data: Prisma.XOR<Prisma.MarketValidationSignalsUpdateManyMutationInput, Prisma.MarketValidationSignalsUncheckedUpdateManyWithoutMarketOpportunityInput>
}

export type MarketValidationSignalsScalarWhereInput = {
  AND?: Prisma.MarketValidationSignalsScalarWhereInput | Prisma.MarketValidationSignalsScalarWhereInput[]
  OR?: Prisma.MarketValidationSignalsScalarWhereInput[]
  NOT?: Prisma.MarketValidationSignalsScalarWhereInput | Prisma.MarketValidationSignalsScalarWhereInput[]
  id?: Prisma.StringFilter<"MarketValidationSignals"> | string
  name?: Prisma.StringFilter<"MarketValidationSignals"> | string
  description?: Prisma.StringFilter<"MarketValidationSignals"> | string
  createdAt?: Prisma.DateTimeFilter<"MarketValidationSignals"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MarketValidationSignals"> | Date | string
  marketOpportunityId?: Prisma.StringFilter<"MarketValidationSignals"> | string
}

export type MarketValidationSignalsCreateManyMarketOpportunityInput = {
  id?: string
  name: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MarketValidationSignalsUpdateWithoutMarketOpportunityInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MarketValidationSignalsUncheckedUpdateWithoutMarketOpportunityInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MarketValidationSignalsUncheckedUpdateManyWithoutMarketOpportunityInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MarketValidationSignalsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  marketOpportunityId?: boolean
  marketOpportunity?: boolean | Prisma.MarketOpportunityDefaultArgs<ExtArgs>
}, ExtArgs["result"]["marketValidationSignals"]>

export type MarketValidationSignalsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  marketOpportunityId?: boolean
  marketOpportunity?: boolean | Prisma.MarketOpportunityDefaultArgs<ExtArgs>
}, ExtArgs["result"]["marketValidationSignals"]>

export type MarketValidationSignalsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  marketOpportunityId?: boolean
  marketOpportunity?: boolean | Prisma.MarketOpportunityDefaultArgs<ExtArgs>
}, ExtArgs["result"]["marketValidationSignals"]>

export type MarketValidationSignalsSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  marketOpportunityId?: boolean
}

export type MarketValidationSignalsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "createdAt" | "updatedAt" | "marketOpportunityId", ExtArgs["result"]["marketValidationSignals"]>
export type MarketValidationSignalsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  marketOpportunity?: boolean | Prisma.MarketOpportunityDefaultArgs<ExtArgs>
}
export type MarketValidationSignalsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  marketOpportunity?: boolean | Prisma.MarketOpportunityDefaultArgs<ExtArgs>
}
export type MarketValidationSignalsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  marketOpportunity?: boolean | Prisma.MarketOpportunityDefaultArgs<ExtArgs>
}

export type $MarketValidationSignalsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MarketValidationSignals"
  objects: {
    marketOpportunity: Prisma.$MarketOpportunityPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string
    createdAt: Date
    updatedAt: Date
    marketOpportunityId: string
  }, ExtArgs["result"]["marketValidationSignals"]>
  composites: {}
}

export type MarketValidationSignalsGetPayload<S extends boolean | null | undefined | MarketValidationSignalsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MarketValidationSignalsPayload, S>

export type MarketValidationSignalsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MarketValidationSignalsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MarketValidationSignalsCountAggregateInputType | true
  }

export interface MarketValidationSignalsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MarketValidationSignals'], meta: { name: 'MarketValidationSignals' } }
  /**
   * Find zero or one MarketValidationSignals that matches the filter.
   * @param {MarketValidationSignalsFindUniqueArgs} args - Arguments to find a MarketValidationSignals
   * @example
   * // Get one MarketValidationSignals
   * const marketValidationSignals = await prisma.marketValidationSignals.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MarketValidationSignalsFindUniqueArgs>(args: Prisma.SelectSubset<T, MarketValidationSignalsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MarketValidationSignalsClient<runtime.Types.Result.GetResult<Prisma.$MarketValidationSignalsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MarketValidationSignals that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MarketValidationSignalsFindUniqueOrThrowArgs} args - Arguments to find a MarketValidationSignals
   * @example
   * // Get one MarketValidationSignals
   * const marketValidationSignals = await prisma.marketValidationSignals.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MarketValidationSignalsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MarketValidationSignalsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MarketValidationSignalsClient<runtime.Types.Result.GetResult<Prisma.$MarketValidationSignalsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MarketValidationSignals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketValidationSignalsFindFirstArgs} args - Arguments to find a MarketValidationSignals
   * @example
   * // Get one MarketValidationSignals
   * const marketValidationSignals = await prisma.marketValidationSignals.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MarketValidationSignalsFindFirstArgs>(args?: Prisma.SelectSubset<T, MarketValidationSignalsFindFirstArgs<ExtArgs>>): Prisma.Prisma__MarketValidationSignalsClient<runtime.Types.Result.GetResult<Prisma.$MarketValidationSignalsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MarketValidationSignals that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketValidationSignalsFindFirstOrThrowArgs} args - Arguments to find a MarketValidationSignals
   * @example
   * // Get one MarketValidationSignals
   * const marketValidationSignals = await prisma.marketValidationSignals.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MarketValidationSignalsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MarketValidationSignalsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MarketValidationSignalsClient<runtime.Types.Result.GetResult<Prisma.$MarketValidationSignalsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MarketValidationSignals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketValidationSignalsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MarketValidationSignals
   * const marketValidationSignals = await prisma.marketValidationSignals.findMany()
   * 
   * // Get first 10 MarketValidationSignals
   * const marketValidationSignals = await prisma.marketValidationSignals.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const marketValidationSignalsWithIdOnly = await prisma.marketValidationSignals.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MarketValidationSignalsFindManyArgs>(args?: Prisma.SelectSubset<T, MarketValidationSignalsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MarketValidationSignalsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MarketValidationSignals.
   * @param {MarketValidationSignalsCreateArgs} args - Arguments to create a MarketValidationSignals.
   * @example
   * // Create one MarketValidationSignals
   * const MarketValidationSignals = await prisma.marketValidationSignals.create({
   *   data: {
   *     // ... data to create a MarketValidationSignals
   *   }
   * })
   * 
   */
  create<T extends MarketValidationSignalsCreateArgs>(args: Prisma.SelectSubset<T, MarketValidationSignalsCreateArgs<ExtArgs>>): Prisma.Prisma__MarketValidationSignalsClient<runtime.Types.Result.GetResult<Prisma.$MarketValidationSignalsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MarketValidationSignals.
   * @param {MarketValidationSignalsCreateManyArgs} args - Arguments to create many MarketValidationSignals.
   * @example
   * // Create many MarketValidationSignals
   * const marketValidationSignals = await prisma.marketValidationSignals.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MarketValidationSignalsCreateManyArgs>(args?: Prisma.SelectSubset<T, MarketValidationSignalsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MarketValidationSignals and returns the data saved in the database.
   * @param {MarketValidationSignalsCreateManyAndReturnArgs} args - Arguments to create many MarketValidationSignals.
   * @example
   * // Create many MarketValidationSignals
   * const marketValidationSignals = await prisma.marketValidationSignals.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MarketValidationSignals and only return the `id`
   * const marketValidationSignalsWithIdOnly = await prisma.marketValidationSignals.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MarketValidationSignalsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MarketValidationSignalsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MarketValidationSignalsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MarketValidationSignals.
   * @param {MarketValidationSignalsDeleteArgs} args - Arguments to delete one MarketValidationSignals.
   * @example
   * // Delete one MarketValidationSignals
   * const MarketValidationSignals = await prisma.marketValidationSignals.delete({
   *   where: {
   *     // ... filter to delete one MarketValidationSignals
   *   }
   * })
   * 
   */
  delete<T extends MarketValidationSignalsDeleteArgs>(args: Prisma.SelectSubset<T, MarketValidationSignalsDeleteArgs<ExtArgs>>): Prisma.Prisma__MarketValidationSignalsClient<runtime.Types.Result.GetResult<Prisma.$MarketValidationSignalsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MarketValidationSignals.
   * @param {MarketValidationSignalsUpdateArgs} args - Arguments to update one MarketValidationSignals.
   * @example
   * // Update one MarketValidationSignals
   * const marketValidationSignals = await prisma.marketValidationSignals.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MarketValidationSignalsUpdateArgs>(args: Prisma.SelectSubset<T, MarketValidationSignalsUpdateArgs<ExtArgs>>): Prisma.Prisma__MarketValidationSignalsClient<runtime.Types.Result.GetResult<Prisma.$MarketValidationSignalsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MarketValidationSignals.
   * @param {MarketValidationSignalsDeleteManyArgs} args - Arguments to filter MarketValidationSignals to delete.
   * @example
   * // Delete a few MarketValidationSignals
   * const { count } = await prisma.marketValidationSignals.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MarketValidationSignalsDeleteManyArgs>(args?: Prisma.SelectSubset<T, MarketValidationSignalsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MarketValidationSignals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketValidationSignalsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MarketValidationSignals
   * const marketValidationSignals = await prisma.marketValidationSignals.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MarketValidationSignalsUpdateManyArgs>(args: Prisma.SelectSubset<T, MarketValidationSignalsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MarketValidationSignals and returns the data updated in the database.
   * @param {MarketValidationSignalsUpdateManyAndReturnArgs} args - Arguments to update many MarketValidationSignals.
   * @example
   * // Update many MarketValidationSignals
   * const marketValidationSignals = await prisma.marketValidationSignals.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MarketValidationSignals and only return the `id`
   * const marketValidationSignalsWithIdOnly = await prisma.marketValidationSignals.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MarketValidationSignalsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MarketValidationSignalsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MarketValidationSignalsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MarketValidationSignals.
   * @param {MarketValidationSignalsUpsertArgs} args - Arguments to update or create a MarketValidationSignals.
   * @example
   * // Update or create a MarketValidationSignals
   * const marketValidationSignals = await prisma.marketValidationSignals.upsert({
   *   create: {
   *     // ... data to create a MarketValidationSignals
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MarketValidationSignals we want to update
   *   }
   * })
   */
  upsert<T extends MarketValidationSignalsUpsertArgs>(args: Prisma.SelectSubset<T, MarketValidationSignalsUpsertArgs<ExtArgs>>): Prisma.Prisma__MarketValidationSignalsClient<runtime.Types.Result.GetResult<Prisma.$MarketValidationSignalsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MarketValidationSignals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketValidationSignalsCountArgs} args - Arguments to filter MarketValidationSignals to count.
   * @example
   * // Count the number of MarketValidationSignals
   * const count = await prisma.marketValidationSignals.count({
   *   where: {
   *     // ... the filter for the MarketValidationSignals we want to count
   *   }
   * })
  **/
  count<T extends MarketValidationSignalsCountArgs>(
    args?: Prisma.Subset<T, MarketValidationSignalsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MarketValidationSignalsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MarketValidationSignals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketValidationSignalsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MarketValidationSignalsAggregateArgs>(args: Prisma.Subset<T, MarketValidationSignalsAggregateArgs>): Prisma.PrismaPromise<GetMarketValidationSignalsAggregateType<T>>

  /**
   * Group by MarketValidationSignals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketValidationSignalsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MarketValidationSignalsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MarketValidationSignalsGroupByArgs['orderBy'] }
      : { orderBy?: MarketValidationSignalsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MarketValidationSignalsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarketValidationSignalsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MarketValidationSignals model
 */
readonly fields: MarketValidationSignalsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MarketValidationSignals.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MarketValidationSignalsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  marketOpportunity<T extends Prisma.MarketOpportunityDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MarketOpportunityDefaultArgs<ExtArgs>>): Prisma.Prisma__MarketOpportunityClient<runtime.Types.Result.GetResult<Prisma.$MarketOpportunityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MarketValidationSignals model
 */
export interface MarketValidationSignalsFieldRefs {
  readonly id: Prisma.FieldRef<"MarketValidationSignals", 'String'>
  readonly name: Prisma.FieldRef<"MarketValidationSignals", 'String'>
  readonly description: Prisma.FieldRef<"MarketValidationSignals", 'String'>
  readonly createdAt: Prisma.FieldRef<"MarketValidationSignals", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MarketValidationSignals", 'DateTime'>
  readonly marketOpportunityId: Prisma.FieldRef<"MarketValidationSignals", 'String'>
}
    

// Custom InputTypes
/**
 * MarketValidationSignals findUnique
 */
export type MarketValidationSignalsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketValidationSignals
   */
  select?: Prisma.MarketValidationSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketValidationSignals
   */
  omit?: Prisma.MarketValidationSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketValidationSignalsInclude<ExtArgs> | null
  /**
   * Filter, which MarketValidationSignals to fetch.
   */
  where: Prisma.MarketValidationSignalsWhereUniqueInput
}

/**
 * MarketValidationSignals findUniqueOrThrow
 */
export type MarketValidationSignalsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketValidationSignals
   */
  select?: Prisma.MarketValidationSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketValidationSignals
   */
  omit?: Prisma.MarketValidationSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketValidationSignalsInclude<ExtArgs> | null
  /**
   * Filter, which MarketValidationSignals to fetch.
   */
  where: Prisma.MarketValidationSignalsWhereUniqueInput
}

/**
 * MarketValidationSignals findFirst
 */
export type MarketValidationSignalsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketValidationSignals
   */
  select?: Prisma.MarketValidationSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketValidationSignals
   */
  omit?: Prisma.MarketValidationSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketValidationSignalsInclude<ExtArgs> | null
  /**
   * Filter, which MarketValidationSignals to fetch.
   */
  where?: Prisma.MarketValidationSignalsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MarketValidationSignals to fetch.
   */
  orderBy?: Prisma.MarketValidationSignalsOrderByWithRelationInput | Prisma.MarketValidationSignalsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MarketValidationSignals.
   */
  cursor?: Prisma.MarketValidationSignalsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MarketValidationSignals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MarketValidationSignals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MarketValidationSignals.
   */
  distinct?: Prisma.MarketValidationSignalsScalarFieldEnum | Prisma.MarketValidationSignalsScalarFieldEnum[]
}

/**
 * MarketValidationSignals findFirstOrThrow
 */
export type MarketValidationSignalsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketValidationSignals
   */
  select?: Prisma.MarketValidationSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketValidationSignals
   */
  omit?: Prisma.MarketValidationSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketValidationSignalsInclude<ExtArgs> | null
  /**
   * Filter, which MarketValidationSignals to fetch.
   */
  where?: Prisma.MarketValidationSignalsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MarketValidationSignals to fetch.
   */
  orderBy?: Prisma.MarketValidationSignalsOrderByWithRelationInput | Prisma.MarketValidationSignalsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MarketValidationSignals.
   */
  cursor?: Prisma.MarketValidationSignalsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MarketValidationSignals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MarketValidationSignals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MarketValidationSignals.
   */
  distinct?: Prisma.MarketValidationSignalsScalarFieldEnum | Prisma.MarketValidationSignalsScalarFieldEnum[]
}

/**
 * MarketValidationSignals findMany
 */
export type MarketValidationSignalsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketValidationSignals
   */
  select?: Prisma.MarketValidationSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketValidationSignals
   */
  omit?: Prisma.MarketValidationSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketValidationSignalsInclude<ExtArgs> | null
  /**
   * Filter, which MarketValidationSignals to fetch.
   */
  where?: Prisma.MarketValidationSignalsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MarketValidationSignals to fetch.
   */
  orderBy?: Prisma.MarketValidationSignalsOrderByWithRelationInput | Prisma.MarketValidationSignalsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MarketValidationSignals.
   */
  cursor?: Prisma.MarketValidationSignalsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MarketValidationSignals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MarketValidationSignals.
   */
  skip?: number
  distinct?: Prisma.MarketValidationSignalsScalarFieldEnum | Prisma.MarketValidationSignalsScalarFieldEnum[]
}

/**
 * MarketValidationSignals create
 */
export type MarketValidationSignalsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketValidationSignals
   */
  select?: Prisma.MarketValidationSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketValidationSignals
   */
  omit?: Prisma.MarketValidationSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketValidationSignalsInclude<ExtArgs> | null
  /**
   * The data needed to create a MarketValidationSignals.
   */
  data: Prisma.XOR<Prisma.MarketValidationSignalsCreateInput, Prisma.MarketValidationSignalsUncheckedCreateInput>
}

/**
 * MarketValidationSignals createMany
 */
export type MarketValidationSignalsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MarketValidationSignals.
   */
  data: Prisma.MarketValidationSignalsCreateManyInput | Prisma.MarketValidationSignalsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MarketValidationSignals createManyAndReturn
 */
export type MarketValidationSignalsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketValidationSignals
   */
  select?: Prisma.MarketValidationSignalsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MarketValidationSignals
   */
  omit?: Prisma.MarketValidationSignalsOmit<ExtArgs> | null
  /**
   * The data used to create many MarketValidationSignals.
   */
  data: Prisma.MarketValidationSignalsCreateManyInput | Prisma.MarketValidationSignalsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketValidationSignalsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MarketValidationSignals update
 */
export type MarketValidationSignalsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketValidationSignals
   */
  select?: Prisma.MarketValidationSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketValidationSignals
   */
  omit?: Prisma.MarketValidationSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketValidationSignalsInclude<ExtArgs> | null
  /**
   * The data needed to update a MarketValidationSignals.
   */
  data: Prisma.XOR<Prisma.MarketValidationSignalsUpdateInput, Prisma.MarketValidationSignalsUncheckedUpdateInput>
  /**
   * Choose, which MarketValidationSignals to update.
   */
  where: Prisma.MarketValidationSignalsWhereUniqueInput
}

/**
 * MarketValidationSignals updateMany
 */
export type MarketValidationSignalsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MarketValidationSignals.
   */
  data: Prisma.XOR<Prisma.MarketValidationSignalsUpdateManyMutationInput, Prisma.MarketValidationSignalsUncheckedUpdateManyInput>
  /**
   * Filter which MarketValidationSignals to update
   */
  where?: Prisma.MarketValidationSignalsWhereInput
  /**
   * Limit how many MarketValidationSignals to update.
   */
  limit?: number
}

/**
 * MarketValidationSignals updateManyAndReturn
 */
export type MarketValidationSignalsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketValidationSignals
   */
  select?: Prisma.MarketValidationSignalsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MarketValidationSignals
   */
  omit?: Prisma.MarketValidationSignalsOmit<ExtArgs> | null
  /**
   * The data used to update MarketValidationSignals.
   */
  data: Prisma.XOR<Prisma.MarketValidationSignalsUpdateManyMutationInput, Prisma.MarketValidationSignalsUncheckedUpdateManyInput>
  /**
   * Filter which MarketValidationSignals to update
   */
  where?: Prisma.MarketValidationSignalsWhereInput
  /**
   * Limit how many MarketValidationSignals to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketValidationSignalsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MarketValidationSignals upsert
 */
export type MarketValidationSignalsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketValidationSignals
   */
  select?: Prisma.MarketValidationSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketValidationSignals
   */
  omit?: Prisma.MarketValidationSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketValidationSignalsInclude<ExtArgs> | null
  /**
   * The filter to search for the MarketValidationSignals to update in case it exists.
   */
  where: Prisma.MarketValidationSignalsWhereUniqueInput
  /**
   * In case the MarketValidationSignals found by the `where` argument doesn't exist, create a new MarketValidationSignals with this data.
   */
  create: Prisma.XOR<Prisma.MarketValidationSignalsCreateInput, Prisma.MarketValidationSignalsUncheckedCreateInput>
  /**
   * In case the MarketValidationSignals was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MarketValidationSignalsUpdateInput, Prisma.MarketValidationSignalsUncheckedUpdateInput>
}

/**
 * MarketValidationSignals delete
 */
export type MarketValidationSignalsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketValidationSignals
   */
  select?: Prisma.MarketValidationSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketValidationSignals
   */
  omit?: Prisma.MarketValidationSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketValidationSignalsInclude<ExtArgs> | null
  /**
   * Filter which MarketValidationSignals to delete.
   */
  where: Prisma.MarketValidationSignalsWhereUniqueInput
}

/**
 * MarketValidationSignals deleteMany
 */
export type MarketValidationSignalsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MarketValidationSignals to delete
   */
  where?: Prisma.MarketValidationSignalsWhereInput
  /**
   * Limit how many MarketValidationSignals to delete.
   */
  limit?: number
}

/**
 * MarketValidationSignals without action
 */
export type MarketValidationSignalsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketValidationSignals
   */
  select?: Prisma.MarketValidationSignalsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketValidationSignals
   */
  omit?: Prisma.MarketValidationSignalsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketValidationSignalsInclude<ExtArgs> | null
}
