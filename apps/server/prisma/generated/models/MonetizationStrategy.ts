
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MonetizationStrategy` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MonetizationStrategy
 * 
 */
export type MonetizationStrategyModel = runtime.Types.Result.DefaultSelection<Prisma.$MonetizationStrategyPayload>

export type AggregateMonetizationStrategy = {
  _count: MonetizationStrategyCountAggregateOutputType | null
  _avg: MonetizationStrategyAvgAggregateOutputType | null
  _sum: MonetizationStrategySumAggregateOutputType | null
  _min: MonetizationStrategyMinAggregateOutputType | null
  _max: MonetizationStrategyMaxAggregateOutputType | null
}

export type MonetizationStrategyAvgAggregateOutputType = {
  businessScore: number | null
  confidence: number | null
}

export type MonetizationStrategySumAggregateOutputType = {
  businessScore: number | null
  confidence: number | null
}

export type MonetizationStrategyMinAggregateOutputType = {
  id: string | null
  primaryModel: string | null
  pricingStrategy: string | null
  businessScore: number | null
  confidence: number | null
  revenueModelValidation: string | null
  pricingSensitivity: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MonetizationStrategyMaxAggregateOutputType = {
  id: string | null
  primaryModel: string | null
  pricingStrategy: string | null
  businessScore: number | null
  confidence: number | null
  revenueModelValidation: string | null
  pricingSensitivity: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MonetizationStrategyCountAggregateOutputType = {
  id: number
  primaryModel: number
  pricingStrategy: number
  businessScore: number
  confidence: number
  revenueModelValidation: number
  pricingSensitivity: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MonetizationStrategyAvgAggregateInputType = {
  businessScore?: true
  confidence?: true
}

export type MonetizationStrategySumAggregateInputType = {
  businessScore?: true
  confidence?: true
}

export type MonetizationStrategyMinAggregateInputType = {
  id?: true
  primaryModel?: true
  pricingStrategy?: true
  businessScore?: true
  confidence?: true
  revenueModelValidation?: true
  pricingSensitivity?: true
  createdAt?: true
  updatedAt?: true
}

export type MonetizationStrategyMaxAggregateInputType = {
  id?: true
  primaryModel?: true
  pricingStrategy?: true
  businessScore?: true
  confidence?: true
  revenueModelValidation?: true
  pricingSensitivity?: true
  createdAt?: true
  updatedAt?: true
}

export type MonetizationStrategyCountAggregateInputType = {
  id?: true
  primaryModel?: true
  pricingStrategy?: true
  businessScore?: true
  confidence?: true
  revenueModelValidation?: true
  pricingSensitivity?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MonetizationStrategyAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MonetizationStrategy to aggregate.
   */
  where?: Prisma.MonetizationStrategyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MonetizationStrategies to fetch.
   */
  orderBy?: Prisma.MonetizationStrategyOrderByWithRelationInput | Prisma.MonetizationStrategyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MonetizationStrategyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MonetizationStrategies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MonetizationStrategies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MonetizationStrategies
  **/
  _count?: true | MonetizationStrategyCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MonetizationStrategyAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MonetizationStrategySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MonetizationStrategyMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MonetizationStrategyMaxAggregateInputType
}

export type GetMonetizationStrategyAggregateType<T extends MonetizationStrategyAggregateArgs> = {
      [P in keyof T & keyof AggregateMonetizationStrategy]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMonetizationStrategy[P]>
    : Prisma.GetScalarType<T[P], AggregateMonetizationStrategy[P]>
}




export type MonetizationStrategyGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MonetizationStrategyWhereInput
  orderBy?: Prisma.MonetizationStrategyOrderByWithAggregationInput | Prisma.MonetizationStrategyOrderByWithAggregationInput[]
  by: Prisma.MonetizationStrategyScalarFieldEnum[] | Prisma.MonetizationStrategyScalarFieldEnum
  having?: Prisma.MonetizationStrategyScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MonetizationStrategyCountAggregateInputType | true
  _avg?: MonetizationStrategyAvgAggregateInputType
  _sum?: MonetizationStrategySumAggregateInputType
  _min?: MonetizationStrategyMinAggregateInputType
  _max?: MonetizationStrategyMaxAggregateInputType
}

export type MonetizationStrategyGroupByOutputType = {
  id: string
  primaryModel: string
  pricingStrategy: string
  businessScore: number
  confidence: number
  revenueModelValidation: string
  pricingSensitivity: string
  createdAt: Date
  updatedAt: Date
  _count: MonetizationStrategyCountAggregateOutputType | null
  _avg: MonetizationStrategyAvgAggregateOutputType | null
  _sum: MonetizationStrategySumAggregateOutputType | null
  _min: MonetizationStrategyMinAggregateOutputType | null
  _max: MonetizationStrategyMaxAggregateOutputType | null
}

type GetMonetizationStrategyGroupByPayload<T extends MonetizationStrategyGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MonetizationStrategyGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MonetizationStrategyGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MonetizationStrategyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MonetizationStrategyGroupByOutputType[P]>
      }
    >
  > 



export type MonetizationStrategyWhereInput = {
  AND?: Prisma.MonetizationStrategyWhereInput | Prisma.MonetizationStrategyWhereInput[]
  OR?: Prisma.MonetizationStrategyWhereInput[]
  NOT?: Prisma.MonetizationStrategyWhereInput | Prisma.MonetizationStrategyWhereInput[]
  id?: Prisma.StringFilter<"MonetizationStrategy"> | string
  primaryModel?: Prisma.StringFilter<"MonetizationStrategy"> | string
  pricingStrategy?: Prisma.StringFilter<"MonetizationStrategy"> | string
  businessScore?: Prisma.FloatFilter<"MonetizationStrategy"> | number
  confidence?: Prisma.IntFilter<"MonetizationStrategy"> | number
  revenueModelValidation?: Prisma.StringFilter<"MonetizationStrategy"> | string
  pricingSensitivity?: Prisma.StringFilter<"MonetizationStrategy"> | string
  createdAt?: Prisma.DateTimeFilter<"MonetizationStrategy"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MonetizationStrategy"> | Date | string
  revenueStreams?: Prisma.RevenueStreamListRelationFilter
  keyMetrics?: Prisma.XOR<Prisma.KeyMetricsNullableScalarRelationFilter, Prisma.KeyMetricsWhereInput> | null
  financialProjections?: Prisma.FinancialProjectionListRelationFilter
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaNullableScalarRelationFilter, Prisma.DailyIdeaWhereInput> | null
}

export type MonetizationStrategyOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  primaryModel?: Prisma.SortOrder
  pricingStrategy?: Prisma.SortOrder
  businessScore?: Prisma.SortOrder
  confidence?: Prisma.SortOrder
  revenueModelValidation?: Prisma.SortOrder
  pricingSensitivity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  revenueStreams?: Prisma.RevenueStreamOrderByRelationAggregateInput
  keyMetrics?: Prisma.KeyMetricsOrderByWithRelationInput
  financialProjections?: Prisma.FinancialProjectionOrderByRelationAggregateInput
  dailyIdea?: Prisma.DailyIdeaOrderByWithRelationInput
}

export type MonetizationStrategyWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MonetizationStrategyWhereInput | Prisma.MonetizationStrategyWhereInput[]
  OR?: Prisma.MonetizationStrategyWhereInput[]
  NOT?: Prisma.MonetizationStrategyWhereInput | Prisma.MonetizationStrategyWhereInput[]
  primaryModel?: Prisma.StringFilter<"MonetizationStrategy"> | string
  pricingStrategy?: Prisma.StringFilter<"MonetizationStrategy"> | string
  businessScore?: Prisma.FloatFilter<"MonetizationStrategy"> | number
  confidence?: Prisma.IntFilter<"MonetizationStrategy"> | number
  revenueModelValidation?: Prisma.StringFilter<"MonetizationStrategy"> | string
  pricingSensitivity?: Prisma.StringFilter<"MonetizationStrategy"> | string
  createdAt?: Prisma.DateTimeFilter<"MonetizationStrategy"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MonetizationStrategy"> | Date | string
  revenueStreams?: Prisma.RevenueStreamListRelationFilter
  keyMetrics?: Prisma.XOR<Prisma.KeyMetricsNullableScalarRelationFilter, Prisma.KeyMetricsWhereInput> | null
  financialProjections?: Prisma.FinancialProjectionListRelationFilter
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaNullableScalarRelationFilter, Prisma.DailyIdeaWhereInput> | null
}, "id">

export type MonetizationStrategyOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  primaryModel?: Prisma.SortOrder
  pricingStrategy?: Prisma.SortOrder
  businessScore?: Prisma.SortOrder
  confidence?: Prisma.SortOrder
  revenueModelValidation?: Prisma.SortOrder
  pricingSensitivity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MonetizationStrategyCountOrderByAggregateInput
  _avg?: Prisma.MonetizationStrategyAvgOrderByAggregateInput
  _max?: Prisma.MonetizationStrategyMaxOrderByAggregateInput
  _min?: Prisma.MonetizationStrategyMinOrderByAggregateInput
  _sum?: Prisma.MonetizationStrategySumOrderByAggregateInput
}

export type MonetizationStrategyScalarWhereWithAggregatesInput = {
  AND?: Prisma.MonetizationStrategyScalarWhereWithAggregatesInput | Prisma.MonetizationStrategyScalarWhereWithAggregatesInput[]
  OR?: Prisma.MonetizationStrategyScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MonetizationStrategyScalarWhereWithAggregatesInput | Prisma.MonetizationStrategyScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MonetizationStrategy"> | string
  primaryModel?: Prisma.StringWithAggregatesFilter<"MonetizationStrategy"> | string
  pricingStrategy?: Prisma.StringWithAggregatesFilter<"MonetizationStrategy"> | string
  businessScore?: Prisma.FloatWithAggregatesFilter<"MonetizationStrategy"> | number
  confidence?: Prisma.IntWithAggregatesFilter<"MonetizationStrategy"> | number
  revenueModelValidation?: Prisma.StringWithAggregatesFilter<"MonetizationStrategy"> | string
  pricingSensitivity?: Prisma.StringWithAggregatesFilter<"MonetizationStrategy"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MonetizationStrategy"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MonetizationStrategy"> | Date | string
}

export type MonetizationStrategyCreateInput = {
  id?: string
  primaryModel: string
  pricingStrategy: string
  businessScore: number
  confidence: number
  revenueModelValidation: string
  pricingSensitivity: string
  createdAt?: Date | string
  updatedAt?: Date | string
  revenueStreams?: Prisma.RevenueStreamCreateNestedManyWithoutMonetizationStrategyInput
  keyMetrics?: Prisma.KeyMetricsCreateNestedOneWithoutMonetizationStrategyInput
  financialProjections?: Prisma.FinancialProjectionCreateNestedManyWithoutMonetizationStrategyInput
  dailyIdea?: Prisma.DailyIdeaCreateNestedOneWithoutMonetizationStrategyInput
}

export type MonetizationStrategyUncheckedCreateInput = {
  id?: string
  primaryModel: string
  pricingStrategy: string
  businessScore: number
  confidence: number
  revenueModelValidation: string
  pricingSensitivity: string
  createdAt?: Date | string
  updatedAt?: Date | string
  revenueStreams?: Prisma.RevenueStreamUncheckedCreateNestedManyWithoutMonetizationStrategyInput
  keyMetrics?: Prisma.KeyMetricsUncheckedCreateNestedOneWithoutMonetizationStrategyInput
  financialProjections?: Prisma.FinancialProjectionUncheckedCreateNestedManyWithoutMonetizationStrategyInput
  dailyIdea?: Prisma.DailyIdeaUncheckedCreateNestedOneWithoutMonetizationStrategyInput
}

export type MonetizationStrategyUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  primaryModel?: Prisma.StringFieldUpdateOperationsInput | string
  pricingStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  businessScore?: Prisma.FloatFieldUpdateOperationsInput | number
  confidence?: Prisma.IntFieldUpdateOperationsInput | number
  revenueModelValidation?: Prisma.StringFieldUpdateOperationsInput | string
  pricingSensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  revenueStreams?: Prisma.RevenueStreamUpdateManyWithoutMonetizationStrategyNestedInput
  keyMetrics?: Prisma.KeyMetricsUpdateOneWithoutMonetizationStrategyNestedInput
  financialProjections?: Prisma.FinancialProjectionUpdateManyWithoutMonetizationStrategyNestedInput
  dailyIdea?: Prisma.DailyIdeaUpdateOneWithoutMonetizationStrategyNestedInput
}

export type MonetizationStrategyUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  primaryModel?: Prisma.StringFieldUpdateOperationsInput | string
  pricingStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  businessScore?: Prisma.FloatFieldUpdateOperationsInput | number
  confidence?: Prisma.IntFieldUpdateOperationsInput | number
  revenueModelValidation?: Prisma.StringFieldUpdateOperationsInput | string
  pricingSensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  revenueStreams?: Prisma.RevenueStreamUncheckedUpdateManyWithoutMonetizationStrategyNestedInput
  keyMetrics?: Prisma.KeyMetricsUncheckedUpdateOneWithoutMonetizationStrategyNestedInput
  financialProjections?: Prisma.FinancialProjectionUncheckedUpdateManyWithoutMonetizationStrategyNestedInput
  dailyIdea?: Prisma.DailyIdeaUncheckedUpdateOneWithoutMonetizationStrategyNestedInput
}

export type MonetizationStrategyCreateManyInput = {
  id?: string
  primaryModel: string
  pricingStrategy: string
  businessScore: number
  confidence: number
  revenueModelValidation: string
  pricingSensitivity: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MonetizationStrategyUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  primaryModel?: Prisma.StringFieldUpdateOperationsInput | string
  pricingStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  businessScore?: Prisma.FloatFieldUpdateOperationsInput | number
  confidence?: Prisma.IntFieldUpdateOperationsInput | number
  revenueModelValidation?: Prisma.StringFieldUpdateOperationsInput | string
  pricingSensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MonetizationStrategyUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  primaryModel?: Prisma.StringFieldUpdateOperationsInput | string
  pricingStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  businessScore?: Prisma.FloatFieldUpdateOperationsInput | number
  confidence?: Prisma.IntFieldUpdateOperationsInput | number
  revenueModelValidation?: Prisma.StringFieldUpdateOperationsInput | string
  pricingSensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MonetizationStrategyCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  primaryModel?: Prisma.SortOrder
  pricingStrategy?: Prisma.SortOrder
  businessScore?: Prisma.SortOrder
  confidence?: Prisma.SortOrder
  revenueModelValidation?: Prisma.SortOrder
  pricingSensitivity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MonetizationStrategyAvgOrderByAggregateInput = {
  businessScore?: Prisma.SortOrder
  confidence?: Prisma.SortOrder
}

export type MonetizationStrategyMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  primaryModel?: Prisma.SortOrder
  pricingStrategy?: Prisma.SortOrder
  businessScore?: Prisma.SortOrder
  confidence?: Prisma.SortOrder
  revenueModelValidation?: Prisma.SortOrder
  pricingSensitivity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MonetizationStrategyMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  primaryModel?: Prisma.SortOrder
  pricingStrategy?: Prisma.SortOrder
  businessScore?: Prisma.SortOrder
  confidence?: Prisma.SortOrder
  revenueModelValidation?: Prisma.SortOrder
  pricingSensitivity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MonetizationStrategySumOrderByAggregateInput = {
  businessScore?: Prisma.SortOrder
  confidence?: Prisma.SortOrder
}

export type MonetizationStrategyScalarRelationFilter = {
  is?: Prisma.MonetizationStrategyWhereInput
  isNot?: Prisma.MonetizationStrategyWhereInput
}

export type MonetizationStrategyNullableScalarRelationFilter = {
  is?: Prisma.MonetizationStrategyWhereInput | null
  isNot?: Prisma.MonetizationStrategyWhereInput | null
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type MonetizationStrategyCreateNestedOneWithoutRevenueStreamsInput = {
  create?: Prisma.XOR<Prisma.MonetizationStrategyCreateWithoutRevenueStreamsInput, Prisma.MonetizationStrategyUncheckedCreateWithoutRevenueStreamsInput>
  connectOrCreate?: Prisma.MonetizationStrategyCreateOrConnectWithoutRevenueStreamsInput
  connect?: Prisma.MonetizationStrategyWhereUniqueInput
}

export type MonetizationStrategyUpdateOneRequiredWithoutRevenueStreamsNestedInput = {
  create?: Prisma.XOR<Prisma.MonetizationStrategyCreateWithoutRevenueStreamsInput, Prisma.MonetizationStrategyUncheckedCreateWithoutRevenueStreamsInput>
  connectOrCreate?: Prisma.MonetizationStrategyCreateOrConnectWithoutRevenueStreamsInput
  upsert?: Prisma.MonetizationStrategyUpsertWithoutRevenueStreamsInput
  connect?: Prisma.MonetizationStrategyWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MonetizationStrategyUpdateToOneWithWhereWithoutRevenueStreamsInput, Prisma.MonetizationStrategyUpdateWithoutRevenueStreamsInput>, Prisma.MonetizationStrategyUncheckedUpdateWithoutRevenueStreamsInput>
}

export type MonetizationStrategyCreateNestedOneWithoutKeyMetricsInput = {
  create?: Prisma.XOR<Prisma.MonetizationStrategyCreateWithoutKeyMetricsInput, Prisma.MonetizationStrategyUncheckedCreateWithoutKeyMetricsInput>
  connectOrCreate?: Prisma.MonetizationStrategyCreateOrConnectWithoutKeyMetricsInput
  connect?: Prisma.MonetizationStrategyWhereUniqueInput
}

export type MonetizationStrategyUpdateOneWithoutKeyMetricsNestedInput = {
  create?: Prisma.XOR<Prisma.MonetizationStrategyCreateWithoutKeyMetricsInput, Prisma.MonetizationStrategyUncheckedCreateWithoutKeyMetricsInput>
  connectOrCreate?: Prisma.MonetizationStrategyCreateOrConnectWithoutKeyMetricsInput
  upsert?: Prisma.MonetizationStrategyUpsertWithoutKeyMetricsInput
  disconnect?: Prisma.MonetizationStrategyWhereInput | boolean
  delete?: Prisma.MonetizationStrategyWhereInput | boolean
  connect?: Prisma.MonetizationStrategyWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MonetizationStrategyUpdateToOneWithWhereWithoutKeyMetricsInput, Prisma.MonetizationStrategyUpdateWithoutKeyMetricsInput>, Prisma.MonetizationStrategyUncheckedUpdateWithoutKeyMetricsInput>
}

export type MonetizationStrategyCreateNestedOneWithoutFinancialProjectionsInput = {
  create?: Prisma.XOR<Prisma.MonetizationStrategyCreateWithoutFinancialProjectionsInput, Prisma.MonetizationStrategyUncheckedCreateWithoutFinancialProjectionsInput>
  connectOrCreate?: Prisma.MonetizationStrategyCreateOrConnectWithoutFinancialProjectionsInput
  connect?: Prisma.MonetizationStrategyWhereUniqueInput
}

export type MonetizationStrategyUpdateOneRequiredWithoutFinancialProjectionsNestedInput = {
  create?: Prisma.XOR<Prisma.MonetizationStrategyCreateWithoutFinancialProjectionsInput, Prisma.MonetizationStrategyUncheckedCreateWithoutFinancialProjectionsInput>
  connectOrCreate?: Prisma.MonetizationStrategyCreateOrConnectWithoutFinancialProjectionsInput
  upsert?: Prisma.MonetizationStrategyUpsertWithoutFinancialProjectionsInput
  connect?: Prisma.MonetizationStrategyWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MonetizationStrategyUpdateToOneWithWhereWithoutFinancialProjectionsInput, Prisma.MonetizationStrategyUpdateWithoutFinancialProjectionsInput>, Prisma.MonetizationStrategyUncheckedUpdateWithoutFinancialProjectionsInput>
}

export type MonetizationStrategyCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.MonetizationStrategyCreateWithoutDailyIdeaInput, Prisma.MonetizationStrategyUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.MonetizationStrategyCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.MonetizationStrategyWhereUniqueInput
}

export type MonetizationStrategyUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.MonetizationStrategyCreateWithoutDailyIdeaInput, Prisma.MonetizationStrategyUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.MonetizationStrategyCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.MonetizationStrategyUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.MonetizationStrategyWhereInput | boolean
  delete?: Prisma.MonetizationStrategyWhereInput | boolean
  connect?: Prisma.MonetizationStrategyWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MonetizationStrategyUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.MonetizationStrategyUpdateWithoutDailyIdeaInput>, Prisma.MonetizationStrategyUncheckedUpdateWithoutDailyIdeaInput>
}

export type MonetizationStrategyCreateWithoutRevenueStreamsInput = {
  id?: string
  primaryModel: string
  pricingStrategy: string
  businessScore: number
  confidence: number
  revenueModelValidation: string
  pricingSensitivity: string
  createdAt?: Date | string
  updatedAt?: Date | string
  keyMetrics?: Prisma.KeyMetricsCreateNestedOneWithoutMonetizationStrategyInput
  financialProjections?: Prisma.FinancialProjectionCreateNestedManyWithoutMonetizationStrategyInput
  dailyIdea?: Prisma.DailyIdeaCreateNestedOneWithoutMonetizationStrategyInput
}

export type MonetizationStrategyUncheckedCreateWithoutRevenueStreamsInput = {
  id?: string
  primaryModel: string
  pricingStrategy: string
  businessScore: number
  confidence: number
  revenueModelValidation: string
  pricingSensitivity: string
  createdAt?: Date | string
  updatedAt?: Date | string
  keyMetrics?: Prisma.KeyMetricsUncheckedCreateNestedOneWithoutMonetizationStrategyInput
  financialProjections?: Prisma.FinancialProjectionUncheckedCreateNestedManyWithoutMonetizationStrategyInput
  dailyIdea?: Prisma.DailyIdeaUncheckedCreateNestedOneWithoutMonetizationStrategyInput
}

export type MonetizationStrategyCreateOrConnectWithoutRevenueStreamsInput = {
  where: Prisma.MonetizationStrategyWhereUniqueInput
  create: Prisma.XOR<Prisma.MonetizationStrategyCreateWithoutRevenueStreamsInput, Prisma.MonetizationStrategyUncheckedCreateWithoutRevenueStreamsInput>
}

export type MonetizationStrategyUpsertWithoutRevenueStreamsInput = {
  update: Prisma.XOR<Prisma.MonetizationStrategyUpdateWithoutRevenueStreamsInput, Prisma.MonetizationStrategyUncheckedUpdateWithoutRevenueStreamsInput>
  create: Prisma.XOR<Prisma.MonetizationStrategyCreateWithoutRevenueStreamsInput, Prisma.MonetizationStrategyUncheckedCreateWithoutRevenueStreamsInput>
  where?: Prisma.MonetizationStrategyWhereInput
}

export type MonetizationStrategyUpdateToOneWithWhereWithoutRevenueStreamsInput = {
  where?: Prisma.MonetizationStrategyWhereInput
  data: Prisma.XOR<Prisma.MonetizationStrategyUpdateWithoutRevenueStreamsInput, Prisma.MonetizationStrategyUncheckedUpdateWithoutRevenueStreamsInput>
}

export type MonetizationStrategyUpdateWithoutRevenueStreamsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  primaryModel?: Prisma.StringFieldUpdateOperationsInput | string
  pricingStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  businessScore?: Prisma.FloatFieldUpdateOperationsInput | number
  confidence?: Prisma.IntFieldUpdateOperationsInput | number
  revenueModelValidation?: Prisma.StringFieldUpdateOperationsInput | string
  pricingSensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  keyMetrics?: Prisma.KeyMetricsUpdateOneWithoutMonetizationStrategyNestedInput
  financialProjections?: Prisma.FinancialProjectionUpdateManyWithoutMonetizationStrategyNestedInput
  dailyIdea?: Prisma.DailyIdeaUpdateOneWithoutMonetizationStrategyNestedInput
}

export type MonetizationStrategyUncheckedUpdateWithoutRevenueStreamsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  primaryModel?: Prisma.StringFieldUpdateOperationsInput | string
  pricingStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  businessScore?: Prisma.FloatFieldUpdateOperationsInput | number
  confidence?: Prisma.IntFieldUpdateOperationsInput | number
  revenueModelValidation?: Prisma.StringFieldUpdateOperationsInput | string
  pricingSensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  keyMetrics?: Prisma.KeyMetricsUncheckedUpdateOneWithoutMonetizationStrategyNestedInput
  financialProjections?: Prisma.FinancialProjectionUncheckedUpdateManyWithoutMonetizationStrategyNestedInput
  dailyIdea?: Prisma.DailyIdeaUncheckedUpdateOneWithoutMonetizationStrategyNestedInput
}

export type MonetizationStrategyCreateWithoutKeyMetricsInput = {
  id?: string
  primaryModel: string
  pricingStrategy: string
  businessScore: number
  confidence: number
  revenueModelValidation: string
  pricingSensitivity: string
  createdAt?: Date | string
  updatedAt?: Date | string
  revenueStreams?: Prisma.RevenueStreamCreateNestedManyWithoutMonetizationStrategyInput
  financialProjections?: Prisma.FinancialProjectionCreateNestedManyWithoutMonetizationStrategyInput
  dailyIdea?: Prisma.DailyIdeaCreateNestedOneWithoutMonetizationStrategyInput
}

export type MonetizationStrategyUncheckedCreateWithoutKeyMetricsInput = {
  id?: string
  primaryModel: string
  pricingStrategy: string
  businessScore: number
  confidence: number
  revenueModelValidation: string
  pricingSensitivity: string
  createdAt?: Date | string
  updatedAt?: Date | string
  revenueStreams?: Prisma.RevenueStreamUncheckedCreateNestedManyWithoutMonetizationStrategyInput
  financialProjections?: Prisma.FinancialProjectionUncheckedCreateNestedManyWithoutMonetizationStrategyInput
  dailyIdea?: Prisma.DailyIdeaUncheckedCreateNestedOneWithoutMonetizationStrategyInput
}

export type MonetizationStrategyCreateOrConnectWithoutKeyMetricsInput = {
  where: Prisma.MonetizationStrategyWhereUniqueInput
  create: Prisma.XOR<Prisma.MonetizationStrategyCreateWithoutKeyMetricsInput, Prisma.MonetizationStrategyUncheckedCreateWithoutKeyMetricsInput>
}

export type MonetizationStrategyUpsertWithoutKeyMetricsInput = {
  update: Prisma.XOR<Prisma.MonetizationStrategyUpdateWithoutKeyMetricsInput, Prisma.MonetizationStrategyUncheckedUpdateWithoutKeyMetricsInput>
  create: Prisma.XOR<Prisma.MonetizationStrategyCreateWithoutKeyMetricsInput, Prisma.MonetizationStrategyUncheckedCreateWithoutKeyMetricsInput>
  where?: Prisma.MonetizationStrategyWhereInput
}

export type MonetizationStrategyUpdateToOneWithWhereWithoutKeyMetricsInput = {
  where?: Prisma.MonetizationStrategyWhereInput
  data: Prisma.XOR<Prisma.MonetizationStrategyUpdateWithoutKeyMetricsInput, Prisma.MonetizationStrategyUncheckedUpdateWithoutKeyMetricsInput>
}

export type MonetizationStrategyUpdateWithoutKeyMetricsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  primaryModel?: Prisma.StringFieldUpdateOperationsInput | string
  pricingStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  businessScore?: Prisma.FloatFieldUpdateOperationsInput | number
  confidence?: Prisma.IntFieldUpdateOperationsInput | number
  revenueModelValidation?: Prisma.StringFieldUpdateOperationsInput | string
  pricingSensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  revenueStreams?: Prisma.RevenueStreamUpdateManyWithoutMonetizationStrategyNestedInput
  financialProjections?: Prisma.FinancialProjectionUpdateManyWithoutMonetizationStrategyNestedInput
  dailyIdea?: Prisma.DailyIdeaUpdateOneWithoutMonetizationStrategyNestedInput
}

export type MonetizationStrategyUncheckedUpdateWithoutKeyMetricsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  primaryModel?: Prisma.StringFieldUpdateOperationsInput | string
  pricingStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  businessScore?: Prisma.FloatFieldUpdateOperationsInput | number
  confidence?: Prisma.IntFieldUpdateOperationsInput | number
  revenueModelValidation?: Prisma.StringFieldUpdateOperationsInput | string
  pricingSensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  revenueStreams?: Prisma.RevenueStreamUncheckedUpdateManyWithoutMonetizationStrategyNestedInput
  financialProjections?: Prisma.FinancialProjectionUncheckedUpdateManyWithoutMonetizationStrategyNestedInput
  dailyIdea?: Prisma.DailyIdeaUncheckedUpdateOneWithoutMonetizationStrategyNestedInput
}

export type MonetizationStrategyCreateWithoutFinancialProjectionsInput = {
  id?: string
  primaryModel: string
  pricingStrategy: string
  businessScore: number
  confidence: number
  revenueModelValidation: string
  pricingSensitivity: string
  createdAt?: Date | string
  updatedAt?: Date | string
  revenueStreams?: Prisma.RevenueStreamCreateNestedManyWithoutMonetizationStrategyInput
  keyMetrics?: Prisma.KeyMetricsCreateNestedOneWithoutMonetizationStrategyInput
  dailyIdea?: Prisma.DailyIdeaCreateNestedOneWithoutMonetizationStrategyInput
}

export type MonetizationStrategyUncheckedCreateWithoutFinancialProjectionsInput = {
  id?: string
  primaryModel: string
  pricingStrategy: string
  businessScore: number
  confidence: number
  revenueModelValidation: string
  pricingSensitivity: string
  createdAt?: Date | string
  updatedAt?: Date | string
  revenueStreams?: Prisma.RevenueStreamUncheckedCreateNestedManyWithoutMonetizationStrategyInput
  keyMetrics?: Prisma.KeyMetricsUncheckedCreateNestedOneWithoutMonetizationStrategyInput
  dailyIdea?: Prisma.DailyIdeaUncheckedCreateNestedOneWithoutMonetizationStrategyInput
}

export type MonetizationStrategyCreateOrConnectWithoutFinancialProjectionsInput = {
  where: Prisma.MonetizationStrategyWhereUniqueInput
  create: Prisma.XOR<Prisma.MonetizationStrategyCreateWithoutFinancialProjectionsInput, Prisma.MonetizationStrategyUncheckedCreateWithoutFinancialProjectionsInput>
}

export type MonetizationStrategyUpsertWithoutFinancialProjectionsInput = {
  update: Prisma.XOR<Prisma.MonetizationStrategyUpdateWithoutFinancialProjectionsInput, Prisma.MonetizationStrategyUncheckedUpdateWithoutFinancialProjectionsInput>
  create: Prisma.XOR<Prisma.MonetizationStrategyCreateWithoutFinancialProjectionsInput, Prisma.MonetizationStrategyUncheckedCreateWithoutFinancialProjectionsInput>
  where?: Prisma.MonetizationStrategyWhereInput
}

export type MonetizationStrategyUpdateToOneWithWhereWithoutFinancialProjectionsInput = {
  where?: Prisma.MonetizationStrategyWhereInput
  data: Prisma.XOR<Prisma.MonetizationStrategyUpdateWithoutFinancialProjectionsInput, Prisma.MonetizationStrategyUncheckedUpdateWithoutFinancialProjectionsInput>
}

export type MonetizationStrategyUpdateWithoutFinancialProjectionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  primaryModel?: Prisma.StringFieldUpdateOperationsInput | string
  pricingStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  businessScore?: Prisma.FloatFieldUpdateOperationsInput | number
  confidence?: Prisma.IntFieldUpdateOperationsInput | number
  revenueModelValidation?: Prisma.StringFieldUpdateOperationsInput | string
  pricingSensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  revenueStreams?: Prisma.RevenueStreamUpdateManyWithoutMonetizationStrategyNestedInput
  keyMetrics?: Prisma.KeyMetricsUpdateOneWithoutMonetizationStrategyNestedInput
  dailyIdea?: Prisma.DailyIdeaUpdateOneWithoutMonetizationStrategyNestedInput
}

export type MonetizationStrategyUncheckedUpdateWithoutFinancialProjectionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  primaryModel?: Prisma.StringFieldUpdateOperationsInput | string
  pricingStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  businessScore?: Prisma.FloatFieldUpdateOperationsInput | number
  confidence?: Prisma.IntFieldUpdateOperationsInput | number
  revenueModelValidation?: Prisma.StringFieldUpdateOperationsInput | string
  pricingSensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  revenueStreams?: Prisma.RevenueStreamUncheckedUpdateManyWithoutMonetizationStrategyNestedInput
  keyMetrics?: Prisma.KeyMetricsUncheckedUpdateOneWithoutMonetizationStrategyNestedInput
  dailyIdea?: Prisma.DailyIdeaUncheckedUpdateOneWithoutMonetizationStrategyNestedInput
}

export type MonetizationStrategyCreateWithoutDailyIdeaInput = {
  id?: string
  primaryModel: string
  pricingStrategy: string
  businessScore: number
  confidence: number
  revenueModelValidation: string
  pricingSensitivity: string
  createdAt?: Date | string
  updatedAt?: Date | string
  revenueStreams?: Prisma.RevenueStreamCreateNestedManyWithoutMonetizationStrategyInput
  keyMetrics?: Prisma.KeyMetricsCreateNestedOneWithoutMonetizationStrategyInput
  financialProjections?: Prisma.FinancialProjectionCreateNestedManyWithoutMonetizationStrategyInput
}

export type MonetizationStrategyUncheckedCreateWithoutDailyIdeaInput = {
  id?: string
  primaryModel: string
  pricingStrategy: string
  businessScore: number
  confidence: number
  revenueModelValidation: string
  pricingSensitivity: string
  createdAt?: Date | string
  updatedAt?: Date | string
  revenueStreams?: Prisma.RevenueStreamUncheckedCreateNestedManyWithoutMonetizationStrategyInput
  keyMetrics?: Prisma.KeyMetricsUncheckedCreateNestedOneWithoutMonetizationStrategyInput
  financialProjections?: Prisma.FinancialProjectionUncheckedCreateNestedManyWithoutMonetizationStrategyInput
}

export type MonetizationStrategyCreateOrConnectWithoutDailyIdeaInput = {
  where: Prisma.MonetizationStrategyWhereUniqueInput
  create: Prisma.XOR<Prisma.MonetizationStrategyCreateWithoutDailyIdeaInput, Prisma.MonetizationStrategyUncheckedCreateWithoutDailyIdeaInput>
}

export type MonetizationStrategyUpsertWithoutDailyIdeaInput = {
  update: Prisma.XOR<Prisma.MonetizationStrategyUpdateWithoutDailyIdeaInput, Prisma.MonetizationStrategyUncheckedUpdateWithoutDailyIdeaInput>
  create: Prisma.XOR<Prisma.MonetizationStrategyCreateWithoutDailyIdeaInput, Prisma.MonetizationStrategyUncheckedCreateWithoutDailyIdeaInput>
  where?: Prisma.MonetizationStrategyWhereInput
}

export type MonetizationStrategyUpdateToOneWithWhereWithoutDailyIdeaInput = {
  where?: Prisma.MonetizationStrategyWhereInput
  data: Prisma.XOR<Prisma.MonetizationStrategyUpdateWithoutDailyIdeaInput, Prisma.MonetizationStrategyUncheckedUpdateWithoutDailyIdeaInput>
}

export type MonetizationStrategyUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  primaryModel?: Prisma.StringFieldUpdateOperationsInput | string
  pricingStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  businessScore?: Prisma.FloatFieldUpdateOperationsInput | number
  confidence?: Prisma.IntFieldUpdateOperationsInput | number
  revenueModelValidation?: Prisma.StringFieldUpdateOperationsInput | string
  pricingSensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  revenueStreams?: Prisma.RevenueStreamUpdateManyWithoutMonetizationStrategyNestedInput
  keyMetrics?: Prisma.KeyMetricsUpdateOneWithoutMonetizationStrategyNestedInput
  financialProjections?: Prisma.FinancialProjectionUpdateManyWithoutMonetizationStrategyNestedInput
}

export type MonetizationStrategyUncheckedUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  primaryModel?: Prisma.StringFieldUpdateOperationsInput | string
  pricingStrategy?: Prisma.StringFieldUpdateOperationsInput | string
  businessScore?: Prisma.FloatFieldUpdateOperationsInput | number
  confidence?: Prisma.IntFieldUpdateOperationsInput | number
  revenueModelValidation?: Prisma.StringFieldUpdateOperationsInput | string
  pricingSensitivity?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  revenueStreams?: Prisma.RevenueStreamUncheckedUpdateManyWithoutMonetizationStrategyNestedInput
  keyMetrics?: Prisma.KeyMetricsUncheckedUpdateOneWithoutMonetizationStrategyNestedInput
  financialProjections?: Prisma.FinancialProjectionUncheckedUpdateManyWithoutMonetizationStrategyNestedInput
}


/**
 * Count Type MonetizationStrategyCountOutputType
 */

export type MonetizationStrategyCountOutputType = {
  revenueStreams: number
  financialProjections: number
}

export type MonetizationStrategyCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  revenueStreams?: boolean | MonetizationStrategyCountOutputTypeCountRevenueStreamsArgs
  financialProjections?: boolean | MonetizationStrategyCountOutputTypeCountFinancialProjectionsArgs
}

/**
 * MonetizationStrategyCountOutputType without action
 */
export type MonetizationStrategyCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MonetizationStrategyCountOutputType
   */
  select?: Prisma.MonetizationStrategyCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MonetizationStrategyCountOutputType without action
 */
export type MonetizationStrategyCountOutputTypeCountRevenueStreamsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RevenueStreamWhereInput
}

/**
 * MonetizationStrategyCountOutputType without action
 */
export type MonetizationStrategyCountOutputTypeCountFinancialProjectionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FinancialProjectionWhereInput
}


export type MonetizationStrategySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  primaryModel?: boolean
  pricingStrategy?: boolean
  businessScore?: boolean
  confidence?: boolean
  revenueModelValidation?: boolean
  pricingSensitivity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  revenueStreams?: boolean | Prisma.MonetizationStrategy$revenueStreamsArgs<ExtArgs>
  keyMetrics?: boolean | Prisma.MonetizationStrategy$keyMetricsArgs<ExtArgs>
  financialProjections?: boolean | Prisma.MonetizationStrategy$financialProjectionsArgs<ExtArgs>
  dailyIdea?: boolean | Prisma.MonetizationStrategy$dailyIdeaArgs<ExtArgs>
  _count?: boolean | Prisma.MonetizationStrategyCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["monetizationStrategy"]>

export type MonetizationStrategySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  primaryModel?: boolean
  pricingStrategy?: boolean
  businessScore?: boolean
  confidence?: boolean
  revenueModelValidation?: boolean
  pricingSensitivity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["monetizationStrategy"]>

export type MonetizationStrategySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  primaryModel?: boolean
  pricingStrategy?: boolean
  businessScore?: boolean
  confidence?: boolean
  revenueModelValidation?: boolean
  pricingSensitivity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["monetizationStrategy"]>

export type MonetizationStrategySelectScalar = {
  id?: boolean
  primaryModel?: boolean
  pricingStrategy?: boolean
  businessScore?: boolean
  confidence?: boolean
  revenueModelValidation?: boolean
  pricingSensitivity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MonetizationStrategyOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "primaryModel" | "pricingStrategy" | "businessScore" | "confidence" | "revenueModelValidation" | "pricingSensitivity" | "createdAt" | "updatedAt", ExtArgs["result"]["monetizationStrategy"]>
export type MonetizationStrategyInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  revenueStreams?: boolean | Prisma.MonetizationStrategy$revenueStreamsArgs<ExtArgs>
  keyMetrics?: boolean | Prisma.MonetizationStrategy$keyMetricsArgs<ExtArgs>
  financialProjections?: boolean | Prisma.MonetizationStrategy$financialProjectionsArgs<ExtArgs>
  dailyIdea?: boolean | Prisma.MonetizationStrategy$dailyIdeaArgs<ExtArgs>
  _count?: boolean | Prisma.MonetizationStrategyCountOutputTypeDefaultArgs<ExtArgs>
}
export type MonetizationStrategyIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type MonetizationStrategyIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $MonetizationStrategyPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MonetizationStrategy"
  objects: {
    revenueStreams: Prisma.$RevenueStreamPayload<ExtArgs>[]
    keyMetrics: Prisma.$KeyMetricsPayload<ExtArgs> | null
    financialProjections: Prisma.$FinancialProjectionPayload<ExtArgs>[]
    dailyIdea: Prisma.$DailyIdeaPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    primaryModel: string
    pricingStrategy: string
    businessScore: number
    confidence: number
    revenueModelValidation: string
    pricingSensitivity: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["monetizationStrategy"]>
  composites: {}
}

export type MonetizationStrategyGetPayload<S extends boolean | null | undefined | MonetizationStrategyDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MonetizationStrategyPayload, S>

export type MonetizationStrategyCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MonetizationStrategyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MonetizationStrategyCountAggregateInputType | true
  }

export interface MonetizationStrategyDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MonetizationStrategy'], meta: { name: 'MonetizationStrategy' } }
  /**
   * Find zero or one MonetizationStrategy that matches the filter.
   * @param {MonetizationStrategyFindUniqueArgs} args - Arguments to find a MonetizationStrategy
   * @example
   * // Get one MonetizationStrategy
   * const monetizationStrategy = await prisma.monetizationStrategy.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MonetizationStrategyFindUniqueArgs>(args: Prisma.SelectSubset<T, MonetizationStrategyFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MonetizationStrategyClient<runtime.Types.Result.GetResult<Prisma.$MonetizationStrategyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MonetizationStrategy that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MonetizationStrategyFindUniqueOrThrowArgs} args - Arguments to find a MonetizationStrategy
   * @example
   * // Get one MonetizationStrategy
   * const monetizationStrategy = await prisma.monetizationStrategy.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MonetizationStrategyFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MonetizationStrategyFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MonetizationStrategyClient<runtime.Types.Result.GetResult<Prisma.$MonetizationStrategyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MonetizationStrategy that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MonetizationStrategyFindFirstArgs} args - Arguments to find a MonetizationStrategy
   * @example
   * // Get one MonetizationStrategy
   * const monetizationStrategy = await prisma.monetizationStrategy.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MonetizationStrategyFindFirstArgs>(args?: Prisma.SelectSubset<T, MonetizationStrategyFindFirstArgs<ExtArgs>>): Prisma.Prisma__MonetizationStrategyClient<runtime.Types.Result.GetResult<Prisma.$MonetizationStrategyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MonetizationStrategy that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MonetizationStrategyFindFirstOrThrowArgs} args - Arguments to find a MonetizationStrategy
   * @example
   * // Get one MonetizationStrategy
   * const monetizationStrategy = await prisma.monetizationStrategy.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MonetizationStrategyFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MonetizationStrategyFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MonetizationStrategyClient<runtime.Types.Result.GetResult<Prisma.$MonetizationStrategyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MonetizationStrategies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MonetizationStrategyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MonetizationStrategies
   * const monetizationStrategies = await prisma.monetizationStrategy.findMany()
   * 
   * // Get first 10 MonetizationStrategies
   * const monetizationStrategies = await prisma.monetizationStrategy.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const monetizationStrategyWithIdOnly = await prisma.monetizationStrategy.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MonetizationStrategyFindManyArgs>(args?: Prisma.SelectSubset<T, MonetizationStrategyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MonetizationStrategyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MonetizationStrategy.
   * @param {MonetizationStrategyCreateArgs} args - Arguments to create a MonetizationStrategy.
   * @example
   * // Create one MonetizationStrategy
   * const MonetizationStrategy = await prisma.monetizationStrategy.create({
   *   data: {
   *     // ... data to create a MonetizationStrategy
   *   }
   * })
   * 
   */
  create<T extends MonetizationStrategyCreateArgs>(args: Prisma.SelectSubset<T, MonetizationStrategyCreateArgs<ExtArgs>>): Prisma.Prisma__MonetizationStrategyClient<runtime.Types.Result.GetResult<Prisma.$MonetizationStrategyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MonetizationStrategies.
   * @param {MonetizationStrategyCreateManyArgs} args - Arguments to create many MonetizationStrategies.
   * @example
   * // Create many MonetizationStrategies
   * const monetizationStrategy = await prisma.monetizationStrategy.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MonetizationStrategyCreateManyArgs>(args?: Prisma.SelectSubset<T, MonetizationStrategyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MonetizationStrategies and returns the data saved in the database.
   * @param {MonetizationStrategyCreateManyAndReturnArgs} args - Arguments to create many MonetizationStrategies.
   * @example
   * // Create many MonetizationStrategies
   * const monetizationStrategy = await prisma.monetizationStrategy.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MonetizationStrategies and only return the `id`
   * const monetizationStrategyWithIdOnly = await prisma.monetizationStrategy.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MonetizationStrategyCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MonetizationStrategyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MonetizationStrategyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MonetizationStrategy.
   * @param {MonetizationStrategyDeleteArgs} args - Arguments to delete one MonetizationStrategy.
   * @example
   * // Delete one MonetizationStrategy
   * const MonetizationStrategy = await prisma.monetizationStrategy.delete({
   *   where: {
   *     // ... filter to delete one MonetizationStrategy
   *   }
   * })
   * 
   */
  delete<T extends MonetizationStrategyDeleteArgs>(args: Prisma.SelectSubset<T, MonetizationStrategyDeleteArgs<ExtArgs>>): Prisma.Prisma__MonetizationStrategyClient<runtime.Types.Result.GetResult<Prisma.$MonetizationStrategyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MonetizationStrategy.
   * @param {MonetizationStrategyUpdateArgs} args - Arguments to update one MonetizationStrategy.
   * @example
   * // Update one MonetizationStrategy
   * const monetizationStrategy = await prisma.monetizationStrategy.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MonetizationStrategyUpdateArgs>(args: Prisma.SelectSubset<T, MonetizationStrategyUpdateArgs<ExtArgs>>): Prisma.Prisma__MonetizationStrategyClient<runtime.Types.Result.GetResult<Prisma.$MonetizationStrategyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MonetizationStrategies.
   * @param {MonetizationStrategyDeleteManyArgs} args - Arguments to filter MonetizationStrategies to delete.
   * @example
   * // Delete a few MonetizationStrategies
   * const { count } = await prisma.monetizationStrategy.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MonetizationStrategyDeleteManyArgs>(args?: Prisma.SelectSubset<T, MonetizationStrategyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MonetizationStrategies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MonetizationStrategyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MonetizationStrategies
   * const monetizationStrategy = await prisma.monetizationStrategy.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MonetizationStrategyUpdateManyArgs>(args: Prisma.SelectSubset<T, MonetizationStrategyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MonetizationStrategies and returns the data updated in the database.
   * @param {MonetizationStrategyUpdateManyAndReturnArgs} args - Arguments to update many MonetizationStrategies.
   * @example
   * // Update many MonetizationStrategies
   * const monetizationStrategy = await prisma.monetizationStrategy.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MonetizationStrategies and only return the `id`
   * const monetizationStrategyWithIdOnly = await prisma.monetizationStrategy.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MonetizationStrategyUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MonetizationStrategyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MonetizationStrategyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MonetizationStrategy.
   * @param {MonetizationStrategyUpsertArgs} args - Arguments to update or create a MonetizationStrategy.
   * @example
   * // Update or create a MonetizationStrategy
   * const monetizationStrategy = await prisma.monetizationStrategy.upsert({
   *   create: {
   *     // ... data to create a MonetizationStrategy
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MonetizationStrategy we want to update
   *   }
   * })
   */
  upsert<T extends MonetizationStrategyUpsertArgs>(args: Prisma.SelectSubset<T, MonetizationStrategyUpsertArgs<ExtArgs>>): Prisma.Prisma__MonetizationStrategyClient<runtime.Types.Result.GetResult<Prisma.$MonetizationStrategyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MonetizationStrategies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MonetizationStrategyCountArgs} args - Arguments to filter MonetizationStrategies to count.
   * @example
   * // Count the number of MonetizationStrategies
   * const count = await prisma.monetizationStrategy.count({
   *   where: {
   *     // ... the filter for the MonetizationStrategies we want to count
   *   }
   * })
  **/
  count<T extends MonetizationStrategyCountArgs>(
    args?: Prisma.Subset<T, MonetizationStrategyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MonetizationStrategyCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MonetizationStrategy.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MonetizationStrategyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MonetizationStrategyAggregateArgs>(args: Prisma.Subset<T, MonetizationStrategyAggregateArgs>): Prisma.PrismaPromise<GetMonetizationStrategyAggregateType<T>>

  /**
   * Group by MonetizationStrategy.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MonetizationStrategyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MonetizationStrategyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MonetizationStrategyGroupByArgs['orderBy'] }
      : { orderBy?: MonetizationStrategyGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MonetizationStrategyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMonetizationStrategyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MonetizationStrategy model
 */
readonly fields: MonetizationStrategyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MonetizationStrategy.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MonetizationStrategyClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  revenueStreams<T extends Prisma.MonetizationStrategy$revenueStreamsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MonetizationStrategy$revenueStreamsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RevenueStreamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  keyMetrics<T extends Prisma.MonetizationStrategy$keyMetricsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MonetizationStrategy$keyMetricsArgs<ExtArgs>>): Prisma.Prisma__KeyMetricsClient<runtime.Types.Result.GetResult<Prisma.$KeyMetricsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  financialProjections<T extends Prisma.MonetizationStrategy$financialProjectionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MonetizationStrategy$financialProjectionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FinancialProjectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  dailyIdea<T extends Prisma.MonetizationStrategy$dailyIdeaArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MonetizationStrategy$dailyIdeaArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MonetizationStrategy model
 */
export interface MonetizationStrategyFieldRefs {
  readonly id: Prisma.FieldRef<"MonetizationStrategy", 'String'>
  readonly primaryModel: Prisma.FieldRef<"MonetizationStrategy", 'String'>
  readonly pricingStrategy: Prisma.FieldRef<"MonetizationStrategy", 'String'>
  readonly businessScore: Prisma.FieldRef<"MonetizationStrategy", 'Float'>
  readonly confidence: Prisma.FieldRef<"MonetizationStrategy", 'Int'>
  readonly revenueModelValidation: Prisma.FieldRef<"MonetizationStrategy", 'String'>
  readonly pricingSensitivity: Prisma.FieldRef<"MonetizationStrategy", 'String'>
  readonly createdAt: Prisma.FieldRef<"MonetizationStrategy", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MonetizationStrategy", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MonetizationStrategy findUnique
 */
export type MonetizationStrategyFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MonetizationStrategy
   */
  select?: Prisma.MonetizationStrategySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MonetizationStrategy
   */
  omit?: Prisma.MonetizationStrategyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MonetizationStrategyInclude<ExtArgs> | null
  /**
   * Filter, which MonetizationStrategy to fetch.
   */
  where: Prisma.MonetizationStrategyWhereUniqueInput
}

/**
 * MonetizationStrategy findUniqueOrThrow
 */
export type MonetizationStrategyFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MonetizationStrategy
   */
  select?: Prisma.MonetizationStrategySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MonetizationStrategy
   */
  omit?: Prisma.MonetizationStrategyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MonetizationStrategyInclude<ExtArgs> | null
  /**
   * Filter, which MonetizationStrategy to fetch.
   */
  where: Prisma.MonetizationStrategyWhereUniqueInput
}

/**
 * MonetizationStrategy findFirst
 */
export type MonetizationStrategyFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MonetizationStrategy
   */
  select?: Prisma.MonetizationStrategySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MonetizationStrategy
   */
  omit?: Prisma.MonetizationStrategyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MonetizationStrategyInclude<ExtArgs> | null
  /**
   * Filter, which MonetizationStrategy to fetch.
   */
  where?: Prisma.MonetizationStrategyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MonetizationStrategies to fetch.
   */
  orderBy?: Prisma.MonetizationStrategyOrderByWithRelationInput | Prisma.MonetizationStrategyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MonetizationStrategies.
   */
  cursor?: Prisma.MonetizationStrategyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MonetizationStrategies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MonetizationStrategies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MonetizationStrategies.
   */
  distinct?: Prisma.MonetizationStrategyScalarFieldEnum | Prisma.MonetizationStrategyScalarFieldEnum[]
}

/**
 * MonetizationStrategy findFirstOrThrow
 */
export type MonetizationStrategyFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MonetizationStrategy
   */
  select?: Prisma.MonetizationStrategySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MonetizationStrategy
   */
  omit?: Prisma.MonetizationStrategyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MonetizationStrategyInclude<ExtArgs> | null
  /**
   * Filter, which MonetizationStrategy to fetch.
   */
  where?: Prisma.MonetizationStrategyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MonetizationStrategies to fetch.
   */
  orderBy?: Prisma.MonetizationStrategyOrderByWithRelationInput | Prisma.MonetizationStrategyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MonetizationStrategies.
   */
  cursor?: Prisma.MonetizationStrategyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MonetizationStrategies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MonetizationStrategies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MonetizationStrategies.
   */
  distinct?: Prisma.MonetizationStrategyScalarFieldEnum | Prisma.MonetizationStrategyScalarFieldEnum[]
}

/**
 * MonetizationStrategy findMany
 */
export type MonetizationStrategyFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MonetizationStrategy
   */
  select?: Prisma.MonetizationStrategySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MonetizationStrategy
   */
  omit?: Prisma.MonetizationStrategyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MonetizationStrategyInclude<ExtArgs> | null
  /**
   * Filter, which MonetizationStrategies to fetch.
   */
  where?: Prisma.MonetizationStrategyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MonetizationStrategies to fetch.
   */
  orderBy?: Prisma.MonetizationStrategyOrderByWithRelationInput | Prisma.MonetizationStrategyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MonetizationStrategies.
   */
  cursor?: Prisma.MonetizationStrategyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MonetizationStrategies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MonetizationStrategies.
   */
  skip?: number
  distinct?: Prisma.MonetizationStrategyScalarFieldEnum | Prisma.MonetizationStrategyScalarFieldEnum[]
}

/**
 * MonetizationStrategy create
 */
export type MonetizationStrategyCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MonetizationStrategy
   */
  select?: Prisma.MonetizationStrategySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MonetizationStrategy
   */
  omit?: Prisma.MonetizationStrategyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MonetizationStrategyInclude<ExtArgs> | null
  /**
   * The data needed to create a MonetizationStrategy.
   */
  data: Prisma.XOR<Prisma.MonetizationStrategyCreateInput, Prisma.MonetizationStrategyUncheckedCreateInput>
}

/**
 * MonetizationStrategy createMany
 */
export type MonetizationStrategyCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MonetizationStrategies.
   */
  data: Prisma.MonetizationStrategyCreateManyInput | Prisma.MonetizationStrategyCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MonetizationStrategy createManyAndReturn
 */
export type MonetizationStrategyCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MonetizationStrategy
   */
  select?: Prisma.MonetizationStrategySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MonetizationStrategy
   */
  omit?: Prisma.MonetizationStrategyOmit<ExtArgs> | null
  /**
   * The data used to create many MonetizationStrategies.
   */
  data: Prisma.MonetizationStrategyCreateManyInput | Prisma.MonetizationStrategyCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MonetizationStrategy update
 */
export type MonetizationStrategyUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MonetizationStrategy
   */
  select?: Prisma.MonetizationStrategySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MonetizationStrategy
   */
  omit?: Prisma.MonetizationStrategyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MonetizationStrategyInclude<ExtArgs> | null
  /**
   * The data needed to update a MonetizationStrategy.
   */
  data: Prisma.XOR<Prisma.MonetizationStrategyUpdateInput, Prisma.MonetizationStrategyUncheckedUpdateInput>
  /**
   * Choose, which MonetizationStrategy to update.
   */
  where: Prisma.MonetizationStrategyWhereUniqueInput
}

/**
 * MonetizationStrategy updateMany
 */
export type MonetizationStrategyUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MonetizationStrategies.
   */
  data: Prisma.XOR<Prisma.MonetizationStrategyUpdateManyMutationInput, Prisma.MonetizationStrategyUncheckedUpdateManyInput>
  /**
   * Filter which MonetizationStrategies to update
   */
  where?: Prisma.MonetizationStrategyWhereInput
  /**
   * Limit how many MonetizationStrategies to update.
   */
  limit?: number
}

/**
 * MonetizationStrategy updateManyAndReturn
 */
export type MonetizationStrategyUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MonetizationStrategy
   */
  select?: Prisma.MonetizationStrategySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MonetizationStrategy
   */
  omit?: Prisma.MonetizationStrategyOmit<ExtArgs> | null
  /**
   * The data used to update MonetizationStrategies.
   */
  data: Prisma.XOR<Prisma.MonetizationStrategyUpdateManyMutationInput, Prisma.MonetizationStrategyUncheckedUpdateManyInput>
  /**
   * Filter which MonetizationStrategies to update
   */
  where?: Prisma.MonetizationStrategyWhereInput
  /**
   * Limit how many MonetizationStrategies to update.
   */
  limit?: number
}

/**
 * MonetizationStrategy upsert
 */
export type MonetizationStrategyUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MonetizationStrategy
   */
  select?: Prisma.MonetizationStrategySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MonetizationStrategy
   */
  omit?: Prisma.MonetizationStrategyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MonetizationStrategyInclude<ExtArgs> | null
  /**
   * The filter to search for the MonetizationStrategy to update in case it exists.
   */
  where: Prisma.MonetizationStrategyWhereUniqueInput
  /**
   * In case the MonetizationStrategy found by the `where` argument doesn't exist, create a new MonetizationStrategy with this data.
   */
  create: Prisma.XOR<Prisma.MonetizationStrategyCreateInput, Prisma.MonetizationStrategyUncheckedCreateInput>
  /**
   * In case the MonetizationStrategy was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MonetizationStrategyUpdateInput, Prisma.MonetizationStrategyUncheckedUpdateInput>
}

/**
 * MonetizationStrategy delete
 */
export type MonetizationStrategyDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MonetizationStrategy
   */
  select?: Prisma.MonetizationStrategySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MonetizationStrategy
   */
  omit?: Prisma.MonetizationStrategyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MonetizationStrategyInclude<ExtArgs> | null
  /**
   * Filter which MonetizationStrategy to delete.
   */
  where: Prisma.MonetizationStrategyWhereUniqueInput
}

/**
 * MonetizationStrategy deleteMany
 */
export type MonetizationStrategyDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MonetizationStrategies to delete
   */
  where?: Prisma.MonetizationStrategyWhereInput
  /**
   * Limit how many MonetizationStrategies to delete.
   */
  limit?: number
}

/**
 * MonetizationStrategy.revenueStreams
 */
export type MonetizationStrategy$revenueStreamsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RevenueStream
   */
  select?: Prisma.RevenueStreamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RevenueStream
   */
  omit?: Prisma.RevenueStreamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RevenueStreamInclude<ExtArgs> | null
  where?: Prisma.RevenueStreamWhereInput
  orderBy?: Prisma.RevenueStreamOrderByWithRelationInput | Prisma.RevenueStreamOrderByWithRelationInput[]
  cursor?: Prisma.RevenueStreamWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RevenueStreamScalarFieldEnum | Prisma.RevenueStreamScalarFieldEnum[]
}

/**
 * MonetizationStrategy.keyMetrics
 */
export type MonetizationStrategy$keyMetricsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KeyMetrics
   */
  select?: Prisma.KeyMetricsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KeyMetrics
   */
  omit?: Prisma.KeyMetricsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KeyMetricsInclude<ExtArgs> | null
  where?: Prisma.KeyMetricsWhereInput
}

/**
 * MonetizationStrategy.financialProjections
 */
export type MonetizationStrategy$financialProjectionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FinancialProjection
   */
  select?: Prisma.FinancialProjectionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FinancialProjection
   */
  omit?: Prisma.FinancialProjectionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FinancialProjectionInclude<ExtArgs> | null
  where?: Prisma.FinancialProjectionWhereInput
  orderBy?: Prisma.FinancialProjectionOrderByWithRelationInput | Prisma.FinancialProjectionOrderByWithRelationInput[]
  cursor?: Prisma.FinancialProjectionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FinancialProjectionScalarFieldEnum | Prisma.FinancialProjectionScalarFieldEnum[]
}

/**
 * MonetizationStrategy.dailyIdea
 */
export type MonetizationStrategy$dailyIdeaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DailyIdea
   */
  select?: Prisma.DailyIdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DailyIdea
   */
  omit?: Prisma.DailyIdeaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DailyIdeaInclude<ExtArgs> | null
  where?: Prisma.DailyIdeaWhereInput
}

/**
 * MonetizationStrategy without action
 */
export type MonetizationStrategyDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MonetizationStrategy
   */
  select?: Prisma.MonetizationStrategySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MonetizationStrategy
   */
  omit?: Prisma.MonetizationStrategyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MonetizationStrategyInclude<ExtArgs> | null
}
