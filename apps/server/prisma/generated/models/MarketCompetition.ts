
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MarketCompetition` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MarketCompetition
 * 
 */
export type MarketCompetitionModel = runtime.Types.Result.DefaultSelection<Prisma.$MarketCompetitionPayload>

export type AggregateMarketCompetition = {
  _count: MarketCompetitionCountAggregateOutputType | null
  _avg: MarketCompetitionAvgAggregateOutputType | null
  _sum: MarketCompetitionSumAggregateOutputType | null
  _min: MarketCompetitionMinAggregateOutputType | null
  _max: MarketCompetitionMaxAggregateOutputType | null
}

export type MarketCompetitionAvgAggregateOutputType = {
  competitivePositioningScore: number | null
}

export type MarketCompetitionSumAggregateOutputType = {
  competitivePositioningScore: number | null
}

export type MarketCompetitionMinAggregateOutputType = {
  id: string | null
  marketConcentrationLevel: $Enums.MarketConcentrationLevel | null
  marketConcentrationJustification: string | null
  competitivePositioningScore: number | null
  createdAt: Date | null
  updatedAt: Date | null
  dailyIdeaId: string | null
}

export type MarketCompetitionMaxAggregateOutputType = {
  id: string | null
  marketConcentrationLevel: $Enums.MarketConcentrationLevel | null
  marketConcentrationJustification: string | null
  competitivePositioningScore: number | null
  createdAt: Date | null
  updatedAt: Date | null
  dailyIdeaId: string | null
}

export type MarketCompetitionCountAggregateOutputType = {
  id: number
  marketConcentrationLevel: number
  marketConcentrationJustification: number
  directCompetitors: number
  indirectCompetitors: number
  competitorFailurePoints: number
  unfairAdvantage: number
  moat: number
  competitivePositioningScore: number
  createdAt: number
  updatedAt: number
  dailyIdeaId: number
  _all: number
}


export type MarketCompetitionAvgAggregateInputType = {
  competitivePositioningScore?: true
}

export type MarketCompetitionSumAggregateInputType = {
  competitivePositioningScore?: true
}

export type MarketCompetitionMinAggregateInputType = {
  id?: true
  marketConcentrationLevel?: true
  marketConcentrationJustification?: true
  competitivePositioningScore?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
}

export type MarketCompetitionMaxAggregateInputType = {
  id?: true
  marketConcentrationLevel?: true
  marketConcentrationJustification?: true
  competitivePositioningScore?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
}

export type MarketCompetitionCountAggregateInputType = {
  id?: true
  marketConcentrationLevel?: true
  marketConcentrationJustification?: true
  directCompetitors?: true
  indirectCompetitors?: true
  competitorFailurePoints?: true
  unfairAdvantage?: true
  moat?: true
  competitivePositioningScore?: true
  createdAt?: true
  updatedAt?: true
  dailyIdeaId?: true
  _all?: true
}

export type MarketCompetitionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MarketCompetition to aggregate.
   */
  where?: Prisma.MarketCompetitionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MarketCompetitions to fetch.
   */
  orderBy?: Prisma.MarketCompetitionOrderByWithRelationInput | Prisma.MarketCompetitionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MarketCompetitionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MarketCompetitions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MarketCompetitions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MarketCompetitions
  **/
  _count?: true | MarketCompetitionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MarketCompetitionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MarketCompetitionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MarketCompetitionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MarketCompetitionMaxAggregateInputType
}

export type GetMarketCompetitionAggregateType<T extends MarketCompetitionAggregateArgs> = {
      [P in keyof T & keyof AggregateMarketCompetition]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMarketCompetition[P]>
    : Prisma.GetScalarType<T[P], AggregateMarketCompetition[P]>
}




export type MarketCompetitionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MarketCompetitionWhereInput
  orderBy?: Prisma.MarketCompetitionOrderByWithAggregationInput | Prisma.MarketCompetitionOrderByWithAggregationInput[]
  by: Prisma.MarketCompetitionScalarFieldEnum[] | Prisma.MarketCompetitionScalarFieldEnum
  having?: Prisma.MarketCompetitionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MarketCompetitionCountAggregateInputType | true
  _avg?: MarketCompetitionAvgAggregateInputType
  _sum?: MarketCompetitionSumAggregateInputType
  _min?: MarketCompetitionMinAggregateInputType
  _max?: MarketCompetitionMaxAggregateInputType
}

export type MarketCompetitionGroupByOutputType = {
  id: string
  marketConcentrationLevel: $Enums.MarketConcentrationLevel
  marketConcentrationJustification: string
  directCompetitors: runtime.JsonValue
  indirectCompetitors: runtime.JsonValue
  competitorFailurePoints: string[]
  unfairAdvantage: string[]
  moat: string[]
  competitivePositioningScore: number
  createdAt: Date
  updatedAt: Date
  dailyIdeaId: string
  _count: MarketCompetitionCountAggregateOutputType | null
  _avg: MarketCompetitionAvgAggregateOutputType | null
  _sum: MarketCompetitionSumAggregateOutputType | null
  _min: MarketCompetitionMinAggregateOutputType | null
  _max: MarketCompetitionMaxAggregateOutputType | null
}

type GetMarketCompetitionGroupByPayload<T extends MarketCompetitionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MarketCompetitionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MarketCompetitionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MarketCompetitionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MarketCompetitionGroupByOutputType[P]>
      }
    >
  > 



export type MarketCompetitionWhereInput = {
  AND?: Prisma.MarketCompetitionWhereInput | Prisma.MarketCompetitionWhereInput[]
  OR?: Prisma.MarketCompetitionWhereInput[]
  NOT?: Prisma.MarketCompetitionWhereInput | Prisma.MarketCompetitionWhereInput[]
  id?: Prisma.StringFilter<"MarketCompetition"> | string
  marketConcentrationLevel?: Prisma.EnumMarketConcentrationLevelFilter<"MarketCompetition"> | $Enums.MarketConcentrationLevel
  marketConcentrationJustification?: Prisma.StringFilter<"MarketCompetition"> | string
  directCompetitors?: Prisma.JsonFilter<"MarketCompetition">
  indirectCompetitors?: Prisma.JsonFilter<"MarketCompetition">
  competitorFailurePoints?: Prisma.StringNullableListFilter<"MarketCompetition">
  unfairAdvantage?: Prisma.StringNullableListFilter<"MarketCompetition">
  moat?: Prisma.StringNullableListFilter<"MarketCompetition">
  competitivePositioningScore?: Prisma.IntFilter<"MarketCompetition"> | number
  createdAt?: Prisma.DateTimeFilter<"MarketCompetition"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MarketCompetition"> | Date | string
  dailyIdeaId?: Prisma.StringFilter<"MarketCompetition"> | string
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaScalarRelationFilter, Prisma.DailyIdeaWhereInput>
}

export type MarketCompetitionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  marketConcentrationLevel?: Prisma.SortOrder
  marketConcentrationJustification?: Prisma.SortOrder
  directCompetitors?: Prisma.SortOrder
  indirectCompetitors?: Prisma.SortOrder
  competitorFailurePoints?: Prisma.SortOrder
  unfairAdvantage?: Prisma.SortOrder
  moat?: Prisma.SortOrder
  competitivePositioningScore?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
  dailyIdea?: Prisma.DailyIdeaOrderByWithRelationInput
}

export type MarketCompetitionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  dailyIdeaId?: string
  AND?: Prisma.MarketCompetitionWhereInput | Prisma.MarketCompetitionWhereInput[]
  OR?: Prisma.MarketCompetitionWhereInput[]
  NOT?: Prisma.MarketCompetitionWhereInput | Prisma.MarketCompetitionWhereInput[]
  marketConcentrationLevel?: Prisma.EnumMarketConcentrationLevelFilter<"MarketCompetition"> | $Enums.MarketConcentrationLevel
  marketConcentrationJustification?: Prisma.StringFilter<"MarketCompetition"> | string
  directCompetitors?: Prisma.JsonFilter<"MarketCompetition">
  indirectCompetitors?: Prisma.JsonFilter<"MarketCompetition">
  competitorFailurePoints?: Prisma.StringNullableListFilter<"MarketCompetition">
  unfairAdvantage?: Prisma.StringNullableListFilter<"MarketCompetition">
  moat?: Prisma.StringNullableListFilter<"MarketCompetition">
  competitivePositioningScore?: Prisma.IntFilter<"MarketCompetition"> | number
  createdAt?: Prisma.DateTimeFilter<"MarketCompetition"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MarketCompetition"> | Date | string
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaScalarRelationFilter, Prisma.DailyIdeaWhereInput>
}, "id" | "dailyIdeaId">

export type MarketCompetitionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  marketConcentrationLevel?: Prisma.SortOrder
  marketConcentrationJustification?: Prisma.SortOrder
  directCompetitors?: Prisma.SortOrder
  indirectCompetitors?: Prisma.SortOrder
  competitorFailurePoints?: Prisma.SortOrder
  unfairAdvantage?: Prisma.SortOrder
  moat?: Prisma.SortOrder
  competitivePositioningScore?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
  _count?: Prisma.MarketCompetitionCountOrderByAggregateInput
  _avg?: Prisma.MarketCompetitionAvgOrderByAggregateInput
  _max?: Prisma.MarketCompetitionMaxOrderByAggregateInput
  _min?: Prisma.MarketCompetitionMinOrderByAggregateInput
  _sum?: Prisma.MarketCompetitionSumOrderByAggregateInput
}

export type MarketCompetitionScalarWhereWithAggregatesInput = {
  AND?: Prisma.MarketCompetitionScalarWhereWithAggregatesInput | Prisma.MarketCompetitionScalarWhereWithAggregatesInput[]
  OR?: Prisma.MarketCompetitionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MarketCompetitionScalarWhereWithAggregatesInput | Prisma.MarketCompetitionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MarketCompetition"> | string
  marketConcentrationLevel?: Prisma.EnumMarketConcentrationLevelWithAggregatesFilter<"MarketCompetition"> | $Enums.MarketConcentrationLevel
  marketConcentrationJustification?: Prisma.StringWithAggregatesFilter<"MarketCompetition"> | string
  directCompetitors?: Prisma.JsonWithAggregatesFilter<"MarketCompetition">
  indirectCompetitors?: Prisma.JsonWithAggregatesFilter<"MarketCompetition">
  competitorFailurePoints?: Prisma.StringNullableListFilter<"MarketCompetition">
  unfairAdvantage?: Prisma.StringNullableListFilter<"MarketCompetition">
  moat?: Prisma.StringNullableListFilter<"MarketCompetition">
  competitivePositioningScore?: Prisma.IntWithAggregatesFilter<"MarketCompetition"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MarketCompetition"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MarketCompetition"> | Date | string
  dailyIdeaId?: Prisma.StringWithAggregatesFilter<"MarketCompetition"> | string
}

export type MarketCompetitionCreateInput = {
  id?: string
  marketConcentrationLevel: $Enums.MarketConcentrationLevel
  marketConcentrationJustification: string
  directCompetitors: Prisma.JsonNullValueInput | runtime.InputJsonValue
  indirectCompetitors: Prisma.JsonNullValueInput | runtime.InputJsonValue
  competitorFailurePoints?: Prisma.MarketCompetitionCreatecompetitorFailurePointsInput | string[]
  unfairAdvantage?: Prisma.MarketCompetitionCreateunfairAdvantageInput | string[]
  moat?: Prisma.MarketCompetitionCreatemoatInput | string[]
  competitivePositioningScore: number
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdea: Prisma.DailyIdeaCreateNestedOneWithoutMarketCompetitionInput
}

export type MarketCompetitionUncheckedCreateInput = {
  id?: string
  marketConcentrationLevel: $Enums.MarketConcentrationLevel
  marketConcentrationJustification: string
  directCompetitors: Prisma.JsonNullValueInput | runtime.InputJsonValue
  indirectCompetitors: Prisma.JsonNullValueInput | runtime.InputJsonValue
  competitorFailurePoints?: Prisma.MarketCompetitionCreatecompetitorFailurePointsInput | string[]
  unfairAdvantage?: Prisma.MarketCompetitionCreateunfairAdvantageInput | string[]
  moat?: Prisma.MarketCompetitionCreatemoatInput | string[]
  competitivePositioningScore: number
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdeaId: string
}

export type MarketCompetitionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  marketConcentrationLevel?: Prisma.EnumMarketConcentrationLevelFieldUpdateOperationsInput | $Enums.MarketConcentrationLevel
  marketConcentrationJustification?: Prisma.StringFieldUpdateOperationsInput | string
  directCompetitors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  indirectCompetitors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  competitorFailurePoints?: Prisma.MarketCompetitionUpdatecompetitorFailurePointsInput | string[]
  unfairAdvantage?: Prisma.MarketCompetitionUpdateunfairAdvantageInput | string[]
  moat?: Prisma.MarketCompetitionUpdatemoatInput | string[]
  competitivePositioningScore?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdea?: Prisma.DailyIdeaUpdateOneRequiredWithoutMarketCompetitionNestedInput
}

export type MarketCompetitionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  marketConcentrationLevel?: Prisma.EnumMarketConcentrationLevelFieldUpdateOperationsInput | $Enums.MarketConcentrationLevel
  marketConcentrationJustification?: Prisma.StringFieldUpdateOperationsInput | string
  directCompetitors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  indirectCompetitors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  competitorFailurePoints?: Prisma.MarketCompetitionUpdatecompetitorFailurePointsInput | string[]
  unfairAdvantage?: Prisma.MarketCompetitionUpdateunfairAdvantageInput | string[]
  moat?: Prisma.MarketCompetitionUpdatemoatInput | string[]
  competitivePositioningScore?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdeaId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MarketCompetitionCreateManyInput = {
  id?: string
  marketConcentrationLevel: $Enums.MarketConcentrationLevel
  marketConcentrationJustification: string
  directCompetitors: Prisma.JsonNullValueInput | runtime.InputJsonValue
  indirectCompetitors: Prisma.JsonNullValueInput | runtime.InputJsonValue
  competitorFailurePoints?: Prisma.MarketCompetitionCreatecompetitorFailurePointsInput | string[]
  unfairAdvantage?: Prisma.MarketCompetitionCreateunfairAdvantageInput | string[]
  moat?: Prisma.MarketCompetitionCreatemoatInput | string[]
  competitivePositioningScore: number
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdeaId: string
}

export type MarketCompetitionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  marketConcentrationLevel?: Prisma.EnumMarketConcentrationLevelFieldUpdateOperationsInput | $Enums.MarketConcentrationLevel
  marketConcentrationJustification?: Prisma.StringFieldUpdateOperationsInput | string
  directCompetitors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  indirectCompetitors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  competitorFailurePoints?: Prisma.MarketCompetitionUpdatecompetitorFailurePointsInput | string[]
  unfairAdvantage?: Prisma.MarketCompetitionUpdateunfairAdvantageInput | string[]
  moat?: Prisma.MarketCompetitionUpdatemoatInput | string[]
  competitivePositioningScore?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MarketCompetitionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  marketConcentrationLevel?: Prisma.EnumMarketConcentrationLevelFieldUpdateOperationsInput | $Enums.MarketConcentrationLevel
  marketConcentrationJustification?: Prisma.StringFieldUpdateOperationsInput | string
  directCompetitors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  indirectCompetitors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  competitorFailurePoints?: Prisma.MarketCompetitionUpdatecompetitorFailurePointsInput | string[]
  unfairAdvantage?: Prisma.MarketCompetitionUpdateunfairAdvantageInput | string[]
  moat?: Prisma.MarketCompetitionUpdatemoatInput | string[]
  competitivePositioningScore?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdeaId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type MarketCompetitionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  marketConcentrationLevel?: Prisma.SortOrder
  marketConcentrationJustification?: Prisma.SortOrder
  directCompetitors?: Prisma.SortOrder
  indirectCompetitors?: Prisma.SortOrder
  competitorFailurePoints?: Prisma.SortOrder
  unfairAdvantage?: Prisma.SortOrder
  moat?: Prisma.SortOrder
  competitivePositioningScore?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type MarketCompetitionAvgOrderByAggregateInput = {
  competitivePositioningScore?: Prisma.SortOrder
}

export type MarketCompetitionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  marketConcentrationLevel?: Prisma.SortOrder
  marketConcentrationJustification?: Prisma.SortOrder
  competitivePositioningScore?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type MarketCompetitionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  marketConcentrationLevel?: Prisma.SortOrder
  marketConcentrationJustification?: Prisma.SortOrder
  competitivePositioningScore?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdeaId?: Prisma.SortOrder
}

export type MarketCompetitionSumOrderByAggregateInput = {
  competitivePositioningScore?: Prisma.SortOrder
}

export type MarketCompetitionNullableScalarRelationFilter = {
  is?: Prisma.MarketCompetitionWhereInput | null
  isNot?: Prisma.MarketCompetitionWhereInput | null
}

export type MarketCompetitionCreatecompetitorFailurePointsInput = {
  set: string[]
}

export type MarketCompetitionCreateunfairAdvantageInput = {
  set: string[]
}

export type MarketCompetitionCreatemoatInput = {
  set: string[]
}

export type EnumMarketConcentrationLevelFieldUpdateOperationsInput = {
  set?: $Enums.MarketConcentrationLevel
}

export type MarketCompetitionUpdatecompetitorFailurePointsInput = {
  set?: string[]
  push?: string | string[]
}

export type MarketCompetitionUpdateunfairAdvantageInput = {
  set?: string[]
  push?: string | string[]
}

export type MarketCompetitionUpdatemoatInput = {
  set?: string[]
  push?: string | string[]
}

export type MarketCompetitionCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.MarketCompetitionCreateWithoutDailyIdeaInput, Prisma.MarketCompetitionUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.MarketCompetitionCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.MarketCompetitionWhereUniqueInput
}

export type MarketCompetitionUncheckedCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.MarketCompetitionCreateWithoutDailyIdeaInput, Prisma.MarketCompetitionUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.MarketCompetitionCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.MarketCompetitionWhereUniqueInput
}

export type MarketCompetitionUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.MarketCompetitionCreateWithoutDailyIdeaInput, Prisma.MarketCompetitionUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.MarketCompetitionCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.MarketCompetitionUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.MarketCompetitionWhereInput | boolean
  delete?: Prisma.MarketCompetitionWhereInput | boolean
  connect?: Prisma.MarketCompetitionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MarketCompetitionUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.MarketCompetitionUpdateWithoutDailyIdeaInput>, Prisma.MarketCompetitionUncheckedUpdateWithoutDailyIdeaInput>
}

export type MarketCompetitionUncheckedUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.MarketCompetitionCreateWithoutDailyIdeaInput, Prisma.MarketCompetitionUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.MarketCompetitionCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.MarketCompetitionUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.MarketCompetitionWhereInput | boolean
  delete?: Prisma.MarketCompetitionWhereInput | boolean
  connect?: Prisma.MarketCompetitionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MarketCompetitionUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.MarketCompetitionUpdateWithoutDailyIdeaInput>, Prisma.MarketCompetitionUncheckedUpdateWithoutDailyIdeaInput>
}

export type MarketCompetitionCreateWithoutDailyIdeaInput = {
  id?: string
  marketConcentrationLevel: $Enums.MarketConcentrationLevel
  marketConcentrationJustification: string
  directCompetitors: Prisma.JsonNullValueInput | runtime.InputJsonValue
  indirectCompetitors: Prisma.JsonNullValueInput | runtime.InputJsonValue
  competitorFailurePoints?: Prisma.MarketCompetitionCreatecompetitorFailurePointsInput | string[]
  unfairAdvantage?: Prisma.MarketCompetitionCreateunfairAdvantageInput | string[]
  moat?: Prisma.MarketCompetitionCreatemoatInput | string[]
  competitivePositioningScore: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MarketCompetitionUncheckedCreateWithoutDailyIdeaInput = {
  id?: string
  marketConcentrationLevel: $Enums.MarketConcentrationLevel
  marketConcentrationJustification: string
  directCompetitors: Prisma.JsonNullValueInput | runtime.InputJsonValue
  indirectCompetitors: Prisma.JsonNullValueInput | runtime.InputJsonValue
  competitorFailurePoints?: Prisma.MarketCompetitionCreatecompetitorFailurePointsInput | string[]
  unfairAdvantage?: Prisma.MarketCompetitionCreateunfairAdvantageInput | string[]
  moat?: Prisma.MarketCompetitionCreatemoatInput | string[]
  competitivePositioningScore: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MarketCompetitionCreateOrConnectWithoutDailyIdeaInput = {
  where: Prisma.MarketCompetitionWhereUniqueInput
  create: Prisma.XOR<Prisma.MarketCompetitionCreateWithoutDailyIdeaInput, Prisma.MarketCompetitionUncheckedCreateWithoutDailyIdeaInput>
}

export type MarketCompetitionUpsertWithoutDailyIdeaInput = {
  update: Prisma.XOR<Prisma.MarketCompetitionUpdateWithoutDailyIdeaInput, Prisma.MarketCompetitionUncheckedUpdateWithoutDailyIdeaInput>
  create: Prisma.XOR<Prisma.MarketCompetitionCreateWithoutDailyIdeaInput, Prisma.MarketCompetitionUncheckedCreateWithoutDailyIdeaInput>
  where?: Prisma.MarketCompetitionWhereInput
}

export type MarketCompetitionUpdateToOneWithWhereWithoutDailyIdeaInput = {
  where?: Prisma.MarketCompetitionWhereInput
  data: Prisma.XOR<Prisma.MarketCompetitionUpdateWithoutDailyIdeaInput, Prisma.MarketCompetitionUncheckedUpdateWithoutDailyIdeaInput>
}

export type MarketCompetitionUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  marketConcentrationLevel?: Prisma.EnumMarketConcentrationLevelFieldUpdateOperationsInput | $Enums.MarketConcentrationLevel
  marketConcentrationJustification?: Prisma.StringFieldUpdateOperationsInput | string
  directCompetitors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  indirectCompetitors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  competitorFailurePoints?: Prisma.MarketCompetitionUpdatecompetitorFailurePointsInput | string[]
  unfairAdvantage?: Prisma.MarketCompetitionUpdateunfairAdvantageInput | string[]
  moat?: Prisma.MarketCompetitionUpdatemoatInput | string[]
  competitivePositioningScore?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MarketCompetitionUncheckedUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  marketConcentrationLevel?: Prisma.EnumMarketConcentrationLevelFieldUpdateOperationsInput | $Enums.MarketConcentrationLevel
  marketConcentrationJustification?: Prisma.StringFieldUpdateOperationsInput | string
  directCompetitors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  indirectCompetitors?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  competitorFailurePoints?: Prisma.MarketCompetitionUpdatecompetitorFailurePointsInput | string[]
  unfairAdvantage?: Prisma.MarketCompetitionUpdateunfairAdvantageInput | string[]
  moat?: Prisma.MarketCompetitionUpdatemoatInput | string[]
  competitivePositioningScore?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MarketCompetitionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  marketConcentrationLevel?: boolean
  marketConcentrationJustification?: boolean
  directCompetitors?: boolean
  indirectCompetitors?: boolean
  competitorFailurePoints?: boolean
  unfairAdvantage?: boolean
  moat?: boolean
  competitivePositioningScore?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["marketCompetition"]>

export type MarketCompetitionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  marketConcentrationLevel?: boolean
  marketConcentrationJustification?: boolean
  directCompetitors?: boolean
  indirectCompetitors?: boolean
  competitorFailurePoints?: boolean
  unfairAdvantage?: boolean
  moat?: boolean
  competitivePositioningScore?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["marketCompetition"]>

export type MarketCompetitionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  marketConcentrationLevel?: boolean
  marketConcentrationJustification?: boolean
  directCompetitors?: boolean
  indirectCompetitors?: boolean
  competitorFailurePoints?: boolean
  unfairAdvantage?: boolean
  moat?: boolean
  competitivePositioningScore?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["marketCompetition"]>

export type MarketCompetitionSelectScalar = {
  id?: boolean
  marketConcentrationLevel?: boolean
  marketConcentrationJustification?: boolean
  directCompetitors?: boolean
  indirectCompetitors?: boolean
  competitorFailurePoints?: boolean
  unfairAdvantage?: boolean
  moat?: boolean
  competitivePositioningScore?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdeaId?: boolean
}

export type MarketCompetitionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "marketConcentrationLevel" | "marketConcentrationJustification" | "directCompetitors" | "indirectCompetitors" | "competitorFailurePoints" | "unfairAdvantage" | "moat" | "competitivePositioningScore" | "createdAt" | "updatedAt" | "dailyIdeaId", ExtArgs["result"]["marketCompetition"]>
export type MarketCompetitionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}
export type MarketCompetitionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}
export type MarketCompetitionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.DailyIdeaDefaultArgs<ExtArgs>
}

export type $MarketCompetitionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MarketCompetition"
  objects: {
    dailyIdea: Prisma.$DailyIdeaPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    marketConcentrationLevel: $Enums.MarketConcentrationLevel
    marketConcentrationJustification: string
    directCompetitors: runtime.JsonValue
    indirectCompetitors: runtime.JsonValue
    competitorFailurePoints: string[]
    unfairAdvantage: string[]
    moat: string[]
    competitivePositioningScore: number
    createdAt: Date
    updatedAt: Date
    dailyIdeaId: string
  }, ExtArgs["result"]["marketCompetition"]>
  composites: {}
}

export type MarketCompetitionGetPayload<S extends boolean | null | undefined | MarketCompetitionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MarketCompetitionPayload, S>

export type MarketCompetitionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MarketCompetitionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MarketCompetitionCountAggregateInputType | true
  }

export interface MarketCompetitionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MarketCompetition'], meta: { name: 'MarketCompetition' } }
  /**
   * Find zero or one MarketCompetition that matches the filter.
   * @param {MarketCompetitionFindUniqueArgs} args - Arguments to find a MarketCompetition
   * @example
   * // Get one MarketCompetition
   * const marketCompetition = await prisma.marketCompetition.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MarketCompetitionFindUniqueArgs>(args: Prisma.SelectSubset<T, MarketCompetitionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MarketCompetitionClient<runtime.Types.Result.GetResult<Prisma.$MarketCompetitionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MarketCompetition that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MarketCompetitionFindUniqueOrThrowArgs} args - Arguments to find a MarketCompetition
   * @example
   * // Get one MarketCompetition
   * const marketCompetition = await prisma.marketCompetition.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MarketCompetitionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MarketCompetitionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MarketCompetitionClient<runtime.Types.Result.GetResult<Prisma.$MarketCompetitionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MarketCompetition that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketCompetitionFindFirstArgs} args - Arguments to find a MarketCompetition
   * @example
   * // Get one MarketCompetition
   * const marketCompetition = await prisma.marketCompetition.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MarketCompetitionFindFirstArgs>(args?: Prisma.SelectSubset<T, MarketCompetitionFindFirstArgs<ExtArgs>>): Prisma.Prisma__MarketCompetitionClient<runtime.Types.Result.GetResult<Prisma.$MarketCompetitionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MarketCompetition that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketCompetitionFindFirstOrThrowArgs} args - Arguments to find a MarketCompetition
   * @example
   * // Get one MarketCompetition
   * const marketCompetition = await prisma.marketCompetition.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MarketCompetitionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MarketCompetitionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MarketCompetitionClient<runtime.Types.Result.GetResult<Prisma.$MarketCompetitionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MarketCompetitions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketCompetitionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MarketCompetitions
   * const marketCompetitions = await prisma.marketCompetition.findMany()
   * 
   * // Get first 10 MarketCompetitions
   * const marketCompetitions = await prisma.marketCompetition.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const marketCompetitionWithIdOnly = await prisma.marketCompetition.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MarketCompetitionFindManyArgs>(args?: Prisma.SelectSubset<T, MarketCompetitionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MarketCompetitionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MarketCompetition.
   * @param {MarketCompetitionCreateArgs} args - Arguments to create a MarketCompetition.
   * @example
   * // Create one MarketCompetition
   * const MarketCompetition = await prisma.marketCompetition.create({
   *   data: {
   *     // ... data to create a MarketCompetition
   *   }
   * })
   * 
   */
  create<T extends MarketCompetitionCreateArgs>(args: Prisma.SelectSubset<T, MarketCompetitionCreateArgs<ExtArgs>>): Prisma.Prisma__MarketCompetitionClient<runtime.Types.Result.GetResult<Prisma.$MarketCompetitionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MarketCompetitions.
   * @param {MarketCompetitionCreateManyArgs} args - Arguments to create many MarketCompetitions.
   * @example
   * // Create many MarketCompetitions
   * const marketCompetition = await prisma.marketCompetition.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MarketCompetitionCreateManyArgs>(args?: Prisma.SelectSubset<T, MarketCompetitionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MarketCompetitions and returns the data saved in the database.
   * @param {MarketCompetitionCreateManyAndReturnArgs} args - Arguments to create many MarketCompetitions.
   * @example
   * // Create many MarketCompetitions
   * const marketCompetition = await prisma.marketCompetition.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MarketCompetitions and only return the `id`
   * const marketCompetitionWithIdOnly = await prisma.marketCompetition.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MarketCompetitionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MarketCompetitionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MarketCompetitionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MarketCompetition.
   * @param {MarketCompetitionDeleteArgs} args - Arguments to delete one MarketCompetition.
   * @example
   * // Delete one MarketCompetition
   * const MarketCompetition = await prisma.marketCompetition.delete({
   *   where: {
   *     // ... filter to delete one MarketCompetition
   *   }
   * })
   * 
   */
  delete<T extends MarketCompetitionDeleteArgs>(args: Prisma.SelectSubset<T, MarketCompetitionDeleteArgs<ExtArgs>>): Prisma.Prisma__MarketCompetitionClient<runtime.Types.Result.GetResult<Prisma.$MarketCompetitionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MarketCompetition.
   * @param {MarketCompetitionUpdateArgs} args - Arguments to update one MarketCompetition.
   * @example
   * // Update one MarketCompetition
   * const marketCompetition = await prisma.marketCompetition.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MarketCompetitionUpdateArgs>(args: Prisma.SelectSubset<T, MarketCompetitionUpdateArgs<ExtArgs>>): Prisma.Prisma__MarketCompetitionClient<runtime.Types.Result.GetResult<Prisma.$MarketCompetitionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MarketCompetitions.
   * @param {MarketCompetitionDeleteManyArgs} args - Arguments to filter MarketCompetitions to delete.
   * @example
   * // Delete a few MarketCompetitions
   * const { count } = await prisma.marketCompetition.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MarketCompetitionDeleteManyArgs>(args?: Prisma.SelectSubset<T, MarketCompetitionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MarketCompetitions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketCompetitionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MarketCompetitions
   * const marketCompetition = await prisma.marketCompetition.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MarketCompetitionUpdateManyArgs>(args: Prisma.SelectSubset<T, MarketCompetitionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MarketCompetitions and returns the data updated in the database.
   * @param {MarketCompetitionUpdateManyAndReturnArgs} args - Arguments to update many MarketCompetitions.
   * @example
   * // Update many MarketCompetitions
   * const marketCompetition = await prisma.marketCompetition.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MarketCompetitions and only return the `id`
   * const marketCompetitionWithIdOnly = await prisma.marketCompetition.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MarketCompetitionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MarketCompetitionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MarketCompetitionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MarketCompetition.
   * @param {MarketCompetitionUpsertArgs} args - Arguments to update or create a MarketCompetition.
   * @example
   * // Update or create a MarketCompetition
   * const marketCompetition = await prisma.marketCompetition.upsert({
   *   create: {
   *     // ... data to create a MarketCompetition
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MarketCompetition we want to update
   *   }
   * })
   */
  upsert<T extends MarketCompetitionUpsertArgs>(args: Prisma.SelectSubset<T, MarketCompetitionUpsertArgs<ExtArgs>>): Prisma.Prisma__MarketCompetitionClient<runtime.Types.Result.GetResult<Prisma.$MarketCompetitionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MarketCompetitions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketCompetitionCountArgs} args - Arguments to filter MarketCompetitions to count.
   * @example
   * // Count the number of MarketCompetitions
   * const count = await prisma.marketCompetition.count({
   *   where: {
   *     // ... the filter for the MarketCompetitions we want to count
   *   }
   * })
  **/
  count<T extends MarketCompetitionCountArgs>(
    args?: Prisma.Subset<T, MarketCompetitionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MarketCompetitionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MarketCompetition.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketCompetitionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MarketCompetitionAggregateArgs>(args: Prisma.Subset<T, MarketCompetitionAggregateArgs>): Prisma.PrismaPromise<GetMarketCompetitionAggregateType<T>>

  /**
   * Group by MarketCompetition.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarketCompetitionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MarketCompetitionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MarketCompetitionGroupByArgs['orderBy'] }
      : { orderBy?: MarketCompetitionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MarketCompetitionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarketCompetitionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MarketCompetition model
 */
readonly fields: MarketCompetitionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MarketCompetition.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MarketCompetitionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  dailyIdea<T extends Prisma.DailyIdeaDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DailyIdeaDefaultArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MarketCompetition model
 */
export interface MarketCompetitionFieldRefs {
  readonly id: Prisma.FieldRef<"MarketCompetition", 'String'>
  readonly marketConcentrationLevel: Prisma.FieldRef<"MarketCompetition", 'MarketConcentrationLevel'>
  readonly marketConcentrationJustification: Prisma.FieldRef<"MarketCompetition", 'String'>
  readonly directCompetitors: Prisma.FieldRef<"MarketCompetition", 'Json'>
  readonly indirectCompetitors: Prisma.FieldRef<"MarketCompetition", 'Json'>
  readonly competitorFailurePoints: Prisma.FieldRef<"MarketCompetition", 'String[]'>
  readonly unfairAdvantage: Prisma.FieldRef<"MarketCompetition", 'String[]'>
  readonly moat: Prisma.FieldRef<"MarketCompetition", 'String[]'>
  readonly competitivePositioningScore: Prisma.FieldRef<"MarketCompetition", 'Int'>
  readonly createdAt: Prisma.FieldRef<"MarketCompetition", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MarketCompetition", 'DateTime'>
  readonly dailyIdeaId: Prisma.FieldRef<"MarketCompetition", 'String'>
}
    

// Custom InputTypes
/**
 * MarketCompetition findUnique
 */
export type MarketCompetitionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketCompetition
   */
  select?: Prisma.MarketCompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketCompetition
   */
  omit?: Prisma.MarketCompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketCompetitionInclude<ExtArgs> | null
  /**
   * Filter, which MarketCompetition to fetch.
   */
  where: Prisma.MarketCompetitionWhereUniqueInput
}

/**
 * MarketCompetition findUniqueOrThrow
 */
export type MarketCompetitionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketCompetition
   */
  select?: Prisma.MarketCompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketCompetition
   */
  omit?: Prisma.MarketCompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketCompetitionInclude<ExtArgs> | null
  /**
   * Filter, which MarketCompetition to fetch.
   */
  where: Prisma.MarketCompetitionWhereUniqueInput
}

/**
 * MarketCompetition findFirst
 */
export type MarketCompetitionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketCompetition
   */
  select?: Prisma.MarketCompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketCompetition
   */
  omit?: Prisma.MarketCompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketCompetitionInclude<ExtArgs> | null
  /**
   * Filter, which MarketCompetition to fetch.
   */
  where?: Prisma.MarketCompetitionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MarketCompetitions to fetch.
   */
  orderBy?: Prisma.MarketCompetitionOrderByWithRelationInput | Prisma.MarketCompetitionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MarketCompetitions.
   */
  cursor?: Prisma.MarketCompetitionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MarketCompetitions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MarketCompetitions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MarketCompetitions.
   */
  distinct?: Prisma.MarketCompetitionScalarFieldEnum | Prisma.MarketCompetitionScalarFieldEnum[]
}

/**
 * MarketCompetition findFirstOrThrow
 */
export type MarketCompetitionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketCompetition
   */
  select?: Prisma.MarketCompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketCompetition
   */
  omit?: Prisma.MarketCompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketCompetitionInclude<ExtArgs> | null
  /**
   * Filter, which MarketCompetition to fetch.
   */
  where?: Prisma.MarketCompetitionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MarketCompetitions to fetch.
   */
  orderBy?: Prisma.MarketCompetitionOrderByWithRelationInput | Prisma.MarketCompetitionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MarketCompetitions.
   */
  cursor?: Prisma.MarketCompetitionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MarketCompetitions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MarketCompetitions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MarketCompetitions.
   */
  distinct?: Prisma.MarketCompetitionScalarFieldEnum | Prisma.MarketCompetitionScalarFieldEnum[]
}

/**
 * MarketCompetition findMany
 */
export type MarketCompetitionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketCompetition
   */
  select?: Prisma.MarketCompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketCompetition
   */
  omit?: Prisma.MarketCompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketCompetitionInclude<ExtArgs> | null
  /**
   * Filter, which MarketCompetitions to fetch.
   */
  where?: Prisma.MarketCompetitionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MarketCompetitions to fetch.
   */
  orderBy?: Prisma.MarketCompetitionOrderByWithRelationInput | Prisma.MarketCompetitionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MarketCompetitions.
   */
  cursor?: Prisma.MarketCompetitionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MarketCompetitions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MarketCompetitions.
   */
  skip?: number
  distinct?: Prisma.MarketCompetitionScalarFieldEnum | Prisma.MarketCompetitionScalarFieldEnum[]
}

/**
 * MarketCompetition create
 */
export type MarketCompetitionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketCompetition
   */
  select?: Prisma.MarketCompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketCompetition
   */
  omit?: Prisma.MarketCompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketCompetitionInclude<ExtArgs> | null
  /**
   * The data needed to create a MarketCompetition.
   */
  data: Prisma.XOR<Prisma.MarketCompetitionCreateInput, Prisma.MarketCompetitionUncheckedCreateInput>
}

/**
 * MarketCompetition createMany
 */
export type MarketCompetitionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MarketCompetitions.
   */
  data: Prisma.MarketCompetitionCreateManyInput | Prisma.MarketCompetitionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MarketCompetition createManyAndReturn
 */
export type MarketCompetitionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketCompetition
   */
  select?: Prisma.MarketCompetitionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MarketCompetition
   */
  omit?: Prisma.MarketCompetitionOmit<ExtArgs> | null
  /**
   * The data used to create many MarketCompetitions.
   */
  data: Prisma.MarketCompetitionCreateManyInput | Prisma.MarketCompetitionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketCompetitionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MarketCompetition update
 */
export type MarketCompetitionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketCompetition
   */
  select?: Prisma.MarketCompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketCompetition
   */
  omit?: Prisma.MarketCompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketCompetitionInclude<ExtArgs> | null
  /**
   * The data needed to update a MarketCompetition.
   */
  data: Prisma.XOR<Prisma.MarketCompetitionUpdateInput, Prisma.MarketCompetitionUncheckedUpdateInput>
  /**
   * Choose, which MarketCompetition to update.
   */
  where: Prisma.MarketCompetitionWhereUniqueInput
}

/**
 * MarketCompetition updateMany
 */
export type MarketCompetitionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MarketCompetitions.
   */
  data: Prisma.XOR<Prisma.MarketCompetitionUpdateManyMutationInput, Prisma.MarketCompetitionUncheckedUpdateManyInput>
  /**
   * Filter which MarketCompetitions to update
   */
  where?: Prisma.MarketCompetitionWhereInput
  /**
   * Limit how many MarketCompetitions to update.
   */
  limit?: number
}

/**
 * MarketCompetition updateManyAndReturn
 */
export type MarketCompetitionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketCompetition
   */
  select?: Prisma.MarketCompetitionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MarketCompetition
   */
  omit?: Prisma.MarketCompetitionOmit<ExtArgs> | null
  /**
   * The data used to update MarketCompetitions.
   */
  data: Prisma.XOR<Prisma.MarketCompetitionUpdateManyMutationInput, Prisma.MarketCompetitionUncheckedUpdateManyInput>
  /**
   * Filter which MarketCompetitions to update
   */
  where?: Prisma.MarketCompetitionWhereInput
  /**
   * Limit how many MarketCompetitions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketCompetitionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MarketCompetition upsert
 */
export type MarketCompetitionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketCompetition
   */
  select?: Prisma.MarketCompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketCompetition
   */
  omit?: Prisma.MarketCompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketCompetitionInclude<ExtArgs> | null
  /**
   * The filter to search for the MarketCompetition to update in case it exists.
   */
  where: Prisma.MarketCompetitionWhereUniqueInput
  /**
   * In case the MarketCompetition found by the `where` argument doesn't exist, create a new MarketCompetition with this data.
   */
  create: Prisma.XOR<Prisma.MarketCompetitionCreateInput, Prisma.MarketCompetitionUncheckedCreateInput>
  /**
   * In case the MarketCompetition was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MarketCompetitionUpdateInput, Prisma.MarketCompetitionUncheckedUpdateInput>
}

/**
 * MarketCompetition delete
 */
export type MarketCompetitionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketCompetition
   */
  select?: Prisma.MarketCompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketCompetition
   */
  omit?: Prisma.MarketCompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketCompetitionInclude<ExtArgs> | null
  /**
   * Filter which MarketCompetition to delete.
   */
  where: Prisma.MarketCompetitionWhereUniqueInput
}

/**
 * MarketCompetition deleteMany
 */
export type MarketCompetitionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MarketCompetitions to delete
   */
  where?: Prisma.MarketCompetitionWhereInput
  /**
   * Limit how many MarketCompetitions to delete.
   */
  limit?: number
}

/**
 * MarketCompetition without action
 */
export type MarketCompetitionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarketCompetition
   */
  select?: Prisma.MarketCompetitionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MarketCompetition
   */
  omit?: Prisma.MarketCompetitionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarketCompetitionInclude<ExtArgs> | null
}
