
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `IdeaScore` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model IdeaScore
 * 
 */
export type IdeaScoreModel = runtime.Types.Result.DefaultSelection<Prisma.$IdeaScorePayload>

export type AggregateIdeaScore = {
  _count: IdeaScoreCountAggregateOutputType | null
  _avg: IdeaScoreAvgAggregateOutputType | null
  _sum: IdeaScoreSumAggregateOutputType | null
  _min: IdeaScoreMinAggregateOutputType | null
  _max: IdeaScoreMaxAggregateOutputType | null
}

export type IdeaScoreAvgAggregateOutputType = {
  totalScore: number | null
  problemSeverity: number | null
  founderMarketFit: number | null
  technicalFeasibility: number | null
  monetizationPotential: number | null
  urgencyScore: number | null
  marketTimingScore: number | null
  executionDifficulty: number | null
  moatStrength: number | null
  regulatoryRisk: number | null
}

export type IdeaScoreSumAggregateOutputType = {
  totalScore: number | null
  problemSeverity: number | null
  founderMarketFit: number | null
  technicalFeasibility: number | null
  monetizationPotential: number | null
  urgencyScore: number | null
  marketTimingScore: number | null
  executionDifficulty: number | null
  moatStrength: number | null
  regulatoryRisk: number | null
}

export type IdeaScoreMinAggregateOutputType = {
  id: string | null
  totalScore: number | null
  problemSeverity: number | null
  founderMarketFit: number | null
  technicalFeasibility: number | null
  monetizationPotential: number | null
  urgencyScore: number | null
  marketTimingScore: number | null
  executionDifficulty: number | null
  moatStrength: number | null
  regulatoryRisk: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type IdeaScoreMaxAggregateOutputType = {
  id: string | null
  totalScore: number | null
  problemSeverity: number | null
  founderMarketFit: number | null
  technicalFeasibility: number | null
  monetizationPotential: number | null
  urgencyScore: number | null
  marketTimingScore: number | null
  executionDifficulty: number | null
  moatStrength: number | null
  regulatoryRisk: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type IdeaScoreCountAggregateOutputType = {
  id: number
  totalScore: number
  problemSeverity: number
  founderMarketFit: number
  technicalFeasibility: number
  monetizationPotential: number
  urgencyScore: number
  marketTimingScore: number
  executionDifficulty: number
  moatStrength: number
  regulatoryRisk: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type IdeaScoreAvgAggregateInputType = {
  totalScore?: true
  problemSeverity?: true
  founderMarketFit?: true
  technicalFeasibility?: true
  monetizationPotential?: true
  urgencyScore?: true
  marketTimingScore?: true
  executionDifficulty?: true
  moatStrength?: true
  regulatoryRisk?: true
}

export type IdeaScoreSumAggregateInputType = {
  totalScore?: true
  problemSeverity?: true
  founderMarketFit?: true
  technicalFeasibility?: true
  monetizationPotential?: true
  urgencyScore?: true
  marketTimingScore?: true
  executionDifficulty?: true
  moatStrength?: true
  regulatoryRisk?: true
}

export type IdeaScoreMinAggregateInputType = {
  id?: true
  totalScore?: true
  problemSeverity?: true
  founderMarketFit?: true
  technicalFeasibility?: true
  monetizationPotential?: true
  urgencyScore?: true
  marketTimingScore?: true
  executionDifficulty?: true
  moatStrength?: true
  regulatoryRisk?: true
  createdAt?: true
  updatedAt?: true
}

export type IdeaScoreMaxAggregateInputType = {
  id?: true
  totalScore?: true
  problemSeverity?: true
  founderMarketFit?: true
  technicalFeasibility?: true
  monetizationPotential?: true
  urgencyScore?: true
  marketTimingScore?: true
  executionDifficulty?: true
  moatStrength?: true
  regulatoryRisk?: true
  createdAt?: true
  updatedAt?: true
}

export type IdeaScoreCountAggregateInputType = {
  id?: true
  totalScore?: true
  problemSeverity?: true
  founderMarketFit?: true
  technicalFeasibility?: true
  monetizationPotential?: true
  urgencyScore?: true
  marketTimingScore?: true
  executionDifficulty?: true
  moatStrength?: true
  regulatoryRisk?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type IdeaScoreAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IdeaScore to aggregate.
   */
  where?: Prisma.IdeaScoreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IdeaScores to fetch.
   */
  orderBy?: Prisma.IdeaScoreOrderByWithRelationInput | Prisma.IdeaScoreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.IdeaScoreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IdeaScores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IdeaScores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned IdeaScores
  **/
  _count?: true | IdeaScoreCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: IdeaScoreAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: IdeaScoreSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IdeaScoreMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IdeaScoreMaxAggregateInputType
}

export type GetIdeaScoreAggregateType<T extends IdeaScoreAggregateArgs> = {
      [P in keyof T & keyof AggregateIdeaScore]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIdeaScore[P]>
    : Prisma.GetScalarType<T[P], AggregateIdeaScore[P]>
}




export type IdeaScoreGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IdeaScoreWhereInput
  orderBy?: Prisma.IdeaScoreOrderByWithAggregationInput | Prisma.IdeaScoreOrderByWithAggregationInput[]
  by: Prisma.IdeaScoreScalarFieldEnum[] | Prisma.IdeaScoreScalarFieldEnum
  having?: Prisma.IdeaScoreScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IdeaScoreCountAggregateInputType | true
  _avg?: IdeaScoreAvgAggregateInputType
  _sum?: IdeaScoreSumAggregateInputType
  _min?: IdeaScoreMinAggregateInputType
  _max?: IdeaScoreMaxAggregateInputType
}

export type IdeaScoreGroupByOutputType = {
  id: string
  totalScore: number
  problemSeverity: number
  founderMarketFit: number
  technicalFeasibility: number
  monetizationPotential: number
  urgencyScore: number
  marketTimingScore: number
  executionDifficulty: number
  moatStrength: number
  regulatoryRisk: number
  createdAt: Date
  updatedAt: Date
  _count: IdeaScoreCountAggregateOutputType | null
  _avg: IdeaScoreAvgAggregateOutputType | null
  _sum: IdeaScoreSumAggregateOutputType | null
  _min: IdeaScoreMinAggregateOutputType | null
  _max: IdeaScoreMaxAggregateOutputType | null
}

type GetIdeaScoreGroupByPayload<T extends IdeaScoreGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IdeaScoreGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IdeaScoreGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IdeaScoreGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IdeaScoreGroupByOutputType[P]>
      }
    >
  > 



export type IdeaScoreWhereInput = {
  AND?: Prisma.IdeaScoreWhereInput | Prisma.IdeaScoreWhereInput[]
  OR?: Prisma.IdeaScoreWhereInput[]
  NOT?: Prisma.IdeaScoreWhereInput | Prisma.IdeaScoreWhereInput[]
  id?: Prisma.StringFilter<"IdeaScore"> | string
  totalScore?: Prisma.IntFilter<"IdeaScore"> | number
  problemSeverity?: Prisma.IntFilter<"IdeaScore"> | number
  founderMarketFit?: Prisma.IntFilter<"IdeaScore"> | number
  technicalFeasibility?: Prisma.IntFilter<"IdeaScore"> | number
  monetizationPotential?: Prisma.IntFilter<"IdeaScore"> | number
  urgencyScore?: Prisma.IntFilter<"IdeaScore"> | number
  marketTimingScore?: Prisma.IntFilter<"IdeaScore"> | number
  executionDifficulty?: Prisma.IntFilter<"IdeaScore"> | number
  moatStrength?: Prisma.IntFilter<"IdeaScore"> | number
  regulatoryRisk?: Prisma.IntFilter<"IdeaScore"> | number
  createdAt?: Prisma.DateTimeFilter<"IdeaScore"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"IdeaScore"> | Date | string
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaNullableScalarRelationFilter, Prisma.DailyIdeaWhereInput> | null
}

export type IdeaScoreOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  totalScore?: Prisma.SortOrder
  problemSeverity?: Prisma.SortOrder
  founderMarketFit?: Prisma.SortOrder
  technicalFeasibility?: Prisma.SortOrder
  monetizationPotential?: Prisma.SortOrder
  urgencyScore?: Prisma.SortOrder
  marketTimingScore?: Prisma.SortOrder
  executionDifficulty?: Prisma.SortOrder
  moatStrength?: Prisma.SortOrder
  regulatoryRisk?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  dailyIdea?: Prisma.DailyIdeaOrderByWithRelationInput
}

export type IdeaScoreWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.IdeaScoreWhereInput | Prisma.IdeaScoreWhereInput[]
  OR?: Prisma.IdeaScoreWhereInput[]
  NOT?: Prisma.IdeaScoreWhereInput | Prisma.IdeaScoreWhereInput[]
  totalScore?: Prisma.IntFilter<"IdeaScore"> | number
  problemSeverity?: Prisma.IntFilter<"IdeaScore"> | number
  founderMarketFit?: Prisma.IntFilter<"IdeaScore"> | number
  technicalFeasibility?: Prisma.IntFilter<"IdeaScore"> | number
  monetizationPotential?: Prisma.IntFilter<"IdeaScore"> | number
  urgencyScore?: Prisma.IntFilter<"IdeaScore"> | number
  marketTimingScore?: Prisma.IntFilter<"IdeaScore"> | number
  executionDifficulty?: Prisma.IntFilter<"IdeaScore"> | number
  moatStrength?: Prisma.IntFilter<"IdeaScore"> | number
  regulatoryRisk?: Prisma.IntFilter<"IdeaScore"> | number
  createdAt?: Prisma.DateTimeFilter<"IdeaScore"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"IdeaScore"> | Date | string
  dailyIdea?: Prisma.XOR<Prisma.DailyIdeaNullableScalarRelationFilter, Prisma.DailyIdeaWhereInput> | null
}, "id">

export type IdeaScoreOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  totalScore?: Prisma.SortOrder
  problemSeverity?: Prisma.SortOrder
  founderMarketFit?: Prisma.SortOrder
  technicalFeasibility?: Prisma.SortOrder
  monetizationPotential?: Prisma.SortOrder
  urgencyScore?: Prisma.SortOrder
  marketTimingScore?: Prisma.SortOrder
  executionDifficulty?: Prisma.SortOrder
  moatStrength?: Prisma.SortOrder
  regulatoryRisk?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.IdeaScoreCountOrderByAggregateInput
  _avg?: Prisma.IdeaScoreAvgOrderByAggregateInput
  _max?: Prisma.IdeaScoreMaxOrderByAggregateInput
  _min?: Prisma.IdeaScoreMinOrderByAggregateInput
  _sum?: Prisma.IdeaScoreSumOrderByAggregateInput
}

export type IdeaScoreScalarWhereWithAggregatesInput = {
  AND?: Prisma.IdeaScoreScalarWhereWithAggregatesInput | Prisma.IdeaScoreScalarWhereWithAggregatesInput[]
  OR?: Prisma.IdeaScoreScalarWhereWithAggregatesInput[]
  NOT?: Prisma.IdeaScoreScalarWhereWithAggregatesInput | Prisma.IdeaScoreScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"IdeaScore"> | string
  totalScore?: Prisma.IntWithAggregatesFilter<"IdeaScore"> | number
  problemSeverity?: Prisma.IntWithAggregatesFilter<"IdeaScore"> | number
  founderMarketFit?: Prisma.IntWithAggregatesFilter<"IdeaScore"> | number
  technicalFeasibility?: Prisma.IntWithAggregatesFilter<"IdeaScore"> | number
  monetizationPotential?: Prisma.IntWithAggregatesFilter<"IdeaScore"> | number
  urgencyScore?: Prisma.IntWithAggregatesFilter<"IdeaScore"> | number
  marketTimingScore?: Prisma.IntWithAggregatesFilter<"IdeaScore"> | number
  executionDifficulty?: Prisma.IntWithAggregatesFilter<"IdeaScore"> | number
  moatStrength?: Prisma.IntWithAggregatesFilter<"IdeaScore"> | number
  regulatoryRisk?: Prisma.IntWithAggregatesFilter<"IdeaScore"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"IdeaScore"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"IdeaScore"> | Date | string
}

export type IdeaScoreCreateInput = {
  id?: string
  totalScore: number
  problemSeverity: number
  founderMarketFit: number
  technicalFeasibility: number
  monetizationPotential: number
  urgencyScore: number
  marketTimingScore: number
  executionDifficulty: number
  moatStrength: number
  regulatoryRisk: number
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdea?: Prisma.DailyIdeaCreateNestedOneWithoutIdeaScoreInput
}

export type IdeaScoreUncheckedCreateInput = {
  id?: string
  totalScore: number
  problemSeverity: number
  founderMarketFit: number
  technicalFeasibility: number
  monetizationPotential: number
  urgencyScore: number
  marketTimingScore: number
  executionDifficulty: number
  moatStrength: number
  regulatoryRisk: number
  createdAt?: Date | string
  updatedAt?: Date | string
  dailyIdea?: Prisma.DailyIdeaUncheckedCreateNestedOneWithoutIdeaScoreInput
}

export type IdeaScoreUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalScore?: Prisma.IntFieldUpdateOperationsInput | number
  problemSeverity?: Prisma.IntFieldUpdateOperationsInput | number
  founderMarketFit?: Prisma.IntFieldUpdateOperationsInput | number
  technicalFeasibility?: Prisma.IntFieldUpdateOperationsInput | number
  monetizationPotential?: Prisma.IntFieldUpdateOperationsInput | number
  urgencyScore?: Prisma.IntFieldUpdateOperationsInput | number
  marketTimingScore?: Prisma.IntFieldUpdateOperationsInput | number
  executionDifficulty?: Prisma.IntFieldUpdateOperationsInput | number
  moatStrength?: Prisma.IntFieldUpdateOperationsInput | number
  regulatoryRisk?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdea?: Prisma.DailyIdeaUpdateOneWithoutIdeaScoreNestedInput
}

export type IdeaScoreUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalScore?: Prisma.IntFieldUpdateOperationsInput | number
  problemSeverity?: Prisma.IntFieldUpdateOperationsInput | number
  founderMarketFit?: Prisma.IntFieldUpdateOperationsInput | number
  technicalFeasibility?: Prisma.IntFieldUpdateOperationsInput | number
  monetizationPotential?: Prisma.IntFieldUpdateOperationsInput | number
  urgencyScore?: Prisma.IntFieldUpdateOperationsInput | number
  marketTimingScore?: Prisma.IntFieldUpdateOperationsInput | number
  executionDifficulty?: Prisma.IntFieldUpdateOperationsInput | number
  moatStrength?: Prisma.IntFieldUpdateOperationsInput | number
  regulatoryRisk?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dailyIdea?: Prisma.DailyIdeaUncheckedUpdateOneWithoutIdeaScoreNestedInput
}

export type IdeaScoreCreateManyInput = {
  id?: string
  totalScore: number
  problemSeverity: number
  founderMarketFit: number
  technicalFeasibility: number
  monetizationPotential: number
  urgencyScore: number
  marketTimingScore: number
  executionDifficulty: number
  moatStrength: number
  regulatoryRisk: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type IdeaScoreUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalScore?: Prisma.IntFieldUpdateOperationsInput | number
  problemSeverity?: Prisma.IntFieldUpdateOperationsInput | number
  founderMarketFit?: Prisma.IntFieldUpdateOperationsInput | number
  technicalFeasibility?: Prisma.IntFieldUpdateOperationsInput | number
  monetizationPotential?: Prisma.IntFieldUpdateOperationsInput | number
  urgencyScore?: Prisma.IntFieldUpdateOperationsInput | number
  marketTimingScore?: Prisma.IntFieldUpdateOperationsInput | number
  executionDifficulty?: Prisma.IntFieldUpdateOperationsInput | number
  moatStrength?: Prisma.IntFieldUpdateOperationsInput | number
  regulatoryRisk?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IdeaScoreUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalScore?: Prisma.IntFieldUpdateOperationsInput | number
  problemSeverity?: Prisma.IntFieldUpdateOperationsInput | number
  founderMarketFit?: Prisma.IntFieldUpdateOperationsInput | number
  technicalFeasibility?: Prisma.IntFieldUpdateOperationsInput | number
  monetizationPotential?: Prisma.IntFieldUpdateOperationsInput | number
  urgencyScore?: Prisma.IntFieldUpdateOperationsInput | number
  marketTimingScore?: Prisma.IntFieldUpdateOperationsInput | number
  executionDifficulty?: Prisma.IntFieldUpdateOperationsInput | number
  moatStrength?: Prisma.IntFieldUpdateOperationsInput | number
  regulatoryRisk?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IdeaScoreCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  totalScore?: Prisma.SortOrder
  problemSeverity?: Prisma.SortOrder
  founderMarketFit?: Prisma.SortOrder
  technicalFeasibility?: Prisma.SortOrder
  monetizationPotential?: Prisma.SortOrder
  urgencyScore?: Prisma.SortOrder
  marketTimingScore?: Prisma.SortOrder
  executionDifficulty?: Prisma.SortOrder
  moatStrength?: Prisma.SortOrder
  regulatoryRisk?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IdeaScoreAvgOrderByAggregateInput = {
  totalScore?: Prisma.SortOrder
  problemSeverity?: Prisma.SortOrder
  founderMarketFit?: Prisma.SortOrder
  technicalFeasibility?: Prisma.SortOrder
  monetizationPotential?: Prisma.SortOrder
  urgencyScore?: Prisma.SortOrder
  marketTimingScore?: Prisma.SortOrder
  executionDifficulty?: Prisma.SortOrder
  moatStrength?: Prisma.SortOrder
  regulatoryRisk?: Prisma.SortOrder
}

export type IdeaScoreMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  totalScore?: Prisma.SortOrder
  problemSeverity?: Prisma.SortOrder
  founderMarketFit?: Prisma.SortOrder
  technicalFeasibility?: Prisma.SortOrder
  monetizationPotential?: Prisma.SortOrder
  urgencyScore?: Prisma.SortOrder
  marketTimingScore?: Prisma.SortOrder
  executionDifficulty?: Prisma.SortOrder
  moatStrength?: Prisma.SortOrder
  regulatoryRisk?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IdeaScoreMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  totalScore?: Prisma.SortOrder
  problemSeverity?: Prisma.SortOrder
  founderMarketFit?: Prisma.SortOrder
  technicalFeasibility?: Prisma.SortOrder
  monetizationPotential?: Prisma.SortOrder
  urgencyScore?: Prisma.SortOrder
  marketTimingScore?: Prisma.SortOrder
  executionDifficulty?: Prisma.SortOrder
  moatStrength?: Prisma.SortOrder
  regulatoryRisk?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IdeaScoreSumOrderByAggregateInput = {
  totalScore?: Prisma.SortOrder
  problemSeverity?: Prisma.SortOrder
  founderMarketFit?: Prisma.SortOrder
  technicalFeasibility?: Prisma.SortOrder
  monetizationPotential?: Prisma.SortOrder
  urgencyScore?: Prisma.SortOrder
  marketTimingScore?: Prisma.SortOrder
  executionDifficulty?: Prisma.SortOrder
  moatStrength?: Prisma.SortOrder
  regulatoryRisk?: Prisma.SortOrder
}

export type IdeaScoreNullableScalarRelationFilter = {
  is?: Prisma.IdeaScoreWhereInput | null
  isNot?: Prisma.IdeaScoreWhereInput | null
}

export type IdeaScoreCreateNestedOneWithoutDailyIdeaInput = {
  create?: Prisma.XOR<Prisma.IdeaScoreCreateWithoutDailyIdeaInput, Prisma.IdeaScoreUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.IdeaScoreCreateOrConnectWithoutDailyIdeaInput
  connect?: Prisma.IdeaScoreWhereUniqueInput
}

export type IdeaScoreUpdateOneWithoutDailyIdeaNestedInput = {
  create?: Prisma.XOR<Prisma.IdeaScoreCreateWithoutDailyIdeaInput, Prisma.IdeaScoreUncheckedCreateWithoutDailyIdeaInput>
  connectOrCreate?: Prisma.IdeaScoreCreateOrConnectWithoutDailyIdeaInput
  upsert?: Prisma.IdeaScoreUpsertWithoutDailyIdeaInput
  disconnect?: Prisma.IdeaScoreWhereInput | boolean
  delete?: Prisma.IdeaScoreWhereInput | boolean
  connect?: Prisma.IdeaScoreWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.IdeaScoreUpdateToOneWithWhereWithoutDailyIdeaInput, Prisma.IdeaScoreUpdateWithoutDailyIdeaInput>, Prisma.IdeaScoreUncheckedUpdateWithoutDailyIdeaInput>
}

export type IdeaScoreCreateWithoutDailyIdeaInput = {
  id?: string
  totalScore: number
  problemSeverity: number
  founderMarketFit: number
  technicalFeasibility: number
  monetizationPotential: number
  urgencyScore: number
  marketTimingScore: number
  executionDifficulty: number
  moatStrength: number
  regulatoryRisk: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type IdeaScoreUncheckedCreateWithoutDailyIdeaInput = {
  id?: string
  totalScore: number
  problemSeverity: number
  founderMarketFit: number
  technicalFeasibility: number
  monetizationPotential: number
  urgencyScore: number
  marketTimingScore: number
  executionDifficulty: number
  moatStrength: number
  regulatoryRisk: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type IdeaScoreCreateOrConnectWithoutDailyIdeaInput = {
  where: Prisma.IdeaScoreWhereUniqueInput
  create: Prisma.XOR<Prisma.IdeaScoreCreateWithoutDailyIdeaInput, Prisma.IdeaScoreUncheckedCreateWithoutDailyIdeaInput>
}

export type IdeaScoreUpsertWithoutDailyIdeaInput = {
  update: Prisma.XOR<Prisma.IdeaScoreUpdateWithoutDailyIdeaInput, Prisma.IdeaScoreUncheckedUpdateWithoutDailyIdeaInput>
  create: Prisma.XOR<Prisma.IdeaScoreCreateWithoutDailyIdeaInput, Prisma.IdeaScoreUncheckedCreateWithoutDailyIdeaInput>
  where?: Prisma.IdeaScoreWhereInput
}

export type IdeaScoreUpdateToOneWithWhereWithoutDailyIdeaInput = {
  where?: Prisma.IdeaScoreWhereInput
  data: Prisma.XOR<Prisma.IdeaScoreUpdateWithoutDailyIdeaInput, Prisma.IdeaScoreUncheckedUpdateWithoutDailyIdeaInput>
}

export type IdeaScoreUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalScore?: Prisma.IntFieldUpdateOperationsInput | number
  problemSeverity?: Prisma.IntFieldUpdateOperationsInput | number
  founderMarketFit?: Prisma.IntFieldUpdateOperationsInput | number
  technicalFeasibility?: Prisma.IntFieldUpdateOperationsInput | number
  monetizationPotential?: Prisma.IntFieldUpdateOperationsInput | number
  urgencyScore?: Prisma.IntFieldUpdateOperationsInput | number
  marketTimingScore?: Prisma.IntFieldUpdateOperationsInput | number
  executionDifficulty?: Prisma.IntFieldUpdateOperationsInput | number
  moatStrength?: Prisma.IntFieldUpdateOperationsInput | number
  regulatoryRisk?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IdeaScoreUncheckedUpdateWithoutDailyIdeaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  totalScore?: Prisma.IntFieldUpdateOperationsInput | number
  problemSeverity?: Prisma.IntFieldUpdateOperationsInput | number
  founderMarketFit?: Prisma.IntFieldUpdateOperationsInput | number
  technicalFeasibility?: Prisma.IntFieldUpdateOperationsInput | number
  monetizationPotential?: Prisma.IntFieldUpdateOperationsInput | number
  urgencyScore?: Prisma.IntFieldUpdateOperationsInput | number
  marketTimingScore?: Prisma.IntFieldUpdateOperationsInput | number
  executionDifficulty?: Prisma.IntFieldUpdateOperationsInput | number
  moatStrength?: Prisma.IntFieldUpdateOperationsInput | number
  regulatoryRisk?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type IdeaScoreSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  totalScore?: boolean
  problemSeverity?: boolean
  founderMarketFit?: boolean
  technicalFeasibility?: boolean
  monetizationPotential?: boolean
  urgencyScore?: boolean
  marketTimingScore?: boolean
  executionDifficulty?: boolean
  moatStrength?: boolean
  regulatoryRisk?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  dailyIdea?: boolean | Prisma.IdeaScore$dailyIdeaArgs<ExtArgs>
}, ExtArgs["result"]["ideaScore"]>

export type IdeaScoreSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  totalScore?: boolean
  problemSeverity?: boolean
  founderMarketFit?: boolean
  technicalFeasibility?: boolean
  monetizationPotential?: boolean
  urgencyScore?: boolean
  marketTimingScore?: boolean
  executionDifficulty?: boolean
  moatStrength?: boolean
  regulatoryRisk?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["ideaScore"]>

export type IdeaScoreSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  totalScore?: boolean
  problemSeverity?: boolean
  founderMarketFit?: boolean
  technicalFeasibility?: boolean
  monetizationPotential?: boolean
  urgencyScore?: boolean
  marketTimingScore?: boolean
  executionDifficulty?: boolean
  moatStrength?: boolean
  regulatoryRisk?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["ideaScore"]>

export type IdeaScoreSelectScalar = {
  id?: boolean
  totalScore?: boolean
  problemSeverity?: boolean
  founderMarketFit?: boolean
  technicalFeasibility?: boolean
  monetizationPotential?: boolean
  urgencyScore?: boolean
  marketTimingScore?: boolean
  executionDifficulty?: boolean
  moatStrength?: boolean
  regulatoryRisk?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type IdeaScoreOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "totalScore" | "problemSeverity" | "founderMarketFit" | "technicalFeasibility" | "monetizationPotential" | "urgencyScore" | "marketTimingScore" | "executionDifficulty" | "moatStrength" | "regulatoryRisk" | "createdAt" | "updatedAt", ExtArgs["result"]["ideaScore"]>
export type IdeaScoreInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  dailyIdea?: boolean | Prisma.IdeaScore$dailyIdeaArgs<ExtArgs>
}
export type IdeaScoreIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type IdeaScoreIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $IdeaScorePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "IdeaScore"
  objects: {
    dailyIdea: Prisma.$DailyIdeaPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    totalScore: number
    problemSeverity: number
    founderMarketFit: number
    technicalFeasibility: number
    monetizationPotential: number
    urgencyScore: number
    marketTimingScore: number
    executionDifficulty: number
    moatStrength: number
    regulatoryRisk: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["ideaScore"]>
  composites: {}
}

export type IdeaScoreGetPayload<S extends boolean | null | undefined | IdeaScoreDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$IdeaScorePayload, S>

export type IdeaScoreCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<IdeaScoreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IdeaScoreCountAggregateInputType | true
  }

export interface IdeaScoreDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IdeaScore'], meta: { name: 'IdeaScore' } }
  /**
   * Find zero or one IdeaScore that matches the filter.
   * @param {IdeaScoreFindUniqueArgs} args - Arguments to find a IdeaScore
   * @example
   * // Get one IdeaScore
   * const ideaScore = await prisma.ideaScore.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IdeaScoreFindUniqueArgs>(args: Prisma.SelectSubset<T, IdeaScoreFindUniqueArgs<ExtArgs>>): Prisma.Prisma__IdeaScoreClient<runtime.Types.Result.GetResult<Prisma.$IdeaScorePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one IdeaScore that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IdeaScoreFindUniqueOrThrowArgs} args - Arguments to find a IdeaScore
   * @example
   * // Get one IdeaScore
   * const ideaScore = await prisma.ideaScore.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IdeaScoreFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, IdeaScoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__IdeaScoreClient<runtime.Types.Result.GetResult<Prisma.$IdeaScorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IdeaScore that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IdeaScoreFindFirstArgs} args - Arguments to find a IdeaScore
   * @example
   * // Get one IdeaScore
   * const ideaScore = await prisma.ideaScore.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IdeaScoreFindFirstArgs>(args?: Prisma.SelectSubset<T, IdeaScoreFindFirstArgs<ExtArgs>>): Prisma.Prisma__IdeaScoreClient<runtime.Types.Result.GetResult<Prisma.$IdeaScorePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IdeaScore that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IdeaScoreFindFirstOrThrowArgs} args - Arguments to find a IdeaScore
   * @example
   * // Get one IdeaScore
   * const ideaScore = await prisma.ideaScore.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IdeaScoreFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, IdeaScoreFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__IdeaScoreClient<runtime.Types.Result.GetResult<Prisma.$IdeaScorePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more IdeaScores that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IdeaScoreFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all IdeaScores
   * const ideaScores = await prisma.ideaScore.findMany()
   * 
   * // Get first 10 IdeaScores
   * const ideaScores = await prisma.ideaScore.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const ideaScoreWithIdOnly = await prisma.ideaScore.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends IdeaScoreFindManyArgs>(args?: Prisma.SelectSubset<T, IdeaScoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IdeaScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a IdeaScore.
   * @param {IdeaScoreCreateArgs} args - Arguments to create a IdeaScore.
   * @example
   * // Create one IdeaScore
   * const IdeaScore = await prisma.ideaScore.create({
   *   data: {
   *     // ... data to create a IdeaScore
   *   }
   * })
   * 
   */
  create<T extends IdeaScoreCreateArgs>(args: Prisma.SelectSubset<T, IdeaScoreCreateArgs<ExtArgs>>): Prisma.Prisma__IdeaScoreClient<runtime.Types.Result.GetResult<Prisma.$IdeaScorePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many IdeaScores.
   * @param {IdeaScoreCreateManyArgs} args - Arguments to create many IdeaScores.
   * @example
   * // Create many IdeaScores
   * const ideaScore = await prisma.ideaScore.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends IdeaScoreCreateManyArgs>(args?: Prisma.SelectSubset<T, IdeaScoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many IdeaScores and returns the data saved in the database.
   * @param {IdeaScoreCreateManyAndReturnArgs} args - Arguments to create many IdeaScores.
   * @example
   * // Create many IdeaScores
   * const ideaScore = await prisma.ideaScore.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many IdeaScores and only return the `id`
   * const ideaScoreWithIdOnly = await prisma.ideaScore.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends IdeaScoreCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, IdeaScoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IdeaScorePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a IdeaScore.
   * @param {IdeaScoreDeleteArgs} args - Arguments to delete one IdeaScore.
   * @example
   * // Delete one IdeaScore
   * const IdeaScore = await prisma.ideaScore.delete({
   *   where: {
   *     // ... filter to delete one IdeaScore
   *   }
   * })
   * 
   */
  delete<T extends IdeaScoreDeleteArgs>(args: Prisma.SelectSubset<T, IdeaScoreDeleteArgs<ExtArgs>>): Prisma.Prisma__IdeaScoreClient<runtime.Types.Result.GetResult<Prisma.$IdeaScorePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one IdeaScore.
   * @param {IdeaScoreUpdateArgs} args - Arguments to update one IdeaScore.
   * @example
   * // Update one IdeaScore
   * const ideaScore = await prisma.ideaScore.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends IdeaScoreUpdateArgs>(args: Prisma.SelectSubset<T, IdeaScoreUpdateArgs<ExtArgs>>): Prisma.Prisma__IdeaScoreClient<runtime.Types.Result.GetResult<Prisma.$IdeaScorePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more IdeaScores.
   * @param {IdeaScoreDeleteManyArgs} args - Arguments to filter IdeaScores to delete.
   * @example
   * // Delete a few IdeaScores
   * const { count } = await prisma.ideaScore.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends IdeaScoreDeleteManyArgs>(args?: Prisma.SelectSubset<T, IdeaScoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IdeaScores.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IdeaScoreUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many IdeaScores
   * const ideaScore = await prisma.ideaScore.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends IdeaScoreUpdateManyArgs>(args: Prisma.SelectSubset<T, IdeaScoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IdeaScores and returns the data updated in the database.
   * @param {IdeaScoreUpdateManyAndReturnArgs} args - Arguments to update many IdeaScores.
   * @example
   * // Update many IdeaScores
   * const ideaScore = await prisma.ideaScore.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more IdeaScores and only return the `id`
   * const ideaScoreWithIdOnly = await prisma.ideaScore.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends IdeaScoreUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, IdeaScoreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IdeaScorePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one IdeaScore.
   * @param {IdeaScoreUpsertArgs} args - Arguments to update or create a IdeaScore.
   * @example
   * // Update or create a IdeaScore
   * const ideaScore = await prisma.ideaScore.upsert({
   *   create: {
   *     // ... data to create a IdeaScore
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the IdeaScore we want to update
   *   }
   * })
   */
  upsert<T extends IdeaScoreUpsertArgs>(args: Prisma.SelectSubset<T, IdeaScoreUpsertArgs<ExtArgs>>): Prisma.Prisma__IdeaScoreClient<runtime.Types.Result.GetResult<Prisma.$IdeaScorePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of IdeaScores.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IdeaScoreCountArgs} args - Arguments to filter IdeaScores to count.
   * @example
   * // Count the number of IdeaScores
   * const count = await prisma.ideaScore.count({
   *   where: {
   *     // ... the filter for the IdeaScores we want to count
   *   }
   * })
  **/
  count<T extends IdeaScoreCountArgs>(
    args?: Prisma.Subset<T, IdeaScoreCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IdeaScoreCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a IdeaScore.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IdeaScoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IdeaScoreAggregateArgs>(args: Prisma.Subset<T, IdeaScoreAggregateArgs>): Prisma.PrismaPromise<GetIdeaScoreAggregateType<T>>

  /**
   * Group by IdeaScore.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IdeaScoreGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends IdeaScoreGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IdeaScoreGroupByArgs['orderBy'] }
      : { orderBy?: IdeaScoreGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, IdeaScoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIdeaScoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the IdeaScore model
 */
readonly fields: IdeaScoreFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for IdeaScore.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IdeaScoreClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  dailyIdea<T extends Prisma.IdeaScore$dailyIdeaArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.IdeaScore$dailyIdeaArgs<ExtArgs>>): Prisma.Prisma__DailyIdeaClient<runtime.Types.Result.GetResult<Prisma.$DailyIdeaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the IdeaScore model
 */
export interface IdeaScoreFieldRefs {
  readonly id: Prisma.FieldRef<"IdeaScore", 'String'>
  readonly totalScore: Prisma.FieldRef<"IdeaScore", 'Int'>
  readonly problemSeverity: Prisma.FieldRef<"IdeaScore", 'Int'>
  readonly founderMarketFit: Prisma.FieldRef<"IdeaScore", 'Int'>
  readonly technicalFeasibility: Prisma.FieldRef<"IdeaScore", 'Int'>
  readonly monetizationPotential: Prisma.FieldRef<"IdeaScore", 'Int'>
  readonly urgencyScore: Prisma.FieldRef<"IdeaScore", 'Int'>
  readonly marketTimingScore: Prisma.FieldRef<"IdeaScore", 'Int'>
  readonly executionDifficulty: Prisma.FieldRef<"IdeaScore", 'Int'>
  readonly moatStrength: Prisma.FieldRef<"IdeaScore", 'Int'>
  readonly regulatoryRisk: Prisma.FieldRef<"IdeaScore", 'Int'>
  readonly createdAt: Prisma.FieldRef<"IdeaScore", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"IdeaScore", 'DateTime'>
}
    

// Custom InputTypes
/**
 * IdeaScore findUnique
 */
export type IdeaScoreFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IdeaScore
   */
  select?: Prisma.IdeaScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IdeaScore
   */
  omit?: Prisma.IdeaScoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IdeaScoreInclude<ExtArgs> | null
  /**
   * Filter, which IdeaScore to fetch.
   */
  where: Prisma.IdeaScoreWhereUniqueInput
}

/**
 * IdeaScore findUniqueOrThrow
 */
export type IdeaScoreFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IdeaScore
   */
  select?: Prisma.IdeaScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IdeaScore
   */
  omit?: Prisma.IdeaScoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IdeaScoreInclude<ExtArgs> | null
  /**
   * Filter, which IdeaScore to fetch.
   */
  where: Prisma.IdeaScoreWhereUniqueInput
}

/**
 * IdeaScore findFirst
 */
export type IdeaScoreFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IdeaScore
   */
  select?: Prisma.IdeaScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IdeaScore
   */
  omit?: Prisma.IdeaScoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IdeaScoreInclude<ExtArgs> | null
  /**
   * Filter, which IdeaScore to fetch.
   */
  where?: Prisma.IdeaScoreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IdeaScores to fetch.
   */
  orderBy?: Prisma.IdeaScoreOrderByWithRelationInput | Prisma.IdeaScoreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IdeaScores.
   */
  cursor?: Prisma.IdeaScoreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IdeaScores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IdeaScores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IdeaScores.
   */
  distinct?: Prisma.IdeaScoreScalarFieldEnum | Prisma.IdeaScoreScalarFieldEnum[]
}

/**
 * IdeaScore findFirstOrThrow
 */
export type IdeaScoreFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IdeaScore
   */
  select?: Prisma.IdeaScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IdeaScore
   */
  omit?: Prisma.IdeaScoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IdeaScoreInclude<ExtArgs> | null
  /**
   * Filter, which IdeaScore to fetch.
   */
  where?: Prisma.IdeaScoreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IdeaScores to fetch.
   */
  orderBy?: Prisma.IdeaScoreOrderByWithRelationInput | Prisma.IdeaScoreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IdeaScores.
   */
  cursor?: Prisma.IdeaScoreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IdeaScores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IdeaScores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IdeaScores.
   */
  distinct?: Prisma.IdeaScoreScalarFieldEnum | Prisma.IdeaScoreScalarFieldEnum[]
}

/**
 * IdeaScore findMany
 */
export type IdeaScoreFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IdeaScore
   */
  select?: Prisma.IdeaScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IdeaScore
   */
  omit?: Prisma.IdeaScoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IdeaScoreInclude<ExtArgs> | null
  /**
   * Filter, which IdeaScores to fetch.
   */
  where?: Prisma.IdeaScoreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IdeaScores to fetch.
   */
  orderBy?: Prisma.IdeaScoreOrderByWithRelationInput | Prisma.IdeaScoreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing IdeaScores.
   */
  cursor?: Prisma.IdeaScoreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IdeaScores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IdeaScores.
   */
  skip?: number
  distinct?: Prisma.IdeaScoreScalarFieldEnum | Prisma.IdeaScoreScalarFieldEnum[]
}

/**
 * IdeaScore create
 */
export type IdeaScoreCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IdeaScore
   */
  select?: Prisma.IdeaScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IdeaScore
   */
  omit?: Prisma.IdeaScoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IdeaScoreInclude<ExtArgs> | null
  /**
   * The data needed to create a IdeaScore.
   */
  data: Prisma.XOR<Prisma.IdeaScoreCreateInput, Prisma.IdeaScoreUncheckedCreateInput>
}

/**
 * IdeaScore createMany
 */
export type IdeaScoreCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many IdeaScores.
   */
  data: Prisma.IdeaScoreCreateManyInput | Prisma.IdeaScoreCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * IdeaScore createManyAndReturn
 */
export type IdeaScoreCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IdeaScore
   */
  select?: Prisma.IdeaScoreSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IdeaScore
   */
  omit?: Prisma.IdeaScoreOmit<ExtArgs> | null
  /**
   * The data used to create many IdeaScores.
   */
  data: Prisma.IdeaScoreCreateManyInput | Prisma.IdeaScoreCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * IdeaScore update
 */
export type IdeaScoreUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IdeaScore
   */
  select?: Prisma.IdeaScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IdeaScore
   */
  omit?: Prisma.IdeaScoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IdeaScoreInclude<ExtArgs> | null
  /**
   * The data needed to update a IdeaScore.
   */
  data: Prisma.XOR<Prisma.IdeaScoreUpdateInput, Prisma.IdeaScoreUncheckedUpdateInput>
  /**
   * Choose, which IdeaScore to update.
   */
  where: Prisma.IdeaScoreWhereUniqueInput
}

/**
 * IdeaScore updateMany
 */
export type IdeaScoreUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update IdeaScores.
   */
  data: Prisma.XOR<Prisma.IdeaScoreUpdateManyMutationInput, Prisma.IdeaScoreUncheckedUpdateManyInput>
  /**
   * Filter which IdeaScores to update
   */
  where?: Prisma.IdeaScoreWhereInput
  /**
   * Limit how many IdeaScores to update.
   */
  limit?: number
}

/**
 * IdeaScore updateManyAndReturn
 */
export type IdeaScoreUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IdeaScore
   */
  select?: Prisma.IdeaScoreSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IdeaScore
   */
  omit?: Prisma.IdeaScoreOmit<ExtArgs> | null
  /**
   * The data used to update IdeaScores.
   */
  data: Prisma.XOR<Prisma.IdeaScoreUpdateManyMutationInput, Prisma.IdeaScoreUncheckedUpdateManyInput>
  /**
   * Filter which IdeaScores to update
   */
  where?: Prisma.IdeaScoreWhereInput
  /**
   * Limit how many IdeaScores to update.
   */
  limit?: number
}

/**
 * IdeaScore upsert
 */
export type IdeaScoreUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IdeaScore
   */
  select?: Prisma.IdeaScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IdeaScore
   */
  omit?: Prisma.IdeaScoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IdeaScoreInclude<ExtArgs> | null
  /**
   * The filter to search for the IdeaScore to update in case it exists.
   */
  where: Prisma.IdeaScoreWhereUniqueInput
  /**
   * In case the IdeaScore found by the `where` argument doesn't exist, create a new IdeaScore with this data.
   */
  create: Prisma.XOR<Prisma.IdeaScoreCreateInput, Prisma.IdeaScoreUncheckedCreateInput>
  /**
   * In case the IdeaScore was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.IdeaScoreUpdateInput, Prisma.IdeaScoreUncheckedUpdateInput>
}

/**
 * IdeaScore delete
 */
export type IdeaScoreDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IdeaScore
   */
  select?: Prisma.IdeaScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IdeaScore
   */
  omit?: Prisma.IdeaScoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IdeaScoreInclude<ExtArgs> | null
  /**
   * Filter which IdeaScore to delete.
   */
  where: Prisma.IdeaScoreWhereUniqueInput
}

/**
 * IdeaScore deleteMany
 */
export type IdeaScoreDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IdeaScores to delete
   */
  where?: Prisma.IdeaScoreWhereInput
  /**
   * Limit how many IdeaScores to delete.
   */
  limit?: number
}

/**
 * IdeaScore.dailyIdea
 */
export type IdeaScore$dailyIdeaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DailyIdea
   */
  select?: Prisma.DailyIdeaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DailyIdea
   */
  omit?: Prisma.DailyIdeaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DailyIdeaInclude<ExtArgs> | null
  where?: Prisma.DailyIdeaWhereInput
}

/**
 * IdeaScore without action
 */
export type IdeaScoreDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IdeaScore
   */
  select?: Prisma.IdeaScoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IdeaScore
   */
  omit?: Prisma.IdeaScoreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IdeaScoreInclude<ExtArgs> | null
}
